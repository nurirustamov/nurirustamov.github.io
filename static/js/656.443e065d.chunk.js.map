{"version":3,"file":"static/js/656.443e065d.chunk.js","mappings":"oNAMA,MA+GA,EA/G6BA,IAAqF,IAApF,cAAEC,EAAa,QAAEC,EAAO,YAAEC,EAAW,gBAAEC,EAAe,YAAEC,EAAW,QAAEC,GAASN,EACxG,MAAM,OAAEO,IAAWC,EAAAA,EAAAA,KAEbC,GAAOC,EAAAA,EAAAA,SAAQ,IACVT,EAAcU,KAAKC,GAAKA,EAAEC,KAAOC,OAAOP,IAChD,CAACN,EAAeM,IAEbQ,GAAoBL,EAAAA,EAAAA,SAAQ,KAC9B,IAAKD,IAASP,EAAS,MAAO,GAE9B,MAAMc,EAAsB,IAAIC,KAAKb,GAAmB,IAAIc,OAAON,GAAKA,EAAEO,WAAmB,OAAPb,QAAO,IAAPA,OAAO,EAAPA,EAASO,KAAIO,IAAIR,GAAKA,EAAES,aACxGC,EAAmB,IAAIL,KAAKZ,GAAe,IAAIa,OAAOK,GAAKA,EAAEJ,WAAmB,OAAPb,QAAO,IAAPA,OAAO,EAAPA,EAASO,KAAIO,IAAIG,GAAKA,EAAEC,SAEvG,OAAQf,EAAKgB,YAAc,IAAIC,KAAK,CAACC,EAAGC,IAAMD,EAAEE,MAAQD,EAAEC,OAAOT,IAAIU,IAAS,IAADC,EACzE,MAAMC,EAAgB9B,EAAQS,KAAKsB,GAAKA,EAAEpB,KAAOiB,EAAKI,WACtD,IAAKF,EAAe,OAAAG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYL,GAAI,IAAEM,OAAQ,KAAMC,aAAa,EAAOC,SAAU,IAElF,MAAMC,GAAuC,QAA1BR,EAAAC,EAAcQ,oBAAY,IAAAT,OAAA,EAA1BA,EAA4BU,SAAU,EACzD,GAAmB,IAAfF,EACA,OAAAJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYL,GAAI,IAAEM,OAAQJ,EAAeK,aAAa,EAAOC,SAAU,IAG3E,IAAII,EAAiB,GACpBV,EAAcQ,cAAgB,IAAIG,QAAQC,KACnCA,EAAWvB,YAAcL,EAAoB6B,IAAID,EAAWvB,aAErDuB,EAAWE,SAAWxB,EAAiBuB,IAAID,EAAWE,WAD7DJ,MAMR,MAAMJ,EAAWS,KAAKC,MAAON,EAAiBH,EAAc,KACtDF,EAA2B,MAAbC,EAEpB,OAAAH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYL,GAAI,IAAEM,OAAQJ,EAAeK,cAAaC,gBAE3D,CAAC7B,EAAMP,EAASE,EAAiBC,EAAaC,IAE3C2C,GAAevC,EAAAA,EAAAA,SAAQ,KACzB,MAAM6B,EAAaxB,EAAkB0B,OACrC,GAAmB,IAAfF,EAAkB,MAAO,CAAEG,eAAgB,EAAGQ,WAAY,EAAGC,WAAY,GAE7E,MAAMT,EAAiB3B,EAAkBG,OAAOY,GAAQA,EAAKO,aAAaI,OAG1E,MAAO,CAAEC,iBAAgBQ,WAAYX,EAAYY,WAF9BZ,EAAa,EAAIQ,KAAKC,MAAON,EAAiBH,EAAc,KAAO,IAGvF,CAACxB,IAEJ,OAAKN,GAKD2C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,8CAA6CC,SAAA,EACxDF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAG,SAAQH,UACbF,EAAAA,EAAAA,MAACM,EAAAA,EAAM,CAACC,QAAQ,YAAYN,UAAU,OAAMC,SAAA,EAACC,EAAAA,EAAAA,KAACK,EAAAA,GAAa,IAAG,kEAElER,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCC,SAAA,EAC9CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,6CAA4CC,SAAE7C,EAAKoD,SACjEN,EAAAA,EAAAA,KAAA,KAAGF,UAAU,6BAA4BC,SAAE7C,EAAKqD,eAEhDP,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACtBF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yCAAwCC,SAAA,EACnDC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,4BAA2BC,SAAC,sBAC5CF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,wBAAuBC,SAAA,CAAEL,EAAaP,eAAe,MAAIO,EAAaC,WAAW,+BAErGK,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wCAAuCC,UAClDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iEAAiEU,MAAO,CAAEC,MAAM,GAADC,OAAKhB,EAAaE,WAAU,sBAO9IC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCC,SAAA,EAC9CC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,wCAAuCC,SAAC,uCACtDC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,YAAWC,SACpBvC,EAAkBK,IAAI,CAACU,EAAMoC,IACrBpC,EAAKM,QAGNgB,EAAAA,EAAAA,MAAA,MAAkBC,UAAS,6EAAAY,OAA+EnC,EAAKO,YAAc,cAAgB,yBAA0BiB,SAAA,EACnKC,EAAAA,EAAAA,KAAA,OAAKF,UAAS,yEAAAY,OAA2EnC,EAAKO,YAAc,eAAiB,eAAgBiB,SACxIxB,EAAKO,aAAckB,EAAAA,EAAAA,KAACY,EAAAA,GAAe,CAACd,UAAU,4BAA8BE,EAAAA,EAAAA,KAAA,QAAMF,UAAU,0BAAyBC,SAAEY,EAAQ,OAEpIX,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAC1BC,EAAAA,EAAAA,KAACa,EAAAA,GAAc,CAACf,UAAU,+BAE9BD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,8BAA6BC,SAAExB,EAAKM,OAAOyB,SACxDN,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6CAA4CC,UACvDC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kCAAkCU,MAAO,CAAEC,MAAM,GAADC,OAAKnC,EAAKQ,SAAQ,cAGzFiB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAC1BC,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAE,YAAAQ,OAAcnC,EAAKM,OAAOvB,IAAKyC,UAACC,EAAAA,EAAAA,KAACG,EAAAA,EAAM,CAACC,QAAQ,YAAYU,KAAK,KAAIf,SAAC,uBAd7ExB,EAAKjB,IAHO,QAuBG,KAAlCJ,EAAKgB,YAAc,IAAIgB,SACrBc,EAAAA,EAAAA,KAAA,KAAGF,UAAU,iCAAgCC,SAAC,0DAvDnDC,EAAAA,EAAAA,KAACe,EAAAA,EAAI,CAACjB,UAAU,oBAAmBC,UAACC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gBAAeC,SAAC,0B,uDCrDhF,MAIA,EAJatD,IAAA,IAAC,SAAEsD,EAAQ,UAAED,EAAY,IAAIrD,EAAA,OACtCuD,EAAAA,EAAAA,KAAA,OAAKF,UAAS,iEAAAY,OAAmEZ,GAAYC,SAAEA,I","sources":["pages/LearningPathViewPage.js","components/ui/Card.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport { ArrowLeftIcon, CollectionIcon, CheckCircleIcon } from '../assets/icons';\n\nconst LearningPathViewPage = ({ learningPaths, courses, onStartQuiz, articleProgress, quizResults, profile }) => {\n    const { pathId } = useParams();\n\n    const path = useMemo(() => {\n        return learningPaths.find(p => p.id === Number(pathId));\n    }, [learningPaths, pathId]);\n\n    const contentWithStatus = useMemo(() => {\n        if (!path || !courses) return [];\n\n        const completedArticleIds = new Set((articleProgress || []).filter(p => p.user_id === profile?.id).map(p => p.article_id));\n        const completedQuizIds = new Set((quizResults || []).filter(r => r.user_id === profile?.id).map(r => r.quizId));\n\n        return (path.path_items || []).sort((a, b) => a.order - b.order).map(item => {\n            const courseDetails = courses.find(c => c.id === item.course_id);\n            if (!courseDetails) return { ...item, course: null, isCompleted: false, progress: 0 };\n\n            const totalItems = courseDetails.course_items?.length || 0;\n            if (totalItems === 0) {\n                return { ...item, course: courseDetails, isCompleted: false, progress: 0 };\n            }\n\n            let completedCount = 0;\n            (courseDetails.course_items || []).forEach(courseItem => {\n                if (courseItem.article_id && completedArticleIds.has(courseItem.article_id)) {\n                    completedCount++;\n                } else if (courseItem.quiz_id && completedQuizIds.has(courseItem.quiz_id)) {\n                    completedCount++;\n                }\n            });\n\n            const progress = Math.round((completedCount / totalItems) * 100);\n            const isCompleted = progress === 100;\n\n            return { ...item, course: courseDetails, isCompleted, progress };\n        });\n    }, [path, courses, articleProgress, quizResults, profile]);\n\n    const pathProgress = useMemo(() => {\n        const totalItems = contentWithStatus.length;\n        if (totalItems === 0) return { completedCount: 0, totalCount: 0, percentage: 0 };\n\n        const completedCount = contentWithStatus.filter(item => item.isCompleted).length;\n        const percentage = totalItems > 0 ? Math.round((completedCount / totalItems) * 100) : 0;\n\n        return { completedCount, totalCount: totalItems, percentage };\n    }, [contentWithStatus]);\n\n    if (!path) {\n        return <Card className=\"text-center py-12\"><p className=\"text-gray-500\">Yüklənir...</p></Card>;\n    }\n\n    return (\n        <div className=\"animate-fade-in max-w-4xl mx-auto space-y-8\">\n            <div>\n                <Link to=\"/paths\">\n                    <Button variant=\"secondary\" className=\"mb-4\"><ArrowLeftIcon /> Tədris Yolları siyahısına qayıt</Button>\n                </Link>\n                <div className=\"bg-white rounded-xl shadow-lg p-8\">\n                    <h1 className=\"text-4xl font-extrabold text-gray-900 mb-3\">{path.title}</h1>\n                    <p className=\"text-lg text-gray-600 mb-6\">{path.description}</p>\n                    \n                    <div className=\"space-y-4\">\n                        <div>\n                            <div className=\"flex justify-between items-center mb-1\">\n                                <span className=\"font-bold text-orange-600\">Ümumi proqres</span>\n                                <span className=\"text-sm text-gray-500\">{pathProgress.completedCount} / {pathProgress.totalCount} kurs tamamlanıb</span>\n                            </div>\n                            <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                                <div className=\"bg-gradient-to-r from-orange-400 to-red-500 h-2.5 rounded-full\" style={{ width: `${pathProgress.percentage}%` }}></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"bg-white rounded-xl shadow-lg p-8\">\n                <h2 className=\"text-2xl font-bold text-gray-800 mb-6\">Tədris Yolunun Proqramı</h2>\n                <ol className=\"space-y-4\">\n                    {contentWithStatus.map((item, index) => {\n                        if (!item.course) return null; // Skip if course data is missing\n\n                        return (\n                            <li key={item.id} className={`flex items-center gap-4 p-4 rounded-lg border transition-all duration-200 ${item.isCompleted ? 'bg-green-50' : 'hover:border-gray-300'}`}>\n                                <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${item.isCompleted ? 'bg-green-100' : 'bg-gray-100'}`}>\n                                    {item.isCompleted ? <CheckCircleIcon className=\"w-6 h-6 text-green-500\" /> : <span className=\"font-bold text-gray-500\">{index + 1}</span>}\n                                </div>\n                                <div className=\"flex-shrink-0\">\n                                    <CollectionIcon className=\"w-6 h-6 text-purple-500\" />\n                                </div>\n                                <div className=\"flex-grow\">\n                                    <p className=\"font-semibold text-gray-800\">{item.course.title}</p>\n                                    <div className=\"w-full bg-gray-200 rounded-full h-1.5 mt-1\">\n                                        <div className=\"bg-green-500 h-1.5 rounded-full\" style={{ width: `${item.progress}%` }}></div>\n                                    </div>\n                                </div>\n                                <div className=\"flex-shrink-0\">\n                                    <Link to={`/courses/${item.course.id}`}><Button variant=\"secondary\" size=\"sm\">Kursa Keç</Button></Link>\n                                </div>\n                            </li>\n                        );\n                    })}\n                </ol>\n                {(path.path_items || []).length === 0 && (\n                    <p className=\"text-center text-gray-500 py-8\">Tədris yolunun proqramı boşdur.</p>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default LearningPathViewPage;","import React from 'react';\n\nconst Card = ({ children, className = '' }) => (\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\n);\n\nexport default Card;"],"names":["_ref","learningPaths","courses","onStartQuiz","articleProgress","quizResults","profile","pathId","useParams","path","useMemo","find","p","id","Number","contentWithStatus","completedArticleIds","Set","filter","user_id","map","article_id","completedQuizIds","r","quizId","path_items","sort","a","b","order","item","_courseDetails$course","courseDetails","c","course_id","_objectSpread","course","isCompleted","progress","totalItems","course_items","length","completedCount","forEach","courseItem","has","quiz_id","Math","round","pathProgress","totalCount","percentage","_jsxs","className","children","_jsx","Link","to","Button","variant","ArrowLeftIcon","title","description","style","width","concat","index","CheckCircleIcon","CollectionIcon","size","Card"],"sourceRoot":""}