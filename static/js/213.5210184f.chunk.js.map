{"version":3,"file":"static/js/213.5210184f.chunk.js","mappings":"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","sources":["pages/GroupAnalysisPage.js","components/ui/Card.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Card from '../components/ui/Card';\r\nimport { ChartBarIcon, FireIcon, AcademicCapIcon } from '../assets/icons';\r\n\r\nconst StatCard = ({ title, value, icon, subtext }) => (\r\n    <Card className=\"text-center\">\r\n        <div className=\"mx-auto text-orange-500 mb-2\">{icon}</div>\r\n        <p className=\"text-3xl font-bold text-gray-800\">{value}</p>\r\n        <h3 className=\"font-semibold text-gray-600\">{title}</h3>\r\n        {subtext && <p className=\"text-sm text-gray-400 mt-1\">{subtext}</p>}\r\n    </Card>\r\n);\r\n\r\nconst isAnswerCorrect = (question, userAnswer) => {\r\n    if (userAnswer === undefined || userAnswer === null) return false;\r\n    if (!question || !question.type) return false;\r\n    if (question.type === 'open') return userAnswer?.score > 0;\r\n    if (question.type === 'single') return userAnswer === question.options[question.correctAnswers[0]];\r\n    if (question.type === 'multiple') { const correct = question.correctAnswers.map(i => question.options[i]).sort(); const user = userAnswer ? [...userAnswer].sort() : []; return JSON.stringify(correct) === JSON.stringify(user); }\r\n    if (question.type === 'textInput') return userAnswer && question.correctAnswers[0].trim().toLowerCase() === userAnswer.trim().toLowerCase();\r\n    if (question.type === 'trueFalse') return userAnswer === question.correctAnswer;\r\n    if (question.type === 'ordering') return JSON.stringify(userAnswer) === JSON.stringify(question.orderItems);\r\n    return false;\r\n};\r\n\r\nconst GroupAnalysisPage = ({ studentGroups, allUsers, results, courses, quizzes, userCourseCompletions }) => {\r\n    const [selectedGroupId, setSelectedGroupId] = useState('');\r\n\r\n    const analysis = useMemo(() => {\r\n        if (!selectedGroupId) return null;\r\n\r\n        const group = studentGroups.find(g => g.id === Number(selectedGroupId));\r\n        if (!group) return null;\r\n\r\n        const memberIds = new Set((group.members || []).map(m => m.user_id));\r\n        if (memberIds.size === 0) return { groupName: group.name, memberCount: 0 };\r\n\r\n        const groupMembers = allUsers.filter(u => memberIds.has(u.id));\r\n        const groupResults = results.filter(r => memberIds.has(r.user_id) && r.status !== 'pending_review');\r\n        const groupCompletions = (userCourseCompletions || []).filter(c => memberIds.has(c.user_id));\r\n\r\n        // 1. Средний балл по всем тестам\r\n        const totalPercentage = groupResults.reduce((acc, r) => acc + r.percentage, 0);\r\n        const averageScore = groupResults.length > 0 ? (totalPercentage / groupResults.length).toFixed(1) : 0;\r\n\r\n        // 2. Процент завершения курсов (упрощенно: общее кол-во завершений / (кол-во студентов * кол-во курсов))\r\n        const totalPossibleCompletions = memberIds.size * courses.filter(c => c.is_published).length;\r\n        const courseCompletionPercentage = totalPossibleCompletions > 0 ? ((groupCompletions.length / totalPossibleCompletions) * 100).toFixed(1) : 0;\r\n\r\n        // 3. Отстающие студенты\r\n        const oneWeekAgo = new Date();\r\n        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n\r\n        const atRiskStudents = groupMembers.map(student => {\r\n            const studentResults = groupResults.filter(r => r.user_id === student.id);\r\n            const studentAverage = studentResults.length > 0 ? (studentResults.reduce((acc, r) => acc + r.percentage, 0) / studentResults.length) : 0;\r\n            return { ...student, average: studentAverage };\r\n        }).filter(student => \r\n            student.average < 50 || !student.last_login || new Date(student.last_login) < oneWeekAgo\r\n        );\r\n\r\n        // 4. Самые сложные/легкие вопросы\r\n        const questionStats = {};\r\n        groupResults.forEach(result => {\r\n            const quiz = quizzes.find(q => q.id === result.quizId);\r\n            if (!quiz) return;\r\n\r\n            result.questionOrder.forEach(q_ordered => {\r\n                const question = (quiz.questions || []).find(q => q.id === q_ordered.id);\r\n                if (!question) return;\r\n\r\n                if (!questionStats[question.id]) {\r\n                    questionStats[question.id] = { text: question.text, correct: 0, incorrect: 0, quizTitle: quiz.title };\r\n                }\r\n\r\n                if (isAnswerCorrect(question, result.userAnswers[question.id])) {\r\n                    questionStats[question.id].correct++;\r\n                } else {\r\n                    questionStats[question.id].incorrect++;\r\n                }\r\n            });\r\n        });\r\n\r\n        const allQuestions = Object.values(questionStats).map(q => ({\r\n            ...q,\r\n            total: q.correct + q.incorrect,\r\n            correctRate: (q.correct / (q.correct + q.incorrect)) * 100\r\n        })).filter(q => q.total > 0);\r\n\r\n        const hardestQuestions = [...allQuestions].sort((a, b) => a.correctRate - b.correctRate).slice(0, 5);\r\n        const easiestQuestions = [...allQuestions].sort((a, b) => b.correctRate - a.correctRate).slice(0, 5);\r\n\r\n        return { \r\n            groupName: group.name,\r\n            memberCount: memberIds.size,\r\n            averageScore, \r\n            courseCompletionPercentage,\r\n            atRiskStudents,\r\n            hardestQuestions,\r\n            easiestQuestions\r\n        };\r\n\r\n    }, [selectedGroupId, studentGroups, allUsers, results, courses, quizzes, userCourseCompletions]);\r\n\r\n    return (\r\n        <div className=\"animate-fade-in space-y-6\">\r\n            <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800\">Qrup Analizi</h1>\r\n            <Card>\r\n                <div className=\"mb-4\">\r\n                    <label htmlFor=\"group-select\" className=\"block text-sm font-medium text-gray-700 mb-1\">Təhlil üçün qrupu seçin</label>\r\n                    <select \r\n                        id=\"group-select\"\r\n                        value={selectedGroupId}\r\n                        onChange={e => setSelectedGroupId(e.target.value)}\r\n                        className=\"w-full p-2 border border-gray-300 rounded-md bg-white focus:ring-orange-500 focus:border-orange-500\"\r\n                    >\r\n                        <option value=\"\" disabled>Qrup seçin...</option>\r\n                        {studentGroups.map(group => (\r\n                            <option key={group.id} value={group.id}>{group.name}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </Card>\r\n\r\n            {analysis ? (\r\n                <div className=\"space-y-6\">\r\n                    <h2 className=\"text-xl font-bold\">Statistika: {analysis.groupName} ({analysis.memberCount} üzv)</h2>\r\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\r\n                        <StatCard title=\"Testlər üzrə orta bal\" value={`${analysis.averageScore}%`} icon={<ChartBarIcon />} />\r\n                        <StatCard title=\"Kursları tamamlama\" value={`${analysis.courseCompletionPercentage}%`} icon={<AcademicCapIcon />} subtext=\"(bütün kurslar üzrə)\"/>\r\n                        <StatCard title=\"Risk qrupunda olanlar\" value={analysis.atRiskStudents.length} icon={<FireIcon />} subtext=\"(zəif nəticə və ya aktivlik)\"/>\r\n                    </div>\r\n\r\n                    {analysis.atRiskStudents.length > 0 && (\r\n                        <Card>\r\n                            <h3 className=\"font-bold text-lg mb-3\">Risq Qrupundakı Tələbələr</h3>\r\n                            <ul className=\"divide-y divide-gray-200\">\r\n                                {analysis.atRiskStudents.map(student => (\r\n                                    <li key={student.id} className=\"py-3 flex justify-between items-center\">\r\n                                        <Link to={`/student/${student.id}`} className=\"text-blue-600 hover:underline font-semibold\">{student.first_name} {student.last_name}</Link>\r\n                                        <div className=\"text-right\">\r\n                                            <p className=\"text-sm text-red-600\">Orta bal: {student.average.toFixed(1)}%</p>\r\n                                            <p className=\"text-xs text-gray-500\">Son aktivlik: {student.last_login ? new Date(student.last_login).toLocaleDateString() : 'Məlum deyil'}</p>\r\n                                        </div>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </Card>\r\n                    )}\r\n\r\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n                        <Card>\r\n                            <h3 className=\"font-bold text-lg mb-3\">Ən Çətin Suallar</h3>\r\n                            <ul className=\"space-y-2\">\r\n                                {analysis.hardestQuestions.map(q => (\r\n                                    <li key={q.text} className=\"text-sm p-2 bg-red-50 rounded-md\">\r\n                                        <p className=\"font-semibold truncate\">{q.text}</p>\r\n                                        <p className=\"text-red-700\">Düzgün cavab: {q.correctRate.toFixed(1)}% ({q.quizTitle})</p>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </Card>\r\n                        <Card>\r\n                            <h3 className=\"font-bold text-lg mb-3\">Ən Asan Suallar</h3>\r\n                            <ul className=\"space-y-2\">\r\n                                {analysis.easiestQuestions.map(q => (\r\n                                    <li key={q.text} className=\"text-sm p-2 bg-green-50 rounded-md\">\r\n                                        <p className=\"font-semibold truncate\">{q.text}</p>\r\n                                        <p className=\"text-green-700\">Düzgün cavab: {q.correctRate.toFixed(1)}% ({q.quizTitle})</p>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </Card>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                selectedGroupId && <Card className=\"text-center py-12\"><p className=\"text-gray-500\">Bu qrup üçün data tapılmadı.</p></Card>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GroupAnalysisPage;\r\n","import React from 'react';\n\nconst Card = ({ children, className = '' }) => (\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\n);\n\nexport default Card;"],"names":["StatCard","_ref","title","value","icon","subtext","_jsxs","Card","className","children","_jsx","_ref2","studentGroups","allUsers","results","courses","quizzes","userCourseCompletions","selectedGroupId","setSelectedGroupId","useState","analysis","useMemo","group","find","g","id","Number","memberIds","Set","members","map","m","user_id","size","groupName","name","memberCount","groupMembers","filter","u","has","groupResults","r","status","groupCompletions","c","totalPercentage","reduce","acc","percentage","averageScore","length","toFixed","totalPossibleCompletions","is_published","courseCompletionPercentage","oneWeekAgo","Date","setDate","getDate","atRiskStudents","student","studentResults","studentAverage","_objectSpread","average","last_login","questionStats","forEach","result","quiz","q","quizId","questionOrder","q_ordered","question","questions","text","correct","incorrect","quizTitle","isAnswerCorrect","userAnswer","undefined","type","score","options","correctAnswers","i","sort","user","JSON","stringify","trim","toLowerCase","correctAnswer","orderItems","userAnswers","allQuestions","Object","values","total","correctRate","hardestQuestions","a","b","slice","easiestQuestions","htmlFor","onChange","e","target","disabled","concat","ChartBarIcon","AcademicCapIcon","FireIcon","Link","to","first_name","last_name","toLocaleDateString"],"sourceRoot":""}