{"version":3,"file":"static/js/619.212b2b89.chunk.js","mappings":"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","sources":["pages/StudentGroupEditorPage.js","components/ui/Card.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Card from '../components/ui/Card';\r\nimport Button from '../components/ui/Button';\r\nimport Modal from '../components/ui/Modal';\r\nimport { ArrowLeftIcon, CheckIcon, PlusIcon, TrashIcon, DocumentTextIcon, UsersIcon } from '../assets/icons';\r\n\r\n// Modal for adding students to a group\r\nconst AddStudentModal = ({ isOpen, onClose, allUsers, onAddMembers, existingMembers }) => {\r\n    const [selectedIds, setSelectedIds] = useState(new Set());\r\n\r\n    const availableStudents = useMemo(() => {\r\n        const existingMemberIds = new Set(existingMembers.map(m => m.user_id));\r\n        return allUsers.filter(u => u.role !== 'admin' && !existingMemberIds.has(u.id));\r\n    }, [allUsers, existingMembers]);\r\n\r\n    const handleToggleSelection = (userId) => {\r\n        const newSelection = new Set(selectedIds);\r\n        if (newSelection.has(userId)) {\r\n            newSelection.delete(userId);\r\n        } else {\r\n            newSelection.add(userId);\r\n        }\r\n        setSelectedIds(newSelection);\r\n    };\r\n\r\n    const handleAdd = () => {\r\n        onAddMembers(Array.from(selectedIds));\r\n        setSelectedIds(new Set());\r\n        onClose();\r\n    };\r\n\r\n    if (!isOpen) return null;\r\n\r\n    return (\r\n        <Modal isOpen={isOpen} onClose={onClose} title=\"Qrupa tələbə əlavə et\">\r\n            <div className=\"max-h-72 overflow-y-auto space-y-2 pr-2\">\r\n                {availableStudents.length > 0 ? availableStudents.map(user => (\r\n                    <div key={user.id} className=\"flex items-center p-2 rounded-md hover:bg-gray-100\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id={`user-${user.id}`}\r\n                            checked={selectedIds.has(user.id)}\r\n                            onChange={() => handleToggleSelection(user.id)}\r\n                            className=\"h-4 w-4 text-orange-600 rounded mr-3\"\r\n                        />\r\n                        <label htmlFor={`user-${user.id}`} className=\"flex-1 cursor-pointer text-sm font-medium\">\r\n                            {user.first_name} {user.last_name} ({user.email})\r\n                        </label>\r\n                    </div>\r\n                )) : (\r\n                    <p className=\"text-center text-gray-500 py-10\">Əlavə ediləcək tələbə yoxdur.</p>\r\n                )}\r\n            </div>\r\n            <div className=\"mt-6 flex justify-end\">\r\n                <Button onClick={handleAdd} disabled={selectedIds.size === 0}><PlusIcon /> Seçilmişləri əlavə et ({selectedIds.size})</Button>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nconst StudentGroupEditorPage = ({ group, onDraftChange, allUsers, onSave, showToast }) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const handleGroupInfoChange = (e) => {\r\n        const { name, value } = e.target;\r\n        onDraftChange(prev => ({ ...prev, [name]: value }));\r\n    };\r\n\r\n    const addMembers = (userIds) => {\r\n        const membersToAdd = allUsers\r\n            .filter(u => userIds.includes(u.id))\r\n            .map(u => ({\r\n                user_id: u.id,\r\n                profiles: { // Mimic structure for immediate display\r\n                    first_name: u.first_name,\r\n                    last_name: u.last_name,\r\n                    email: u.email\r\n                }\r\n            }));\r\n        onDraftChange(prev => ({ ...prev, members: [...(prev.members || []), ...membersToAdd] }));\r\n    };\r\n\r\n\r\n    const removeMember = (userId) => {\r\n        onDraftChange(prev => ({ ...prev, members: prev.members.filter(m => m.user_id !== userId) }));\r\n    };\r\n\r\n    const handleSave = () => {\r\n        if (!group.name.trim()) {\r\n            showToast('Qrupun adı boş ola bilməz.');\r\n            return;\r\n        }\r\n        onSave(group);\r\n    };\r\n\r\n    if (!group) return <div>Yüklənir...</div>;\r\n\r\n    return (\r\n        <>\r\n            <AddStudentModal\r\n                isOpen={isModalOpen}\r\n                onClose={() => setIsModalOpen(false)}\r\n                allUsers={allUsers}\r\n                onAddMembers={addMembers}\r\n                existingMembers={group.members || []}\r\n            />\r\n            <div className=\"animate-fade-in grid lg:grid-cols-3 gap-8 items-start\">\r\n                {/* Left Panel */}\r\n                <div className=\"lg:col-span-1 space-y-6 lg:sticky lg:top-24\">\r\n                    <div className=\"flex flex-col gap-2\">\r\n                        <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800\">{group.id ? 'Qrupu Redaktə Et' : 'Yeni Qrup Yarat'}</h1>\r\n                        <div className=\"flex flex-col sm:flex-row gap-2\">\r\n                            <Button variant=\"secondary\" onClick={() => navigate('/admin/groups')} className=\"w-full justify-center\"><ArrowLeftIcon /> Siyahıya qayıt</Button>\r\n                            <Button onClick={handleSave} className=\"w-full justify-center\"><CheckIcon /> Yadda saxla</Button>\r\n                        </div>\r\n                    </div>\r\n                    <Card>\r\n                        <h3 className=\"font-bold text-gray-800 mb-3 flex items-center gap-2\"><DocumentTextIcon /> Qrup Məlumatları</h3>\r\n                        <div className=\"space-y-4\">\r\n                            <div>\r\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Qrupun Adı</label>\r\n                                <input type=\"text\" name=\"name\" value={group.name || ''} onChange={handleGroupInfoChange} className=\"w-full p-2 border border-gray-300 rounded-md\" />\r\n                            </div>\r\n                            <div>\r\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Təsvir</label>\r\n                                <textarea name=\"description\" value={group.description || ''} onChange={handleGroupInfoChange} rows=\"4\" className=\"w-full p-2 border border-gray-300 rounded-md\"></textarea>\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n\r\n                {/* Right Panel */}\r\n                <div className=\"lg:col-span-2\">\r\n                    <Card>\r\n                        <div className=\"flex justify-between items-center mb-4\">\r\n                            <h3 className=\"font-bold flex items-center gap-2\"><UsersIcon /> Qrup Üzvləri ({(group.members || []).length})</h3>\r\n                            <Button onClick={() => setIsModalOpen(true)}><PlusIcon /> Üzv əlavə et</Button>\r\n                        </div>\r\n                        <div className=\"space-y-2\">\r\n                            {(group.members || []).map((member) => (\r\n                                <div key={member.user_id} className=\"p-3 rounded-lg flex items-center justify-between bg-white border\">\r\n                                    <span className=\"font-medium\">{member.profiles?.first_name} {member.profiles?.last_name}</span>\r\n                                    <Button size=\"sm\" variant=\"danger\" onClick={() => removeMember(member.user_id)}><TrashIcon /></Button>\r\n                                </div>\r\n                            ))}\r\n                            {(group.members || []).length === 0 && <p className=\"text-center text-gray-500 py-8\">Qrupda tələbə yoxdur.</p>}\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default StudentGroupEditorPage;","import React from 'react';\r\n\r\nconst Card = ({ children, className = '' }) => (\r\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\r\n);\r\n\r\nexport default Card;"],"names":["AddStudentModal","_ref","isOpen","onClose","allUsers","onAddMembers","existingMembers","selectedIds","setSelectedIds","useState","Set","availableStudents","useMemo","existingMemberIds","map","m","user_id","filter","u","role","has","id","_jsxs","Modal","title","children","_jsx","className","length","user","type","concat","checked","onChange","userId","newSelection","delete","add","handleToggleSelection","htmlFor","first_name","last_name","email","Button","onClick","handleAdd","Array","from","disabled","size","PlusIcon","_ref2","group","onDraftChange","onSave","showToast","isModalOpen","setIsModalOpen","navigate","useNavigate","handleGroupInfoChange","e","name","value","target","prev","_objectSpread","_Fragment","userIds","membersToAdd","includes","profiles","members","variant","ArrowLeftIcon","handleSave","trim","CheckIcon","Card","DocumentTextIcon","description","rows","UsersIcon","member","_member$profiles","_member$profiles2","removeMember","TrashIcon"],"sourceRoot":""}