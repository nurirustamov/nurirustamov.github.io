{"version":3,"file":"static/js/129.1d508a7e.chunk.js","mappings":"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","sources":["components/ui/LevelProgressBar.js","hooks/useGamification.js","components/GamificationStats.js","hooks/useWeakTopics.js","components/ui/WeakTopicsCard.js","pages/DashboardPage.js","components/ui/Card.js"],"sourcesContent":["import React from 'react';\nimport { useGamification } from '../../hooks/useGamification';\n\nconst LevelProgressBar = ({ experience }) => {\n    const { level, xpForNextLevel, progressPercentage } = useGamification(experience);\n\n    return (\n        <div>\n            <div className=\"flex justify-between items-center mb-1\">\n                <span className=\"font-bold text-orange-600\">Səviyyə {level}</span>\n                <span className=\"text-sm text-gray-500\">{experience} / {xpForNextLevel} XP</span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                <div \n                    className=\"bg-gradient-to-r from-orange-400 to-red-500 h-2.5 rounded-full\" \n                    style={{ width: `${progressPercentage}%` }}\n                ></div>\n            </div>\n        </div>\n    );\n};\n\nexport default LevelProgressBar;","import { useMemo } from 'react';\n\nexport const useGamification = (experience) => {\n    const gamificationData = useMemo(() => {\n        const xp = experience || 0;\n        const currentLevel = Math.floor(xp / 100) + 1;\n        const nextLevelXp = currentLevel * 100;\n        const currentLevelXp = (currentLevel - 1) * 100;\n        const xpIntoLevel = xp - currentLevelXp;\n        const xpForNextLevel = nextLevelXp - currentLevelXp;\n        const progressPercentage = xpForNextLevel > 0 ? (xpIntoLevel / xpForNextLevel) * 100 : 0;\n\n        return {\n            level: currentLevel,\n            experience: xp,\n            xpForNextLevel: nextLevelXp,\n            progressPercentage,\n        };\n    }, [experience]);\n\n    return gamificationData;\n};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from './ui/Card';\nimport LevelProgressBar from './ui/LevelProgressBar';\nimport { StarIcon, FireIcon } from '../assets/icons';\n\nconst GamificationStats = ({ profile }) => {\n    if (!profile) return null;\n\n    const experience = profile.experience_points || 0;\n    const dailyStreak = profile.daily_streak || 0;\n\n    return (\n        <Card>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 items-center\">\n                <div className=\"md:col-span-2\">\n                    <h2 className=\"text-xl font-bold mb-4\">Sizin Proqresiniz</h2>\n                    <LevelProgressBar experience={experience} />\n                </div>\n                <div className=\"flex justify-around md:justify-end gap-6 text-center border-t md:border-t-0 md:border-l border-gray-200 pt-4 md:pt-0 md:pl-6\">\n                    <Link to=\"/profile\" className=\"flex flex-col items-center hover:opacity-75 transition-opacity\">\n                        <div className=\"flex items-center gap-2 text-2xl font-bold text-yellow-500\">\n                            <StarIcon />\n                            <span>{experience}</span>\n                        </div>\n                        <span className=\"text-sm text-gray-500\">Təcrübə Xalı</span>\n                    </Link>\n                    <Link to=\"/profile\" className=\"flex flex-col items-center hover:opacity-75 transition-opacity\">\n                        <div className=\"flex items-center gap-2 text-2xl font-bold text-red-500\">\n                            <FireIcon />\n                            <span>{dailyStreak}</span>\n                        </div>\n                        <span className=\"text-sm text-gray-500\">Günlük Seriya</span>\n                    </Link>\n                </div>\n            </div>\n        </Card>\n    );\n};\n\nexport default GamificationStats;","import { useMemo } from 'react';\n\nconst isAnswerCorrect = (question, userAnswer) => {\n    if (userAnswer === undefined || userAnswer === null) return false;\n    if (!question || !question.type) return false;\n\n    switch (question.type) {\n        case 'single': return userAnswer === question.options[question.correctAnswers[0]];\n        case 'multiple':\n            const correctOptions = question.correctAnswers.map(i => question.options[i]).sort();\n            const userOptions = Array.isArray(userAnswer) ? [...userAnswer].sort() : [];\n            return JSON.stringify(correctOptions) === JSON.stringify(userOptions);\n        case 'textInput': return userAnswer.trim().toLowerCase() === question.correctAnswers[0].trim().toLowerCase();\n        case 'trueFalse': return userAnswer === question.correctAnswer;\n        case 'ordering': return JSON.stringify(userAnswer) === JSON.stringify(question.orderItems);\n        default: return false;\n    }\n};\n\nexport const useWeakTopics = (quizResults, quizzes, profile) => {\n    const weakTopics = useMemo(() => {\n        if (!profile || !quizResults.length || !quizzes.length) {\n            return [];\n        }\n\n        const userResults = quizResults.filter(r => r.user_id === profile.id && r.status === 'completed');\n        if (userResults.length === 0) {\n            return [];\n        }\n\n        const topicStats = new Map(); // topic => { correct: 0, total: 0 }\n\n        userResults.forEach(result => {\n            const quiz = quizzes.find(q => q.id === result.quizId);\n            if (!quiz || !quiz.questions) return;\n\n            result.questionOrder.forEach(q_ordered => {\n                const originalQuestion = quiz.questions.find(q => q.id === q_ordered.id);\n                if (!originalQuestion) return;\n\n                const topics = [];\n                if (quiz.category) topics.push(quiz.category);\n                if (originalQuestion.tags && Array.isArray(originalQuestion.tags)) topics.push(...originalQuestion.tags);\n                if (topics.length === 0) return;\n\n                const correct = isAnswerCorrect(originalQuestion, result.userAnswers[originalQuestion.id]);\n\n                topics.forEach(topic => {\n                    if (!topicStats.has(topic)) topicStats.set(topic, { correct: 0, total: 0 });\n                    const stats = topicStats.get(topic);\n                    stats.total += 1;\n                    if (correct) stats.correct += 1;\n                });\n            });\n        });\n\n        if (topicStats.size === 0) return [];\n\n        return Array.from(topicStats.entries()).map(([topic, stats]) => ({ name: topic, accuracy: stats.total > 0 ? Math.round((stats.correct / stats.total) * 100) : 0, totalQuestions: stats.total, })).filter(topic => topic.totalQuestions > 2).sort((a, b) => a.accuracy - b.accuracy).slice(0, 3);\n    }, [profile, quizResults, quizzes]);\n\n    return weakTopics;\n};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from './Card';\nimport { ChartBarIcon } from '../../assets/icons';\n\nconst WeakTopicsCard = ({ topics }) => {\n    if (!topics || topics.length === 0) {\n        return null;\n    }\n\n    return (\n        <Card>\n            <h2 className=\"text-xl font-bold mb-4\">Təkmilləşdiriləcək Mövzular</h2>\n            <div className=\"space-y-4\">\n                {topics.map(topic => (\n                    <Link \n                        to={`/search?q=${encodeURIComponent(topic.name)}`} \n                        key={topic.name} \n                        className=\"block p-4 rounded-lg bg-orange-50 hover:bg-orange-100 transition-colors\"\n                    >\n                        <div className=\"flex justify-between items-center\">\n                            <div className=\"flex items-center gap-3\">\n                                <ChartBarIcon className=\"w-6 h-6 text-orange-500\" />\n                                <span className=\"font-semibold text-gray-800\">{topic.name}</span>\n                            </div>\n                            <div className=\"text-right\">\n                                <p className=\"font-bold text-lg text-orange-600\">{topic.accuracy}%</p>\n                                <p className=\"text-xs text-gray-500\">{topic.totalQuestions} sualdan</p>\n                            </div>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                            <div className=\"bg-gradient-to-r from-orange-400 to-red-500 h-2 rounded-full\" style={{ width: `${topic.accuracy}%` }}></div>\n                        </div>\n                    </Link>\n                ))}\n            </div>\n        </Card>\n    );\n};\n\nexport default WeakTopicsCard;","import React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport { ClipboardCheckIcon, DuplicateIcon, BookOpenIcon, CollectionIcon, PaperAirplaneIcon, DocumentTextIcon } from '../assets/icons';\nimport { useWeakTopics } from '../hooks/useWeakTopics';\nimport WeakTopicsCard from '../components/ui/WeakTopicsCard';\nimport GamificationStats from '../components/GamificationStats';\n\n\nconst DashboardPage = ({ profile, activeAssignmentsCount, dueFlashcardsCount, quizResults, quizzes }) => {\n    const navigate = useNavigate();\n    \n    const weakTopics = useWeakTopics(quizResults, quizzes, profile);\n    \n    if (!profile) {\n        return <div className=\"text-center py-12\">Yüklənir...</div>;\n    }\n\n    return (\n        <div className=\"space-y-6 animate-fade-in\">\n            <h1 className=\"text-3xl font-bold text-gray-800\">Xoş gəlmisiniz, {profile.first_name || profile.username}!</h1>\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Link to=\"/my-assignments\" className=\"block\">\n                    <Card className=\"hover:shadow-orange-200 hover:-translate-y-1 transition-transform duration-200 text-center h-full\">\n                        <ClipboardCheckIcon className=\"w-12 h-12 mx-auto text-orange-500\" />\n                        <p className=\"text-4xl font-bold mt-2\">{activeAssignmentsCount}</p>\n                        <p className=\"text-gray-600 mt-1\">Aktiv Tapşırıq</p>\n                    </Card>\n                </Link>\n                <Link to=\"/decks\" className=\"block\">\n                    <Card className=\"hover:shadow-blue-200 hover:-translate-y-1 transition-transform duration-200 text-center h-full\">\n                        <DuplicateIcon className=\"w-12 h-12 mx-auto text-blue-500\" />\n                        <p className=\"text-4xl font-bold mt-2\">{dueFlashcardsCount}</p>\n                        <p className=\"text-gray-600 mt-1\">Təkrar üçün Kart</p>\n                    </Card>\n                </Link>\n            </div>\n\n            {/* Gamification Stats */}\n            <GamificationStats profile={profile} />\n\n            {/* New Weak Topics Card */}\n            <WeakTopicsCard topics={weakTopics} />\n\n            {/* Быстрые действия */}\n            <Card>\n                <h2 className=\"text-xl font-bold mb-4\">Haradan başlayaq?</h2>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n                    <Button onClick={() => navigate('/quizzes')} variant=\"secondary\" className=\"h-24 text-lg\"><BookOpenIcon /> Testlər</Button>\n                    <Button onClick={() => navigate('/articles')} variant=\"secondary\" className=\"h-24 text-lg\"><DocumentTextIcon /> Məqalələr</Button>\n                    <Button onClick={() => navigate('/courses')} variant=\"secondary\" className=\"h-24 text-lg\"><CollectionIcon /> Kurslar</Button>\n                    <Button onClick={() => navigate('/paths')} variant=\"secondary\" className=\"h-24 text-lg\"><PaperAirplaneIcon /> Tədris Yolları</Button>\n                </div>\n            </Card>\n        </div>\n    );\n};\n\nexport default DashboardPage;\n","import React from 'react';\n\nconst Card = ({ children, className = '' }) => (\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\n);\n\nexport default Card;"],"names":["_ref","experience","level","xpForNextLevel","progressPercentage","useMemo","xp","currentLevel","Math","floor","nextLevelXp","currentLevelXp","useGamification","_jsxs","children","className","_jsx","style","width","concat","profile","experience_points","dailyStreak","daily_streak","Card","LevelProgressBar","Link","to","StarIcon","FireIcon","useWeakTopics","quizResults","quizzes","length","userResults","filter","r","user_id","id","status","topicStats","Map","forEach","result","quiz","find","q","quizId","questions","questionOrder","q_ordered","originalQuestion","topics","category","push","tags","Array","isArray","correct","isAnswerCorrect","question","userAnswer","undefined","type","options","correctAnswers","correctOptions","map","i","sort","userOptions","JSON","stringify","trim","toLowerCase","correctAnswer","orderItems","userAnswers","topic","has","set","total","stats","get","size","from","entries","name","accuracy","round","totalQuestions","a","b","slice","encodeURIComponent","ChartBarIcon","activeAssignmentsCount","dueFlashcardsCount","navigate","useNavigate","weakTopics","first_name","username","ClipboardCheckIcon","DuplicateIcon","GamificationStats","WeakTopicsCard","Button","onClick","variant","BookOpenIcon","DocumentTextIcon","CollectionIcon","PaperAirplaneIcon"],"sourceRoot":""}