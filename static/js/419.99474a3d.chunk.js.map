{"version":3,"file":"static/js/419.99474a3d.chunk.js","mappings":"yIAEA,MAIA,EAJaA,IAAA,IAAC,SAAEC,EAAQ,UAAEC,EAAY,IAAIF,EAAA,OACtCG,EAAAA,EAAAA,KAAA,OAAKD,UAAS,iEAAAE,OAAmEF,GAAYD,SAAEA,I,sJCMnGI,EAAAA,GAAQC,SAASC,EAAAA,GAAYC,EAAAA,GAASC,EAAAA,GAAQC,EAAAA,GAAeC,EAAAA,GAAaC,EAAAA,GAAYC,EAAAA,IAGtF,MAAMC,EAAcC,IAChB,IAAKA,EAAY,MAAO,MACxB,MAAMC,EAAO,IAAIC,KAAKF,GACtB,OAAIG,MAAMF,GAAc,eACjBA,EAAKG,eAAe,UAqBzBC,EAAmBpB,IAA2C,IAA1C,OAAEqB,EAAM,QAAEC,EAAO,SAAEC,EAAQ,MAAEC,GAAOxB,EAC1D,OAAKqB,GAEDlB,EAAAA,EAAAA,KAACsB,EAAAA,EAAK,CAACJ,OAAQA,EAAQC,QAASA,EAASE,MAAOA,EAAMvB,UAClDE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,2BAA0BD,UACrCE,EAAAA,EAAAA,KAAA,MAAID,UAAU,2BAA0BD,SACnCsB,EAASG,IAAIC,IACVC,EAAAA,EAAAA,MAAA,MAAqB1B,UAAU,yCAAwCD,SAAA,EACnE2B,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,GAAE,YAAA1B,OAAcuB,EAAQI,SAAW7B,UAAU,gCAA+BD,SAAA,CAC7E0B,EAAQK,SAAS,IAAEL,EAAQM,gBAEhCL,EAAAA,EAAAA,MAAA,QAAM1B,UAAU,gBAAeD,SAAA,CAAE0B,EAAQO,WAAW,MAAIP,EAAQQ,UAAU,SAJrER,EAAQS,WANjB,MAmBlBC,EAAwBC,IAAsD,IAArD,OAAEjB,EAAM,QAAEC,EAAO,SAAEiB,EAAQ,QAAEC,EAAO,QAAEC,GAASH,EAC1E,MAAMI,GAAWC,EAAAA,EAAAA,SAAQ,KACrB,IAAKJ,EAAU,OAAO,KACtB,MAAMK,EAAOH,EAAQI,KAAKC,GAAKA,EAAEtB,QAAUe,EAASJ,WACpD,IAAKS,EAAM,OAAO,KAClB,MAAMG,EAAeH,EAAKI,UAAUH,KAAKC,GAAKA,EAAEG,OAASV,EAASU,MAClE,IAAKF,EAAc,OAAO,KAG1B,GAAI,CAAC,SAAU,YAAYG,SAASH,EAAaI,MAAO,CACpD,MAAMC,EAAeL,EAAaM,QAAQC,OAAO,CAACC,EAAKC,KAAMC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWF,GAAG,IAAE,CAACC,GAAS,IAAM,CAAC,GAC9F,IAAIE,EAAgB,EAEpBlB,EAAQmB,QAAQC,IACZ,GAAIA,EAAOC,SAAWjB,EAAKR,GAAI,OAC/B,MAAM0B,EAAaF,EAAOG,YAAYhB,EAAaX,IAC9C0B,GAAoC,IAAtBA,EAAWE,OAEG,aAAtBjB,EAAaI,KACpBW,EAAWH,QAAQM,SAAyCC,IAAzBd,EAAaa,IAAuBb,EAAaa,YAEnDC,IAA7Bd,EAAaU,IAA2BV,EAAaU,KAJzDJ,MAwBR,MAAO,CACHP,KAAM,QACNgB,UAlBc,CACdC,OAAQC,OAAOC,KAAKlB,GACpBmB,SAAU,CAAC,CACPC,MAAO,4BACPC,KAAMJ,OAAOK,OAAOtB,GACpBuB,gBAAiBN,OAAOC,KAAKlB,GAAc1B,IAAI8B,GACpBT,EAAa6B,eAAelD,IAAImD,GAAK9B,EAAaM,QAAQwB,IAC3D3B,SAASM,GAAU,0BAA4B,2BAEzEsB,YAAaT,OAAOC,KAAKlB,GAAc1B,IAAI8B,GACfT,EAAa6B,eAAelD,IAAImD,GAAK9B,EAAaM,QAAQwB,IAC5D3B,SAASM,GAAU,wBAA0B,yBAEvEuB,YAAa,KAMjBrB,gBACAsB,aAAcxC,EAAQyC,OAAOC,GAAKA,EAAErB,SAAWjB,EAAKR,IAAI4B,OAEhE,CAGA,GAAI,CAAC,YAAa,QAAQd,SAASH,EAAaI,MAAO,CACnD,MAAMC,EAAe,IAAI+B,IACzB,IAAIzB,EAAgB,EAEpBlB,EAAQmB,QAAQC,IACZ,GAAIA,EAAOC,SAAWjB,EAAKR,GAAI,OAC/B,MAAM0B,EAAaF,EAAOG,YAAYhB,EAAaX,IAEnD,GAAK0B,GAAoC,kBAAfA,GAAiD,KAAtBA,EAAWsB,OAEzD,CACH,MAAMC,EAAmBvB,EAAWsB,OAAOE,cAC3ClC,EAAamC,IAAIF,GAAmBjC,EAAaoC,IAAIH,IAAqB,GAAK,EACnF,MAJI3B,MAWR,MAAO,CACHP,KAAM,OACNsC,eANmBC,MAAMC,KAAKvC,EAAawC,WAC1ClE,IAAImE,IAAA,IAAE5B,EAAQ6B,GAAMD,EAAA,MAAM,CAAE5B,SAAQ6B,WACpCC,KAAK,CAACC,EAAGC,IAAMA,EAAEH,MAAQE,EAAEF,OAK5BpC,gBACAsB,aAAcxC,EAAQyC,OAAOC,GAAKA,EAAErB,SAAWjB,EAAKR,IAAI4B,OAEhE,CAEA,OAAO,MAER,CAACzB,EAAUC,EAASC,IAEvB,OAAKpB,GAAWqB,GAGZd,EAAAA,EAAAA,MAACH,EAAAA,EAAK,CAACJ,OAAQA,EAAQC,QAASA,EAASE,MAAK,sBAAApB,OAAmBmC,EAASU,MAAQiD,KAAK,KAAIjG,SAAA,CACpE,UAAlByC,EAASS,OACNvB,EAAAA,EAAAA,MAAAuE,EAAAA,SAAA,CAAAlG,SAAA,EACIE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,cAAaD,UAACE,EAAAA,EAAAA,KAACiG,EAAAA,GAAG,CAAC3B,KAAM/B,EAASyB,UAAWd,QAAS,CAAEgD,qBAAqB,EAAOC,UAAW,UAC9G1E,EAAAA,EAAAA,MAAA,KAAG1B,UAAU,yCAAwCD,SAAA,CAAC,YAAUyC,EAASsC,aAAa,4BAAWtC,EAASgB,cAAc,8CAG7G,SAAlBhB,EAASS,OACLvB,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,YAAWD,SAAA,EACvBE,EAAAA,EAAAA,KAAA,MAAID,UAAU,8BAA6BD,SAAC,wFAC5CE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,iEAAgED,SAC1EyC,EAAS+C,eAAezB,OAAS,GAC9B7D,EAAAA,EAAAA,KAAA,MAAID,UAAU,2BAA0BD,SACnCyC,EAAS+C,eAAe/D,IAAI6E,IAAA,IAAC,OAAEtC,EAAM,MAAE6B,GAAOS,EAAA,OAC3C3E,EAAAA,EAAAA,MAAA,MAAiB1B,UAAU,yCAAwCD,SAAA,EAC/DE,EAAAA,EAAAA,KAAA,QAAMD,UAAU,+BAA8BD,SAAEgE,KAChDrC,EAAAA,EAAAA,MAAA,QAAM1B,UAAU,yFAAwFD,SAAA,CAAE6F,EAAM,cAF3G7B,QAOjB9D,EAAAA,EAAAA,KAAA,KAAGD,UAAU,iCAAgCD,SAAC,kEAGtD2B,EAAAA,EAAAA,MAAA,KAAG1B,UAAU,yCAAwCD,SAAA,CAAC,YAAUyC,EAASsC,aAAa,4BAAWtC,EAASgB,cAAc,iDA3BvG,MAkC/B8C,EAAuBC,IAA0B,IAAzB,gBAAEC,GAAiBD,EAC7C,MAAOE,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,GAEzCC,EAAaC,KAAKC,KAAKN,EAAgB1C,OADxB,GAGfiD,EAAsBP,EAAgBQ,MAHvB,GAG8BP,EAAc,GAH5C,EAG+DA,GAEpF,OAA+B,IAA3BD,EAAgB1C,QACT7D,EAAAA,EAAAA,KAAA,KAAGD,UAAU,gBAAeD,SAAC,2FAIpC2B,EAAAA,EAAAA,MAAA,OAAA3B,SAAA,EACIE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,uDAAsDD,SAChEgH,EAAoBvF,IAAIyF,IAAA,IAAC,UAAEhF,EAAS,YAAEiF,GAAaD,EAAA,OAChDvF,EAAAA,EAAAA,MAAA,OAAqB1B,UAAU,mCAAkCD,SAAA,EAC7DE,EAAAA,EAAAA,KAAA,MAAID,UAAU,wDAAuDD,UACjEE,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACC,GAAE,eAAA1B,OAAiBgH,EAAY,GAAGvD,QAAU3D,UAAU,kBAAiBD,SAAEkC,OAEnFhC,EAAAA,EAAAA,KAAA,MAAID,UAAU,YAAWD,SACpBmH,EAAY1F,IAAI,CAACC,EAAS0F,KACvBzF,EAAAA,EAAAA,MAAA,MAAqB1B,UAAU,6EAA4ED,SAAA,EACvG2B,EAAAA,EAAAA,MAAA,QAAM1B,UAAU,0BAAyBD,SAAA,CAC1B,IAAVoH,GAAclH,EAAAA,EAAAA,KAACmH,EAAAA,GAAa,IAAgB,IAAVD,GAAclH,EAAAA,EAAAA,KAACoH,EAAAA,GAAe,IAAgB,IAAVF,GAAclH,EAAAA,EAAAA,KAACqH,EAAAA,GAAe,KAAMrH,EAAAA,EAAAA,KAACsH,EAAAA,GAAU,CAACvH,UAAU,mBACjI0B,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,GAAE,YAAA1B,OAAcuB,EAAQI,SAAW7B,UAAU,kBAAiBD,SAAA,CAAE0B,EAAQK,SAAS,IAAEL,EAAQM,mBAErGL,EAAAA,EAAAA,MAAA,QAAM1B,UAAU,0BAAyBD,SAAA,CAAE0B,EAAQ+F,MAAM,YALpD/F,EAAQS,SANnBD,OAkBjB2E,EAAa,IACVlF,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,8CAA6CD,SAAA,EACxDE,EAAAA,EAAAA,KAACwH,EAAAA,EAAM,CAACC,QAASA,IAAMhB,EAAeiB,GAAKd,KAAKe,IAAI,EAAGD,EAAI,IAAKE,SAA0B,IAAhBpB,EAAkB1G,SAAC,uBAC7F2B,EAAAA,EAAAA,MAAA,QAAM1B,UAAU,wBAAuBD,SAAA,CAAC,oBAAQ0G,EAAY,MAAIG,MAChE3G,EAAAA,EAAAA,KAACwH,EAAAA,EAAM,CAACC,QAASA,IAAMhB,EAAeiB,GAAKd,KAAKiB,IAAIlB,EAAYe,EAAI,IAAKE,SAAUpB,IAAgBG,EAAW7G,SAAC,2BAO7HgI,EAAoBC,IAAuF,IAAtF,UAAEC,EAAS,aAAEC,EAAY,gBAAEC,EAAe,kBAAEC,EAAiB,gBAAE5B,GAAiBwB,EACvG,MAAMK,GAAWC,EAAAA,EAAAA,UAQjB,OACI5G,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,YAAWD,SAAA,EACtB2B,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,wCAAuCD,SAAA,EAClD2B,EAAAA,EAAAA,MAAC6G,EAAAA,EAAI,CAACvI,UAAU,gBAAeD,SAAA,EAACE,EAAAA,EAAAA,KAAA,MAAID,UAAU,yBAAwBD,SAAC,wCAAuB2B,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,YAAWD,SAAA,EAAC2B,EAAAA,EAAAA,MAAA,KAAA3B,SAAA,EAAGE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,yBAA6B,IAAEkI,EAAUO,qBAAqB9G,EAAAA,EAAAA,MAAA,KAAA3B,SAAA,EAAGE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,0CAA0B,IAAEkI,EAAUQ,mBAAmB/G,EAAAA,EAAAA,MAAA,KAAA3B,SAAA,EAAGE,EAAAA,EAAAA,KAAA,UAAAF,SAAQ,2BAAqB,IAAEkI,EAAUS,aAAaC,QAAQ,GAAG,cAC1UjH,EAAAA,EAAAA,MAAC6G,EAAAA,EAAI,CAACvI,UAAU,gBAAeD,SAAA,EAC3BE,EAAAA,EAAAA,KAAA,MAAID,UAAU,yBAAwBD,SAAC,gDACvCE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,wCAAuCD,SACjDmI,IAAgBjI,EAAAA,EAAAA,KAAC2I,EAAAA,GAAG,CAACrE,KAAM2D,EAAc/E,QAAS,CAAE0F,YAAY,EAAM1C,qBAAqB,GAASuB,QAd/FoB,IACtB,MAAMC,GAAUC,EAAAA,EAAAA,IAAkBX,EAASY,QAASH,GAChDC,EAAQjF,OAAS,GACjBqE,EAAgBY,EAAQ,GAAG5B,QAWiH+B,IAAKb,aAIjJ3G,EAAAA,EAAAA,MAAC6G,EAAAA,EAAI,CAAAxI,SAAA,EACD2B,EAAAA,EAAAA,MAAA,MAAI1B,UAAU,iDAAgDD,SAAA,EAACE,EAAAA,EAAAA,KAACsH,EAAAA,GAAU,IAAG,qCAC7EtH,EAAAA,EAAAA,KAACqG,EAAoB,CAACE,gBAAiBA,QAE3C9E,EAAAA,EAAAA,MAAC6G,EAAAA,EAAI,CAAAxI,SAAA,EAACE,EAAAA,EAAAA,KAAA,MAAID,UAAU,yBAAwBD,SAAC,mCAAqBE,EAAAA,EAAAA,KAAA,MAAID,UAAU,wBAAuBD,SAAEkI,EAAUkB,sBAAsBrF,OAAS,EAAKmE,EAAUkB,sBAAsB3H,IAAI4H,IAAA,IAAErG,EAAMwB,GAAK6E,EAAA,OAAK1H,EAAAA,EAAAA,MAAA,MAAA3B,SAAA,EAAe2B,EAAAA,EAAAA,MAAA,UAAQgG,QAASA,IAAMU,EAAkB,CAAErF,OAAMd,UAAWsC,EAAKtC,YAAcjC,UAAU,kEAAiED,SAAA,EAACE,EAAAA,EAAAA,KAACoJ,EAAAA,GAAY,KAAGpJ,EAAAA,EAAAA,KAAA,UAAAF,SAASgD,OAAuB,KAAGwB,EAAKtC,UAAU,QAAIP,EAAAA,EAAAA,MAAA,QAAM1B,UAAU,eAAcD,SAAA,CAAEwE,EAAKqB,MAAM,kBAAlR7C,MAAyS9C,EAAAA,EAAAA,KAAA,KAAGD,UAAU,gBAAeD,SAAC,kDAKliBuJ,EAAeC,IAAiE,IAAhE,QAAEjH,EAAO,eAAEkH,EAAc,OAAEC,EAAM,OAAEC,EAAM,cAAEC,GAAeJ,EAC5E,MAAO9C,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,GAGzCiD,GAAmBnH,EAAAA,EAAAA,SAAQ,KAC7B,MAAMoH,EAHa,IAGCpD,EAAc,GAClC,OAAOnE,EAAQ0E,MAAM6C,EAAYA,EAJd,KAKpB,CAACvH,EAASmE,IAEPG,EAAaC,KAAKC,KAAKxE,EAAQwB,OAPd,IASjBgG,EAAoBC,GAAYL,IAAWK,EAA4B,QAAlBJ,EAA0B,UAAO,UAAQ,GAEpG,OACIjI,EAAAA,EAAAA,MAAC6G,EAAAA,EAAI,CAAAxI,SAAA,EACDE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,kBAAiBD,UAC5B2B,EAAAA,EAAAA,MAAA,SAAO1B,UAAU,sCAAqCD,SAAA,EAClDE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,aAAYD,UAAC2B,EAAAA,EAAAA,MAAA,MAAA3B,SAAA,EAAI2B,EAAAA,EAAAA,MAAA,MAAIsI,MAAM,MAAMhK,UAAU,gGAAgG0H,QAASA,IAAM+B,EAAO,QAAQ1J,SAAA,CAAC,SAAO+J,EAAiB,YAAapI,EAAAA,EAAAA,MAAA,MAAIsI,MAAM,MAAMhK,UAAU,gGAAgG0H,QAASA,IAAM+B,EAAO,QAAQ1J,SAAA,CAAC,YAAU+J,EAAiB,YAAapI,EAAAA,EAAAA,MAAA,MAAIsI,MAAM,MAAMhK,UAAU,gGAAgG0H,QAASA,IAAM+B,EAAO,aAAa1J,SAAA,CAAC,QAAM+J,EAAiB,iBAAkBpI,EAAAA,EAAAA,MAAA,MAAIsI,MAAM,MAAMhK,UAAU,gGAAgG0H,QAASA,IAAM+B,EAAO,SAAS1J,SAAA,CAAC,oBAAQ+J,EAAiB,aAAc7J,EAAAA,EAAAA,KAAA,MAAI+J,MAAM,MAAMhK,UAAU,iFAAgFD,SAAC,YAAWE,EAAAA,EAAAA,KAAA,MAAI+J,MAAM,MAAMhK,UAAU,iFAAgFD,SAAC,8BAC1gCE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,oCAAmCD,SAC/C6J,EAAiBpI,IAAKkC,IACnBhC,EAAAA,EAAAA,MAAA,MAAoB1B,UAAU,mBAAkBD,SAAA,EAC5CE,EAAAA,EAAAA,KAAA,MAAID,UAAU,oDAAmDD,SAAEa,EAAW8C,EAAOuG,eACrFhK,EAAAA,EAAAA,KAAA,MAAID,UAAU,gEAA+DD,UAAC2B,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,GAAE,YAAA1B,OAAcwD,EAAO7B,SAAW7B,UAAU,gCAA+BD,SAAA,CAAE2D,EAAO5B,SAAS,IAAE4B,EAAO3B,kBAC1L9B,EAAAA,EAAAA,KAAA,MAAID,UAAU,oDAAmDD,UAACE,EAAAA,EAAAA,KAAC0B,EAAAA,GAAI,CAACC,GAAE,eAAA1B,OAAiBwD,EAAOC,QAAU3D,UAAU,gCAA+BD,SAAE2D,EAAOzB,eAC9JhC,EAAAA,EAAAA,KAAA,MAAID,UAAU,oDAAmDD,UAAC2B,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,gBAAeD,SAAA,EAAC2B,EAAAA,EAAAA,MAAA,QAAM1B,UAAU,YAAWD,SAAA,CAAE2D,EAAO8D,MAAM,MAAI9D,EAAOwG,YAAY,WAAWxI,EAAAA,EAAAA,MAAA,QAAM1B,UAAU,wBAAuBD,SAAA,CAAE2D,EAAO1B,WAAW,aACxO/B,EAAAA,EAAAA,KAAA,MAAID,UAAU,sCAAqCD,UAAC2B,EAAAA,EAAAA,MAAA,QAAM1B,UAAS,2EAAAE,OAA+F,mBAAlBwD,EAAOyG,OAA8B,gCAAkC,+BAAgCpK,SAAA,CAAoB,mBAAlB2D,EAAOyG,QAA8BlK,EAAAA,EAAAA,KAACmK,EAAAA,GAAS,CAACpK,UAAU,oBAAsBC,EAAAA,EAAAA,KAACoK,EAAAA,GAAS,CAACrK,UAAU,mBAAoB,IAAoB,mBAAlB0D,EAAOyG,OAA8B,uBAAe,wBACxalK,EAAAA,EAAAA,KAAA,MAAID,UAAU,kDAAiDD,UAAC2B,EAAAA,EAAAA,MAAC+F,EAAAA,EAAM,CAACC,QAASA,IAAM8B,EAAe9F,GAAS4G,QAA2B,mBAAlB5G,EAAOyG,OAA8B,UAAY,YAAanE,KAAK,KAAIjG,SAAA,CAAoB,mBAAlB2D,EAAOyG,QAA8BlK,EAAAA,EAAAA,KAACsK,EAAAA,GAAkB,CAACvK,UAAU,aAAeC,EAAAA,EAAAA,KAACuK,EAAAA,GAAO,CAACxK,UAAU,aAAaC,EAAAA,EAAAA,KAAA,QAAMD,UAAU,OAAMD,SAAoB,mBAAlB2D,EAAOyG,OAA8B,QAAU,eANrXzG,EAAOxB,YAY/B0E,EAAa,IACVlF,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,yCAAwCD,SAAA,EACnDE,EAAAA,EAAAA,KAACwH,EAAAA,EAAM,CAACC,QAASA,IAAMhB,EAAeiB,GAAKd,KAAKe,IAAI,EAAGD,EAAI,IAAKE,SAA0B,IAAhBpB,EAAkB1G,SAAC,uBAC7F2B,EAAAA,EAAAA,MAAA,QAAM1B,UAAU,wBAAuBD,SAAA,CAAC,oBAAQ0G,EAAY,MAAIG,MAChE3G,EAAAA,EAAAA,KAACwH,EAAAA,EAAM,CAACC,QAASA,IAAMhB,EAAeiB,GAAKd,KAAKiB,IAAIlB,EAAYe,EAAI,IAAKE,SAAUpB,IAAgBG,EAAW7G,SAAC,2BAkPnI,EA1OuB0K,IAAuE,IAAtE,QAAEnI,EAAO,OAAEoI,EAAM,QAAEnI,EAAO,eAAEiH,EAAc,cAAEmB,EAAgB,IAAIF,EACpF,MAAOG,EAAWC,IAAgBlE,EAAAA,EAAAA,UAAS,aACpCmE,EAAYC,IAAiBpE,EAAAA,EAAAA,UAAS,KACtCqE,EAAoBC,IAAyBtE,EAAAA,EAAAA,UAAS,QACtDuE,EAAqBC,IAA0BxE,EAAAA,EAAAA,UAAS,QACxDyE,EAAWC,IAAgB1E,EAAAA,EAAAA,UAAS,CAAE2E,MAAO,GAAIC,IAAK,MACtD7B,EAAQ8B,IAAa7E,EAAAA,EAAAA,UAAS,SAC9BgD,EAAe8B,IAAoB9E,EAAAA,EAAAA,UAAS,SAC5C+E,EAAmBC,IAAwBhF,EAAAA,EAAAA,UAAS,OACpDiF,EAAkBC,IAAuBlF,EAAAA,EAAAA,UAAS,CAAExF,QAAQ,EAAOE,SAAU,GAAIC,MAAO,KAEzFwK,GAAkBrJ,EAAAA,EAAAA,SAAQ,KAC5B,IAAIsJ,EAAWzJ,EAEf,GAA4B,QAAxB4I,EAA+B,CAC/B,MAAMc,EAAgBrB,EAAchI,KAAKsJ,GAAKA,EAAE/J,KAAOgK,OAAOhB,IAC9D,GAAIc,EAAe,CACf,MAAMG,EAAY,IAAIC,KAAKJ,EAAcK,SAAW,IAAI7K,IAAI8K,GAAKA,EAAEzK,UACnEkK,EAAWA,EAAShH,OAAOC,GAAKmH,EAAUI,IAAIvH,EAAEnD,SACpD,CACJ,CAEA,GAAIiJ,EAAY,CACZ,MAAM0B,EAAsB1B,EAAW1F,cACvC2G,EAAWA,EAAShH,OAAOC,GAAK,GAAA9E,OAAG8E,EAAElD,SAAQ,KAAA5B,OAAI8E,EAAEjD,aAAcqD,cAAcpC,SAASwJ,IAAwBxH,EAAE/C,UAAUmD,cAAcpC,SAASwJ,GACvJ,CAUA,MAT2B,QAAvBxB,IACAe,EAAWA,EAAShH,OAAOC,GAAKA,EAAE/C,YAAc+I,IAEhDI,EAAUE,QACVS,EAAWA,EAAShH,OAAOC,GAAK,IAAIjE,KAAKiE,EAAEiF,aAAe,IAAIlJ,KAAKqK,EAAUE,SAE7EF,EAAUG,MACVQ,EAAWA,EAAShH,OAAOC,GAAK,IAAIjE,KAAKiE,EAAEiF,aAAe,IAAIlJ,KAAKqK,EAAUG,KAAKkB,SAAS,GAAI,GAAI,GAAI,OAEpGV,GACR,CAACzJ,EAASwI,EAAYE,EAAoBI,EAAWF,EAAqBP,IAEvE+B,GAAiBjK,EAAAA,EAAAA,SAAQ,IAAMqJ,EAAgB/G,OAAOC,GAAkB,mBAAbA,EAAEmF,QAA8B,CAAC2B,IAC5Fa,GAAmBlK,EAAAA,EAAAA,SAAQ,IAAMqJ,EAAgB/G,OAAOC,GAAkB,mBAAbA,EAAEmF,QAA8B,CAAC2B,IAE9Fc,GAAuBnK,EAAAA,EAAAA,SAAQ,IAC1B,IAAIiK,GAAgB7G,KAAK,CAACC,EAAGC,IAAM,IAAIhF,KAAKgF,EAAEkE,YAAc,IAAIlJ,KAAK+E,EAAEmE,aAC/E,CAACyC,IAEEG,GAAyBpK,EAAAA,EAAAA,SAAQ,IAC5B,IAAIkK,GAAkB9G,KAAK,CAACC,EAAGC,KAClC,IAAI+G,EAAe,EAKnB,MAJe,SAAXpD,EAAmBoD,EAAe,IAAI/L,KAAKgF,EAAEkE,YAAY8C,UAAY,IAAIhM,KAAK+E,EAAEmE,YAAY8C,UAC5E,SAAXrD,EAAmBoD,EAAe,GAAA5M,OAAG4F,EAAEhE,SAAQ,KAAA5B,OAAI4F,EAAE/D,aAAciL,cAAc,GAAD9M,OAAI6F,EAAEjE,SAAQ,KAAA5B,OAAI6F,EAAEhE,cACzF,cAAX2H,EAAwBoD,EAAehH,EAAE7D,UAAU+K,cAAcjH,EAAE9D,WACxD,UAAXyH,IAAoBoD,EAAe/G,EAAEyB,MAAQ1B,EAAE0B,OAC/B,QAAlBmC,EAA0BmD,GAAgBA,IAEtD,CAACH,EAAkBjD,EAAQC,IAExB1B,GAAYxF,EAAAA,EAAAA,SAAQ,KACtB,MAAM8B,EAAOoI,EACb,GAAoB,IAAhBpI,EAAKT,OAAc,OAAO,KAC9B,MAAM0E,EAAmBjE,EAAKT,OACxB2E,EAAiB,IAAI2D,IAAI7H,EAAK/C,IAAIwD,GAAC,GAAA9E,OAAO8E,EAAElD,SAAQ,KAAA5B,OAAI8E,EAAEjD,eAAgBiE,KAC1E0C,EAAenE,EAAKnB,OAAO,CAACC,EAAK2B,IAAM3B,EAAM2B,EAAEhD,WAAY,GAAKwG,EAChEyE,EAAoB,CACtBC,QAAS3I,EAAKQ,OAAOC,GAAKA,EAAEhD,YAAc,IAAI8B,OAC9CqJ,KAAM5I,EAAKQ,OAAOC,GAAKA,EAAEhD,YAAc,IAAMgD,EAAEhD,WAAa,IAAI8B,OAChEsJ,OAAQ7I,EAAKQ,OAAOC,GAAKA,EAAEhD,YAAc,IAAMgD,EAAEhD,WAAa,IAAI8B,OAClEuJ,IAAK9I,EAAKQ,OAAOC,GAAKA,EAAEhD,WAAa,IAAI8B,QAEvCwJ,EAAqB,CAAC,EAC5B/I,EAAKd,QAAQC,IACT,MAAMhB,EAAOH,EAAQI,KAAKC,GAAKA,EAAEV,KAAOwB,EAAOC,QAC1CjB,GACLgB,EAAO6J,cAAc9J,QAAQb,IACzB,MAAM4K,EAAmB9K,EAAKI,UAAUH,KAAK8K,GAAMA,EAAGvL,KAAOU,EAAEV,IAC3DsL,IAzVIE,EAACrL,EAAUuB,KAC/B,QAAmBI,IAAfJ,GAA2C,OAAfA,EAAqB,OAAO,EAC5D,IAAKvB,IAAaA,EAASY,KAAM,OAAO,EAExC,OAAQZ,EAASY,MACb,IAAK,SAAU,OAAOW,IAAevB,EAASc,QAAQd,EAASqC,eAAe,IAC9E,IAAK,WACD,MAAMiJ,EAAiBtL,EAASqC,eAAelD,IAAImD,GAAKtC,EAASc,QAAQwB,IAAIkB,OACvE+H,EAAcpI,MAAMqI,QAAQjK,GAAc,IAAIA,GAAYiC,OAAS,GACzE,OAAOiI,KAAKC,UAAUJ,KAAoBG,KAAKC,UAAUH,GAC7D,IAAK,YAAa,OAAOhK,EAAWsB,OAAOE,gBAAkB/C,EAASqC,eAAe,GAAGQ,OAAOE,cAC/F,IAAK,YAAa,OAAOxB,IAAevB,EAAS2L,cACjD,IAAK,WAAY,OAAOF,KAAKC,UAAUnK,KAAgBkK,KAAKC,UAAU1L,EAAS4L,YAC/E,QAAS,OAAO,IA4UiBP,CAAgBF,EAAkB9J,EAAOG,YAAY2J,EAAiBtL,OACtFoL,EAAmBE,EAAiBzK,QAAOuK,EAAmBE,EAAiBzK,MAAQ,CAAE6C,MAAO,EAAG3D,UAAWS,EAAKpB,QACxHgM,EAAmBE,EAAiBzK,MAAM6C,aAKtD,MAAO,CAAE4C,mBAAkBC,iBAAgBC,eAAcuE,oBAAmB9D,sBAD9ChF,OAAOuB,QAAQ4H,GAAoBzH,KAAK,CAAAqI,EAAAC,KAAA,IAAE,CAAErI,GAAEoI,GAAG,CAAEnI,GAAEoI,EAAA,OAAKpI,EAAEH,MAAQE,EAAEF,QAAOoB,MAAM,EAAG,KAErH,CAAC2F,EAAkBpK,IAEhBiE,GAAkB/D,EAAAA,EAAAA,SAAQ,KAC5B,MACM2L,GAD+B,QAAvBpD,EAA+B1I,EAAQyC,OAAOC,GAAkB,mBAAbA,EAAEmF,QAA+BwC,GACtEvJ,OAAO,CAACC,EAAKK,KACrCL,EAAIK,EAAOzB,WAAaoB,EAAIK,EAAOzB,YAAc,GACjDoB,EAAIK,EAAOzB,WAAWoM,KAAK3K,GACpBL,GACR,CAAC,GACJ,OAAOc,OAAOuB,QAAQ0I,GAAe5M,IAAI8M,IAA+B,IAA7BrM,EAAWsM,GAAYD,EAC9D,MAAME,EAAa,CAAC,EACpBD,EAAY9K,QAAQC,IAChB,MAAM+K,EAAiB,GAAAvO,OAAMwD,EAAO5B,SAAQ,KAAA5B,OAAIwD,EAAO3B,eAClDyM,EAAWC,IAAsB/K,EAAO8D,MAAQgH,EAAWC,GAAmBjH,SAC/EgH,EAAWC,GAAqB/K,KAIxC,MAAO,CAAEzB,YAAWiF,YADA/C,OAAOK,OAAOgK,GAAY3I,KAAK,CAACC,EAAGC,IAAMA,EAAEyB,MAAQ1B,EAAE0B,OAAS,IAAIzG,KAAK+E,EAAEmE,YAAc,IAAIlJ,KAAKgF,EAAEkE,aAAajD,MAAM,EAAG,MAE7IjC,OAAO2J,GAAQA,EAAKxH,YAAYpD,OAAS,IAC7C,CAAC6I,EAAkBrK,EAAS0I,IAEzB9C,GAAezF,EAAAA,EAAAA,SAAQ,IACpBwF,EACE,CACH/D,OAAQ,CAAC,qBAAD,gEACRG,SAAU,CAAC,CACPE,KAAM,CAAC0D,EAAUgF,kBAAkBC,QAASjF,EAAUgF,kBAAkBE,KAAMlF,EAAUgF,kBAAkBG,OAAQnF,EAAUgF,kBAAkBI,KAC9I5I,gBAAiB,CAAC,UAAW,UAAW,UAAW,WACnDG,YAAa,CAAC,WACdC,YAAa,KAPE,KAUxB,CAACoD,IAEE0G,EAAuBxH,IACzB,MAAM5C,EAAOoI,EACb,IAAItL,EAAW,GACXC,EAAQ,GACZ,OAAQ6F,GACJ,KAAK,EAAG7F,EAAQ,gFAAiCD,EAAWkD,EAAKQ,OAAOC,GAAKA,EAAEhD,YAAc,IAAK,MAClG,KAAK,EAAGV,EAAQ,uFAAmCD,EAAWkD,EAAKQ,OAAOC,GAAKA,EAAEhD,YAAc,IAAMgD,EAAEhD,WAAa,IAAK,MACzH,KAAK,EAAGV,EAAQ,4EAAkCD,EAAWkD,EAAKQ,OAAOC,GAAKA,EAAEhD,YAAc,IAAMgD,EAAEhD,WAAa,IAAK,MACxH,KAAK,EAAGV,EAAQ,kFAAwCD,EAAWkD,EAAKQ,OAAOC,GAAKA,EAAEhD,WAAa,IAAK,MACxG,QAAS,OAEb6J,EAAoB,CAAE1K,QAAQ,EAAME,WAAUC,WAG5CsN,GAAmBnM,EAAAA,EAAAA,SAAQ,IAAM,CAAC,SAAU+C,MAAMC,KAAK,IAAI2G,IAAI9J,EAAQd,IAAIwD,GAAKA,EAAE/C,aAAa4D,QAAS,CAACvD,IAEzGuM,EAAc9E,IACZL,IAAWK,EAAQ0B,EAAiBqD,GAAiB,QAATA,EAAiB,OAAS,QACnEtD,EAAUzB,GAAS0B,EAAiB,UAgC/C,OACIxL,EAAAA,EAAAA,KAAA,OAAKD,UAAU,kBAAiBD,UAC5B2B,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,wCAAuCD,SAAA,EAGlD2B,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,8CAA6CD,SAAA,EACxD2B,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,sBAAqBD,SAAA,EAChCE,EAAAA,EAAAA,KAAA,MAAID,UAAU,+CAA8CD,SAAC,gBAC7D2B,EAAAA,EAAAA,MAAC+F,EAAAA,EAAM,CAACC,QAASgD,EAAQJ,QAAQ,YAAYtK,UAAU,wBAAuBD,SAAA,EAACE,EAAAA,EAAAA,KAAC8O,EAAAA,GAAa,IAAG,eAEpGrN,EAAAA,EAAAA,MAAC6G,EAAAA,EAAI,CAAAxI,SAAA,EACDE,EAAAA,EAAAA,KAAA,MAAID,UAAU,+BAA8BD,SAAC,mBAC7C2B,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,YAAWD,SAAA,EACtB2B,EAAAA,EAAAA,MAAA,OAAA3B,SAAA,EACIE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,+CAA8CD,SAAC,wCAChEE,EAAAA,EAAAA,KAAA,SAAOgD,KAAK,OAAO+L,YAAY,iCAAkBC,MAAOnE,EAAYoE,SAAUC,GAAKpE,EAAcoE,EAAEC,OAAOH,OAAQjP,UAAU,mGAEhI0B,EAAAA,EAAAA,MAAA,OAAA3B,SAAA,EACIE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,+CAA8CD,SAAC,8BAChE2B,EAAAA,EAAAA,MAAA,UAAQuN,MAAO/D,EAAqBgE,SAAUC,GAAKhE,EAAuBgE,EAAEC,OAAOH,OAAQjP,UAAU,sGAAqGD,SAAA,EACtME,EAAAA,EAAAA,KAAA,UAAQgP,MAAM,MAAKlP,SAAC,8CACnB4K,EAAcnJ,IAAI6N,IAASpP,EAAAA,EAAAA,KAAA,UAAuBgP,MAAOI,EAAMnN,GAAGnC,SAAEsP,EAAMC,MAAlCD,EAAMnN,YAGvDR,EAAAA,EAAAA,MAAA,OAAA3B,SAAA,EACIE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,+CAA8CD,SAAC,mCAChEE,EAAAA,EAAAA,KAAA,UAAQgP,MAAOjE,EAAoBkE,SAAUC,GAAKlE,EAAsBkE,EAAEC,OAAOH,OAAQjP,UAAU,sGAAqGD,SACnM6O,EAAiBpN,IAAIF,IAASrB,EAAAA,EAAAA,KAAA,UAAoBgP,MAAO3N,EAAMvB,SAAY,QAAVuB,EAAkB,2BAAkBA,GAA1DA,UAGpDI,EAAAA,EAAAA,MAAA,OAAA3B,SAAA,EACIE,EAAAA,EAAAA,KAAA,SAAOD,UAAU,+CAA8CD,SAAC,kCAChE2B,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,yBAAwBD,SAAA,EACnCE,EAAAA,EAAAA,KAAA,SAAOgD,KAAK,OAAOgM,MAAO7D,EAAUE,MAAO4D,SAAUC,GAAK9D,EAAayD,IAAIvL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAASuL,GAAI,IAAExD,MAAO6D,EAAEC,OAAOH,SAAUjP,UAAU,yFAC9HC,EAAAA,EAAAA,KAAA,SAAOgD,KAAK,OAAOgM,MAAO7D,EAAUG,IAAK2D,SAAUC,GAAK9D,EAAayD,IAAIvL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAASuL,GAAI,IAAEvD,IAAK4D,EAAEC,OAAOH,SAAUjP,UAAU,kGAItIC,EAAAA,EAAAA,KAAA,OAAKD,UAAU,qBAAoBD,UAC/B2B,EAAAA,EAAAA,MAAC+F,EAAAA,EAAM,CAACC,QApER6H,KACpB,MAAMC,EAA6B,YAAd5E,EAA0BgC,EAAuBC,EAEhE4C,EAAU,CADA,CAAC,KAAM,QAAS,gBAAY,eAAgB,eAAgB,OAAQ,SAAU,SACrEC,KAAK,MAC9BF,EAAa/L,QAAQC,IACjB,MAAMiM,EAAM,CAAC,IAADzP,OAAKwD,EAAO5B,SAAQ,SAAA5B,OAASwD,EAAO3B,YAAW,SAAA7B,OAASwD,EAAOzB,UAAS,KAAKyB,EAAO8D,MAAO9D,EAAOwG,YAAaxG,EAAO1B,WAAY0B,EAAOyG,OAAQvJ,EAAW8C,EAAOuG,aAC/KwF,EAAQpB,KAAKsB,EAAID,KAAK,QAE1B,MAAME,EAAYH,EAAQC,KAAK,MACzBG,EAAO,IAAIC,KAAK,CAAC,SAAWF,GAAY,CAAE3M,KAAM,4BAChD8M,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOC,IAAIC,gBAAgBP,GAChCE,EAAKM,SAAQ,cAAAnQ,OAAiB0K,EAAS,KAAA1K,QAAI,IAAIa,MAAOuP,mBAAmB,SAAQ,QACjFP,EAAKQ,SAuDiDjG,QAAQ,YAAYtK,UAAU,wBAAwB6H,SAAqC,IAA3BiE,EAAgBhI,OAAa/D,SAAA,EAACE,EAAAA,EAAAA,KAACuQ,EAAAA,GAAY,IAAG,4BAM5J9O,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,0BAAyBD,SAAA,EACpCE,EAAAA,EAAAA,KAACiB,EAAgB,CAACC,OAAQyK,EAAiBzK,OAAQC,QAASA,IAAMyK,EAAoB,CAAE1K,QAAQ,EAAOE,SAAU,GAAIC,MAAO,KAAOD,SAAUuK,EAAiBvK,SAAUC,MAAOsK,EAAiBtK,SAChMrB,EAAAA,EAAAA,KAACkC,EAAqB,CAAChB,SAAUuK,EAAmBtK,QAASA,IAAMuK,EAAqB,MAAOtJ,SAAUqJ,EAAmBpJ,QAASA,EAASC,QAASA,KAEvJb,EAAAA,EAAAA,MAAA,OAAA3B,SAAA,EACIE,EAAAA,EAAAA,KAAA,OAAKD,UAAU,2BAA0BD,UACrC2B,EAAAA,EAAAA,MAAA,OAAK1B,UAAU,wBAAwB,aAAW,OAAMD,SAAA,EACpDE,EAAAA,EAAAA,KAAA,UAAQyH,QAASA,IAAMmD,EAAa,YAAa7K,UAAS,GAAAE,OAAmB,aAAd0K,EAA2B,oCAAsC,6EAA4E,+DAA8D7K,SAAC,8BAC3Q2B,EAAAA,EAAAA,MAAA,UAAQgG,QAASA,IAAMmD,EAAa,WAAY7K,UAAS,GAAAE,OAAmB,YAAd0K,EAA0B,oCAAsC,6EAA4E,+DAA8D7K,SAAA,CAAC,qCAAsB2M,EAAe5I,OAAO,QACrTpC,EAAAA,EAAAA,MAAA,UAAQgG,QAASA,IAAMmD,EAAa,aAAc7K,UAAS,GAAAE,OAAmB,cAAd0K,EAA4B,oCAAsC,6EAA4E,+DAA8D7K,SAAA,CAAC,mDAAwB4M,EAAiB7I,OAAO,aAGrU7D,EAAAA,EAAAA,KAAA,OAAKD,UAAU,OAAMD,SAtEnB0Q,MAClB,OAAQ7F,GACJ,IAAK,WACD,OAAO3C,GAAYhI,EAAAA,EAAAA,KAAC8H,EAAiB,CAACE,UAAWA,EAAWC,aAAcA,EAAc1B,gBAAiBA,EAAiB4B,kBAAmBuD,EAAsBxD,gBAAiBwG,KAA0B1O,EAAAA,EAAAA,KAACsI,EAAAA,EAAI,CAAAxI,UAACE,EAAAA,EAAAA,KAAA,KAAGD,UAAU,4BAA2BD,SAAC,wEACjQ,IAAK,UACD,OAAOE,EAAAA,EAAAA,KAACqJ,EAAY,CAAChH,QAASsK,EAAsBpD,eAAgBA,EAAgBC,OAAQoF,EAAYnF,OAAQA,EAAQC,cAAeA,IAC3I,IAAK,YACD,OAAO1J,EAAAA,EAAAA,KAACqJ,EAAY,CAAChH,QAASuK,EAAwBrD,eAAgBA,EAAgBC,OAAQoF,EAAYnF,OAAQA,EAAQC,cAAeA,IAC7I,QACI,OAAO,OA8DM8G,gB","sources":["components/ui/Card.js","pages/StatisticsPage.js"],"sourcesContent":["import React from 'react';\n\nconst Card = ({ children, className = '' }) => (\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\n);\n\nexport default Card;","import React, { useState, useMemo, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport Modal from '../components/ui/Modal';\nimport { ArrowLeftIcon, DownloadIcon, TrophyIcon, GoldMedalIcon, SilverMedalIcon, BronzeMedalIcon, ClockIcon, CheckCircleIcon as CheckIcon, EyeIcon, ClipboardCheckIcon, ChartBarIcon} from '../assets/icons.js';\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement, Title } from 'chart.js';\nimport { Pie, Bar, getElementAtEvent } from 'react-chartjs-2';\n\nChartJS.register(ArcElement, Tooltip, Legend, CategoryScale, LinearScale, BarElement, Title);\n\n// --- Helper Functions ---\nconst formatDate = (dateString) => {\n    if (!dateString) return 'N/A';\n    const date = new Date(dateString);\n    if (isNaN(date)) return 'Invalid Date';\n    return date.toLocaleString('az-AZ');\n};\n\nconst isAnswerCorrect = (question, userAnswer) => {\n    if (userAnswer === undefined || userAnswer === null) return false;\n    if (!question || !question.type) return false;\n\n    switch (question.type) {\n        case 'single': return userAnswer === question.options[question.correctAnswers[0]];\n        case 'multiple':\n            const correctOptions = question.correctAnswers.map(i => question.options[i]).sort();\n            const userOptions = Array.isArray(userAnswer) ? [...userAnswer].sort() : [];\n            return JSON.stringify(correctOptions) === JSON.stringify(userOptions);\n        case 'textInput': return userAnswer.trim().toLowerCase() === question.correctAnswers[0].trim().toLowerCase();\n        case 'trueFalse': return userAnswer === question.correctAnswer;\n        case 'ordering': return JSON.stringify(userAnswer) === JSON.stringify(question.orderItems);\n        default: return false;\n    }\n};\n\n// --- Sub-components ---\nconst StudentListModal = ({ isOpen, onClose, students, title }) => {\n    if (!isOpen) return null;\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} title={title}>\n            <div className=\"max-h-96 overflow-y-auto\">\n                <ul className=\"divide-y divide-gray-200\">\n                    {students.map(student => (\n                        <li key={student.id} className=\"py-3 flex justify-between items-center\">\n                            <Link to={`/student/${student.user_id}`} className=\"text-blue-600 hover:underline\">\n                                {student.userName} {student.userSurname}\n                            </Link>\n                            <span className=\"text-gray-600\">{student.percentage}% ({student.quizTitle})</span>\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </Modal>\n    );\n};\n\nconst QuestionAnalysisModal = ({ isOpen, onClose, question, results, quizzes }) => {\n    const analysis = useMemo(() => {\n        if (!question) return null;\n        const quiz = quizzes.find(q => q.title === question.quizTitle);\n        if (!quiz) return null;\n        const fullQuestion = quiz.questions.find(q => q.text === question.text);\n        if (!fullQuestion) return null;\n\n        // --- Logic for Chart-based questions (single, multiple) ---\n        if (['single', 'multiple'].includes(fullQuestion.type)) {\n            const answerCounts = fullQuestion.options.reduce((acc, option) => ({ ...acc, [option]: 0 }), {});\n            let noAnswerCount = 0;\n\n            results.forEach(result => {\n                if (result.quizId !== quiz.id) return;\n                const userAnswer = result.userAnswers[fullQuestion.id];\n                if (!userAnswer || userAnswer.length === 0) {\n                    noAnswerCount++;\n                } else if (fullQuestion.type === 'multiple') {\n                    userAnswer.forEach(answer => { if (answerCounts[answer] !== undefined) answerCounts[answer]++; });\n                } else {\n                    if (answerCounts[userAnswer] !== undefined) answerCounts[userAnswer]++;\n                }\n            });\n\n            const chartData = {\n                labels: Object.keys(answerCounts),\n                datasets: [{\n                    label: 'Cavabların sayı',\n                    data: Object.values(answerCounts),\n                    backgroundColor: Object.keys(answerCounts).map(option => {\n                        const correctOptions = fullQuestion.correctAnswers.map(i => fullQuestion.options[i]);\n                        return correctOptions.includes(option) ? 'rgba(75, 192, 192, 0.6)' : 'rgba(255, 99, 132, 0.6)';\n                    }),\n                    borderColor: Object.keys(answerCounts).map(option => {\n                         const correctOptions = fullQuestion.correctAnswers.map(i => fullQuestion.options[i]);\n                        return correctOptions.includes(option) ? 'rgba(75, 192, 192, 1)' : 'rgba(255, 99, 132, 1)';\n                    }),\n                    borderWidth: 1,\n                },],\n            };\n            return {\n                type: 'chart',\n                chartData,\n                noAnswerCount,\n                totalAnswers: results.filter(r => r.quizId === quiz.id).length\n            };\n        }\n\n        // --- Logic for Text-based questions (textInput, open) ---\n        if (['textInput', 'open'].includes(fullQuestion.type)) {\n            const answerCounts = new Map();\n            let noAnswerCount = 0;\n\n            results.forEach(result => {\n                if (result.quizId !== quiz.id) return;\n                const userAnswer = result.userAnswers[fullQuestion.id];\n\n                if (!userAnswer || typeof userAnswer !== 'string' || userAnswer.trim() === '') {\n                    noAnswerCount++;\n                } else {\n                    const normalizedAnswer = userAnswer.trim().toLowerCase();\n                    answerCounts.set(normalizedAnswer, (answerCounts.get(normalizedAnswer) || 0) + 1);\n                }\n            });\n\n            const groupedAnswers = Array.from(answerCounts.entries())\n                .map(([answer, count]) => ({ answer, count }))\n                .sort((a, b) => b.count - a.count);\n\n            return {\n                type: 'list',\n                groupedAnswers,\n                noAnswerCount,\n                totalAnswers: results.filter(r => r.quizId === quiz.id).length\n            };\n        }\n\n        return null; // For other question types if any\n\n    }, [question, results, quizzes]);\n\n    if (!isOpen || !analysis) return null;\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} title={`Sual Təhlili: ${question.text}`} size=\"lg\">\n            {analysis.type === 'chart' && (\n                <>\n                    <div className=\"w-full h-80\"><Bar data={analysis.chartData} options={{ maintainAspectRatio: false, indexAxis: 'y' }} /></div>\n                    <p className=\"text-center text-sm text-gray-600 mt-4\">Bu suala {analysis.totalAnswers} nəfərdən {analysis.noAnswerCount} nəfər cavab verməyib.</p>\n                </>\n            )}\n            {analysis.type === 'list' && (\n                 <div className=\"space-y-3\">\n                    <h4 className=\"font-semibold text-gray-800\">Tələbə Cavablarının Qruplaşdırılması:</h4>\n                    <div className=\"max-h-80 overflow-y-auto pr-2 border rounded-lg p-3 bg-gray-50\">\n                        {analysis.groupedAnswers.length > 0 ? (\n                            <ul className=\"divide-y divide-gray-200\">\n                                {analysis.groupedAnswers.map(({ answer, count }) => (\n                                    <li key={answer} className=\"py-2 flex justify-between items-center\">\n                                        <span className=\"text-gray-700 break-all mr-4\">{answer}</span>\n                                        <span className=\"font-bold text-orange-600 bg-orange-100 px-2 py-0.5 rounded-full text-sm flex-shrink-0\">{count} cavab</span>\n                                    </li>\n                                ))}\n                            </ul>\n                        ) : (\n                            <p className=\"text-gray-500 text-center py-4\">Bu suala heç bir mətn cavabı verilməyib.</p>\n                        )}\n                    </div>\n                    <p className=\"text-center text-sm text-gray-600 mt-2\">Bu suala {analysis.totalAnswers} nəfərdən {analysis.noAnswerCount} nəfər cavab verməyib.</p>\n                </div>\n            )}\n        </Modal>\n    );\n};\n\nconst PaginatedLeaderboard = ({ leaderboardData }) => {\n    const [currentPage, setCurrentPage] = useState(1);\n    const itemsPerPage = 3;\n    const totalPages = Math.ceil(leaderboardData.length / itemsPerPage);\n\n    const currentLeaderboards = leaderboardData.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);\n\n    if (leaderboardData.length === 0) {\n        return <p className=\"text-gray-500\">Liderlər lövhəsi üçün kifayət qədər data yoxdur.</p>;\n    }\n\n    return (\n        <div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                {currentLeaderboards.map(({ quizTitle, topStudents }) => (\n                    <div key={quizTitle} className=\"border rounded-lg p-4 bg-gray-50\">\n                        <h4 className=\"font-semibold text-center mb-3 text-gray-700 truncate\">\n                            <Link to={`/stats/quiz/${topStudents[0].quizId}`} className=\"hover:underline\">{quizTitle}</Link>\n                        </h4>\n                        <ol className=\"space-y-2\">\n                            {topStudents.map((student, index) => (\n                                <li key={student.id} className=\"flex items-center justify-between text-sm p-1 rounded-md hover:bg-gray-100\">\n                                    <span className=\"flex items-center gap-2\">\n                                        {index === 0 ? <GoldMedalIcon /> : index === 1 ? <SilverMedalIcon /> : index === 2 ? <BronzeMedalIcon /> : <TrophyIcon className=\"text-gray-300\" />}\n                                        <Link to={`/student/${student.user_id}`} className=\"hover:underline\">{student.userName} {student.userSurname}</Link>\n                                    </span>\n                                    <span className=\"font-bold text-gray-800\">{student.score} bal</span>\n                                </li>\n                            ))}\n                        </ol>\n                    </div>\n                ))}\n            </div>\n            {totalPages > 1 && (\n                <div className=\"mt-4 flex justify-center items-center gap-4\">\n                    <Button onClick={() => setCurrentPage(p => Math.max(1, p - 1))} disabled={currentPage === 1}>Əvvəlki</Button>\n                    <span className=\"text-sm text-gray-600\">Səhifə {currentPage} / {totalPages}</span>\n                    <Button onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))} disabled={currentPage === totalPages}>Növbəti</Button>\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst AnalyticsOverview = ({ analytics, pieChartData, onPieChartClick, onAnalyzeQuestion, leaderboardData }) => {\n    const chartRef = useRef();\n    const handleChartClick = (event) => {\n        const element = getElementAtEvent(chartRef.current, event);\n        if (element.length > 0) {\n            onPieChartClick(element[0].index);\n        }\n    };\n\n    return (\n        <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <Card className=\"lg:col-span-1\"><h3 className=\"font-bold text-lg mb-4\">Ümumi Göstəricilər</h3><div className=\"space-y-3\"><p><strong>Testi Tamamlayanlar:</strong> {analytics.totalCompletions}</p><p><strong>Unikal Tələbələr:</strong> {analytics.uniqueStudents}</p><p><strong>Orta Nəticə:</strong> {analytics.averageScore.toFixed(1)}%</p></div></Card>\n                <Card className=\"lg:col-span-2\">\n                    <h3 className=\"font-bold text-lg mb-4\">Nəticələrin Paylanması</h3>\n                    <div className=\"h-64 flex items-center justify-center\">\n                        {pieChartData && <Pie data={pieChartData} options={{ responsive: true, maintainAspectRatio: false }} onClick={handleChartClick} ref={chartRef} />}\n                    </div>\n                </Card>\n            </div>\n            <Card>\n                <h3 className=\"font-bold text-lg mb-4 flex items-center gap-2\"><TrophyIcon /> Liderlər Lövhəsi</h3>\n                <PaginatedLeaderboard leaderboardData={leaderboardData} />\n            </Card>\n            <Card><h3 className=\"font-bold text-lg mb-4\">Ən Çətin Suallar</h3><ul className=\"list-inside space-y-2\">{analytics.topDifficultQuestions.length > 0 ? (analytics.topDifficultQuestions.map(([text, data]) => <li key={text}><button onClick={() => onAnalyzeQuestion({ text, quizTitle: data.quizTitle })} className=\"text-left text-blue-600 hover:underline flex items-center gap-2\"><ChartBarIcon /><strong>{text}</strong></button> ({data.quizTitle}) - <span className=\"text-red-600\">{data.count} səhv</span></li>)) : (<p className=\"text-gray-500\">Səhv cavab tapılmadı.</p>)}</ul></Card>\n        </div>\n    );\n};\n\nconst ResultsTable = ({ results, onReviewResult, onSort, sortBy, sortDirection }) => {\n    const [currentPage, setCurrentPage] = useState(1);\n    const resultsPerPage = 10;\n\n    const paginatedResults = useMemo(() => {\n        const startIndex = (currentPage - 1) * resultsPerPage;\n        return results.slice(startIndex, startIndex + resultsPerPage);\n    }, [results, currentPage]);\n\n    const totalPages = Math.ceil(results.length / resultsPerPage);\n\n    const getSortIndicator = (column) => (sortBy === column ? (sortDirection === 'asc' ? ' ▲' : ' ▼') : '');\n\n    return (\n        <Card>\n            <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200\">\n                    <thead className=\"bg-gray-50\"><tr><th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer\" onClick={() => onSort('date')}>Tarix {getSortIndicator('date')}</th><th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer\" onClick={() => onSort('name')}>Ad Soyad {getSortIndicator('name')}</th><th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer\" onClick={() => onSort('quizTitle')}>Test {getSortIndicator('quizTitle')}</th><th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer\" onClick={() => onSort('score')}>Nəticə {getSortIndicator('score')}</th><th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th><th scope=\"col\" className=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Əməliyyat</th></tr></thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                        {paginatedResults.map((result) => (\n                            <tr key={result.id} className=\"hover:bg-gray-50\">\n                                <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-500\">{formatDate(result.created_at)}</td>\n                                <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900\"><Link to={`/student/${result.user_id}`} className=\"text-blue-600 hover:underline\">{result.userName} {result.userSurname}</Link></td>\n                                <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\"><Link to={`/stats/quiz/${result.quizId}`} className=\"text-blue-600 hover:underline\">{result.quizTitle}</Link></td>\n                                <td className=\"px-4 py-4 whitespace-nowrap text-sm text-gray-500\"><div className=\"flex flex-col\"><span className=\"font-bold\">{result.score} / {result.totalPoints} bal</span><span className=\"text-xs text-gray-400\">{result.percentage}%</span></div></td>\n                                <td className=\"px-4 py-4 whitespace-nowrap text-sm\"><span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${result.status === 'pending_review' ? 'bg-yellow-100 text-yellow-800' : 'bg-green-100 text-green-800'}`}>{result.status === 'pending_review' ? <ClockIcon className=\"w-4 h-4 mr-1.5\" /> : <CheckIcon className=\"w-4 h-4 mr-1.5\" />} {result.status === 'pending_review' ? 'Yoxlanılır' : 'Tamamlanıb'}</span></td>\n                                <td className=\"px-4 py-4 whitespace-nowrap text-sm font-medium\"><Button onClick={() => onReviewResult(result)} variant={result.status === 'pending_review' ? 'primary' : 'secondary'} size=\"sm\">{result.status === 'pending_review' ? <ClipboardCheckIcon className=\"w-4 h-4\" /> : <EyeIcon className=\"w-4 h-4\" />}<span className=\"ml-1\">{result.status === 'pending_review' ? 'Yoxla' : 'Bax'}</span></Button></td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n            {totalPages > 1 && (\n                <div className=\"py-4 flex items-center justify-between\">\n                    <Button onClick={() => setCurrentPage(p => Math.max(1, p - 1))} disabled={currentPage === 1}>Əvvəlki</Button>\n                    <span className=\"text-sm text-gray-600\">Səhifə {currentPage} / {totalPages}</span>\n                    <Button onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))} disabled={currentPage === totalPages}>Növbəti</Button>\n                </div>\n            )}\n        </Card>\n    );\n};\n\n// --- Main Component ---\nconst StatisticsPage = ({ results, onBack, quizzes, onReviewResult, studentGroups = [] }) => {\n    const [activeTab, setActiveTab] = useState('overview');\n    const [searchTerm, setSearchTerm] = useState('');\n    const [selectedQuizFilter, setSelectedQuizFilter] = useState('all');\n    const [selectedGroupFilter, setSelectedGroupFilter] = useState('all');\n    const [dateRange, setDateRange] = useState({ start: '', end: '' });\n    const [sortBy, setSortBy] = useState('date');\n    const [sortDirection, setSortDirection] = useState('desc');\n    const [analyzingQuestion, setAnalyzingQuestion] = useState(null);\n    const [studentListModal, setStudentListModal] = useState({ isOpen: false, students: [], title: '' });\n\n    const filteredResults = useMemo(() => {\n        let filtered = results;\n\n        if (selectedGroupFilter !== 'all') {\n            const selectedGroup = studentGroups.find(g => g.id === Number(selectedGroupFilter));\n            if (selectedGroup) {\n                const memberIds = new Set((selectedGroup.members || []).map(m => m.user_id));\n                filtered = filtered.filter(r => memberIds.has(r.user_id));\n            }\n        }\n\n        if (searchTerm) {\n            const lowerCaseSearchTerm = searchTerm.toLowerCase();\n            filtered = filtered.filter(r => `${r.userName} ${r.userSurname}`.toLowerCase().includes(lowerCaseSearchTerm) || r.quizTitle.toLowerCase().includes(lowerCaseSearchTerm));\n        }\n        if (selectedQuizFilter !== 'all') {\n            filtered = filtered.filter(r => r.quizTitle === selectedQuizFilter);\n        }\n        if (dateRange.start) {\n            filtered = filtered.filter(r => new Date(r.created_at) >= new Date(dateRange.start));\n        }\n        if (dateRange.end) {\n            filtered = filtered.filter(r => new Date(r.created_at) <= new Date(dateRange.end).setHours(23, 59, 59, 999));\n        }\n        return filtered;\n    }, [results, searchTerm, selectedQuizFilter, dateRange, selectedGroupFilter, studentGroups]);\n\n    const pendingResults = useMemo(() => filteredResults.filter(r => r.status === 'pending_review'), [filteredResults]);\n    const completedResults = useMemo(() => filteredResults.filter(r => r.status !== 'pending_review'), [filteredResults]);\n\n    const sortedPendingResults = useMemo(() => {\n        return [...pendingResults].sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n    }, [pendingResults]);\n\n    const sortedCompletedResults = useMemo(() => {\n        return [...completedResults].sort((a, b) => {\n            let compareValue = 0;\n            if (sortBy === 'date') compareValue = new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n            else if (sortBy === 'name') compareValue = `${a.userName} ${a.userSurname}`.localeCompare(`${b.userName} ${b.userSurname}`);\n            else if (sortBy === 'quizTitle') compareValue = a.quizTitle.localeCompare(b.quizTitle);\n            else if (sortBy === 'score') compareValue = b.score - a.score;\n            return sortDirection === 'asc' ? compareValue : -compareValue;\n        });\n    }, [completedResults, sortBy, sortDirection]);\n\n    const analytics = useMemo(() => {\n        const data = completedResults;\n        if (data.length === 0) return null;\n        const totalCompletions = data.length;\n        const uniqueStudents = new Set(data.map(r => `${r.userName} ${r.userSurname}`)).size;\n        const averageScore = data.reduce((acc, r) => acc + r.percentage, 0) / totalCompletions;\n        const scoreDistribution = {\n            perfect: data.filter(r => r.percentage >= 90).length,\n            good: data.filter(r => r.percentage >= 70 && r.percentage < 90).length,\n            medium: data.filter(r => r.percentage >= 50 && r.percentage < 70).length,\n            bad: data.filter(r => r.percentage < 50).length,\n        };\n        const difficultQuestions = {};\n        data.forEach(result => {\n            const quiz = quizzes.find(q => q.id === result.quizId);\n            if (!quiz) return;\n            result.questionOrder.forEach(q => {\n                const originalQuestion = quiz.questions.find(oq => oq.id === q.id);\n                if (originalQuestion && !isAnswerCorrect(originalQuestion, result.userAnswers[originalQuestion.id])) {\n                    if (!difficultQuestions[originalQuestion.text]) difficultQuestions[originalQuestion.text] = { count: 0, quizTitle: quiz.title };\n                    difficultQuestions[originalQuestion.text].count++;\n                }\n            });\n        });\n        const topDifficultQuestions = Object.entries(difficultQuestions).sort(([, a], [, b]) => b.count - a.count).slice(0, 5);\n        return { totalCompletions, uniqueStudents, averageScore, scoreDistribution, topDifficultQuestions };\n    }, [completedResults, quizzes]);\n\n    const leaderboardData = useMemo(() => {\n        const scope = selectedQuizFilter === 'all' ? results.filter(r => r.status !== 'pending_review') : completedResults;\n        const resultsByQuiz = scope.reduce((acc, result) => {\n            acc[result.quizTitle] = acc[result.quizTitle] || [];\n            acc[result.quizTitle].push(result);\n            return acc;\n        }, {});\n        return Object.entries(resultsByQuiz).map(([quizTitle, quizResults]) => {\n            const bestScores = {};\n            quizResults.forEach(result => {\n                const studentIdentifier = `${result.userName} ${result.userSurname}`;\n                if (!bestScores[studentIdentifier] || result.score > bestScores[studentIdentifier].score) {\n                    bestScores[studentIdentifier] = result;\n                }\n            });\n            const topStudents = Object.values(bestScores).sort((a, b) => b.score - a.score || new Date(a.created_at) - new Date(b.created_at)).slice(0, 3);\n            return { quizTitle, topStudents };\n        }).filter(item => item.topStudents.length > 0);\n    }, [completedResults, results, selectedQuizFilter]);\n\n    const pieChartData = useMemo(() => {\n        if (!analytics) return null;\n        return {\n            labels: [`Əla (90-100%)`, `Yaxşı (70-89%)`, `Kafi (50-69%)`, `Qeyri-kafi (<50%)`],\n            datasets: [{\n                data: [analytics.scoreDistribution.perfect, analytics.scoreDistribution.good, analytics.scoreDistribution.medium, analytics.scoreDistribution.bad],\n                backgroundColor: ['#10B981', '#3B82F6', '#F59E0B', '#EF4444'],\n                borderColor: ['#ffffff'],\n                borderWidth: 2,\n            }]\n        };\n    }, [analytics]);\n\n    const handlePieChartClick = (index) => {\n        const data = completedResults;\n        let students = [];\n        let title = '';\n        switch (index) {\n            case 0: title = 'Əla Nəticə Göstərən Tələbələr'; students = data.filter(r => r.percentage >= 90); break;\n            case 1: title = 'Yaxşı Nəticə Göstərən Tələbələr'; students = data.filter(r => r.percentage >= 70 && r.percentage < 90); break;\n            case 2: title = 'Kafi Nəticə Göstərən Tələbələr'; students = data.filter(r => r.percentage >= 50 && r.percentage < 70); break;\n            case 3: title = 'Qeyri-kafi Nəticə Göstərən Tələbələr'; students = data.filter(r => r.percentage < 50); break;\n            default: return;\n        }\n        setStudentListModal({ isOpen: true, students, title });\n    };\n\n    const uniqueQuizTitles = useMemo(() => ['all', ...Array.from(new Set(results.map(r => r.quizTitle))).sort()], [results]);\n\n    const handleSort = (column) => {\n        if (sortBy === column) setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n        else { setSortBy(column); setSortDirection('desc'); }\n    };\n\n    const handleExportCSV = () => {\n        const dataToExport = activeTab === 'pending' ? sortedPendingResults : sortedCompletedResults;\n        const headers = [\"Ad\", \"Soyad\", \"Test Adı\", \"Toplanan Bal\", \"Maksimum Bal\", \"Faiz\", \"Status\", \"Tarix\"];\n        const csvRows = [headers.join(',')];\n        dataToExport.forEach(result => {\n            const row = [`\"${result.userName}\"`, `\"${result.userSurname}\"`, `\"${result.quizTitle}\"`, result.score, result.totalPoints, result.percentage, result.status, formatDate(result.created_at)];\n            csvRows.push(row.join(','));\n        });\n        const csvString = csvRows.join('\\n');\n        const blob = new Blob(['\\uFEFF' + csvString], { type: 'text/csv;charset=utf-8;' });\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = `statistika_${activeTab}_${new Date().toLocaleDateString('az-AZ')}.csv`;\n        link.click();\n    };\n\n    const renderContent = () => {\n        switch (activeTab) {\n            case 'overview':\n                return analytics ? <AnalyticsOverview analytics={analytics} pieChartData={pieChartData} leaderboardData={leaderboardData} onAnalyzeQuestion={setAnalyzingQuestion} onPieChartClick={handlePieChartClick} /> : <Card><p className=\"text-center text-gray-500\">Analitika üçün kifayət qədər data yoxdur.</p></Card>;\n            case 'pending':\n                return <ResultsTable results={sortedPendingResults} onReviewResult={onReviewResult} onSort={handleSort} sortBy={sortBy} sortDirection={sortDirection} />;\n            case 'completed':\n                return <ResultsTable results={sortedCompletedResults} onReviewResult={onReviewResult} onSort={handleSort} sortBy={sortBy} sortDirection={sortDirection} />;\n            default:\n                return null;\n        }\n    }\n\n    return (\n        <div className=\"animate-fade-in\">\n            <div className=\"grid lg:grid-cols-4 gap-8 items-start\">\n\n                {/* --- Left Column: Filters Panel --- */}\n                <div className=\"lg:col-span-1 space-y-6 lg:sticky lg:top-24\">\n                    <div className=\"flex flex-col gap-2\">\n                        <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800\">Statistika</h1>\n                        <Button onClick={onBack} variant=\"secondary\" className=\"w-full justify-center\"><ArrowLeftIcon /> Geri</Button>\n                    </div>\n                    <Card>\n                        <h3 className=\"font-bold text-gray-800 mb-3\">Filtrlər</h3>\n                        <div className=\"space-y-4\">\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Ada görə axtarış</label>\n                                <input type=\"text\" placeholder=\"Tələbə axtar...\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-orange-500 focus:border-orange-500\" />\n                            </div>\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Qrupa görə filtr</label>\n                                <select value={selectedGroupFilter} onChange={e => setSelectedGroupFilter(e.target.value)} className=\"w-full p-2 border border-gray-300 rounded-md bg-white focus:ring-orange-500 focus:border-orange-500\">\n                                    <option value=\"all\">Bütün Tələbələr</option>\n                                    {studentGroups.map(group => <option key={group.id} value={group.id}>{group.name}</option>)}\n                                </select>\n                            </div>\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Testə görə filtr</label>\n                                <select value={selectedQuizFilter} onChange={e => setSelectedQuizFilter(e.target.value)} className=\"w-full p-2 border border-gray-300 rounded-md bg-white focus:ring-orange-500 focus:border-orange-500\">\n                                    {uniqueQuizTitles.map(title => <option key={title} value={title}>{title === 'all' ? 'Bütün Testlər' : title}</option>)}\n                                </select>\n                            </div>\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Tarix aralığı</label>\n                                <div className=\"grid grid-cols-2 gap-2\">\n                                    <input type=\"date\" value={dateRange.start} onChange={e => setDateRange(prev => ({...prev, start: e.target.value}))} className=\"p-2 border border-gray-300 rounded-md focus:ring-orange-500 focus:border-orange-500\" />\n                                    <input type=\"date\" value={dateRange.end} onChange={e => setDateRange(prev => ({...prev, end: e.target.value}))} className=\"p-2 border border-gray-300 rounded-md focus:ring-orange-500 focus:border-orange-500\" />\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"mt-6 border-t pt-4\">\n                            <Button onClick={handleExportCSV} variant=\"secondary\" className=\"w-full justify-center\" disabled={filteredResults.length === 0}><DownloadIcon /> CSV ixrac et</Button>\n                        </div>\n                    </Card>\n                </div>\n\n                {/* --- Right Column: Main Content --- */}\n                <div className=\"lg:col-span-3 space-y-6\">\n                    <StudentListModal isOpen={studentListModal.isOpen} onClose={() => setStudentListModal({ isOpen: false, students: [], title: '' })} students={studentListModal.students} title={studentListModal.title} />\n                    <QuestionAnalysisModal isOpen={!!analyzingQuestion} onClose={() => setAnalyzingQuestion(null)} question={analyzingQuestion} results={results} quizzes={quizzes} />\n\n                    <div>\n                        <div className=\"border-b border-gray-200\">\n                            <nav className=\"-mb-px flex space-x-6\" aria-label=\"Tabs\">\n                                <button onClick={() => setActiveTab('overview')} className={`${activeTab === 'overview' ? 'border-orange-500 text-orange-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'} whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}>Ümumi Baxış</button>\n                                <button onClick={() => setActiveTab('pending')} className={`${activeTab === 'pending' ? 'border-orange-500 text-orange-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'} whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}>Gözləyən Yoxlamalar ({pendingResults.length})</button>\n                                <button onClick={() => setActiveTab('completed')} className={`${activeTab === 'completed' ? 'border-orange-500 text-orange-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'} whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}>Tamamlanmış Nəticələr ({completedResults.length})</button>\n                            </nav>\n                        </div>\n                        <div className=\"pt-6\">\n                            {renderContent()}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default StatisticsPage;\n"],"names":["_ref","children","className","_jsx","concat","ChartJS","register","ArcElement","Tooltip","Legend","CategoryScale","LinearScale","BarElement","Title","formatDate","dateString","date","Date","isNaN","toLocaleString","StudentListModal","isOpen","onClose","students","title","Modal","map","student","_jsxs","Link","to","user_id","userName","userSurname","percentage","quizTitle","id","QuestionAnalysisModal","_ref2","question","results","quizzes","analysis","useMemo","quiz","find","q","fullQuestion","questions","text","includes","type","answerCounts","options","reduce","acc","option","_objectSpread","noAnswerCount","forEach","result","quizId","userAnswer","userAnswers","length","answer","undefined","chartData","labels","Object","keys","datasets","label","data","values","backgroundColor","correctAnswers","i","borderColor","borderWidth","totalAnswers","filter","r","Map","trim","normalizedAnswer","toLowerCase","set","get","groupedAnswers","Array","from","entries","_ref3","count","sort","a","b","size","_Fragment","Bar","maintainAspectRatio","indexAxis","_ref4","PaginatedLeaderboard","_ref5","leaderboardData","currentPage","setCurrentPage","useState","totalPages","Math","ceil","currentLeaderboards","slice","_ref6","topStudents","index","GoldMedalIcon","SilverMedalIcon","BronzeMedalIcon","TrophyIcon","score","Button","onClick","p","max","disabled","min","AnalyticsOverview","_ref7","analytics","pieChartData","onPieChartClick","onAnalyzeQuestion","chartRef","useRef","Card","totalCompletions","uniqueStudents","averageScore","toFixed","Pie","responsive","event","element","getElementAtEvent","current","ref","topDifficultQuestions","_ref8","ChartBarIcon","ResultsTable","_ref9","onReviewResult","onSort","sortBy","sortDirection","paginatedResults","startIndex","getSortIndicator","column","scope","created_at","totalPoints","status","ClockIcon","CheckIcon","variant","ClipboardCheckIcon","EyeIcon","_ref0","onBack","studentGroups","activeTab","setActiveTab","searchTerm","setSearchTerm","selectedQuizFilter","setSelectedQuizFilter","selectedGroupFilter","setSelectedGroupFilter","dateRange","setDateRange","start","end","setSortBy","setSortDirection","analyzingQuestion","setAnalyzingQuestion","studentListModal","setStudentListModal","filteredResults","filtered","selectedGroup","g","Number","memberIds","Set","members","m","has","lowerCaseSearchTerm","setHours","pendingResults","completedResults","sortedPendingResults","sortedCompletedResults","compareValue","getTime","localeCompare","scoreDistribution","perfect","good","medium","bad","difficultQuestions","questionOrder","originalQuestion","oq","isAnswerCorrect","correctOptions","userOptions","isArray","JSON","stringify","correctAnswer","orderItems","_ref1","_ref10","resultsByQuiz","push","_ref11","quizResults","bestScores","studentIdentifier","item","handlePieChartClick","uniqueQuizTitles","handleSort","prev","ArrowLeftIcon","placeholder","value","onChange","e","target","group","name","handleExportCSV","dataToExport","csvRows","join","row","csvString","blob","Blob","link","document","createElement","href","URL","createObjectURL","download","toLocaleDateString","click","DownloadIcon","renderContent"],"sourceRoot":""}