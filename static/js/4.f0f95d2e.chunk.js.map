{"version":3,"file":"static/js/4.f0f95d2e.chunk.js","mappings":"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","sources":["components/ui/LevelProgressBar.js","hooks/useGamification.js","components/GamificationStats.js","../node_modules/@heroicons/react/24/solid/esm/FireIcon.js","../node_modules/@heroicons/react/24/solid/esm/StarIcon.js","../node_modules/@heroicons/react/24/solid/esm/AcademicCapIcon.js","components/ui/AchievementIcon.js","pages/ProfilePage.js","components/ui/Card.js"],"sourcesContent":["import React from 'react';\nimport { useGamification } from '../../hooks/useGamification';\n\nconst LevelProgressBar = ({ experience }) => {\n    const { level, xpForNextLevel, progressPercentage } = useGamification(experience);\n\n    return (\n        <div>\n            <div className=\"flex justify-between items-center mb-1\">\n                <span className=\"font-bold text-orange-600\">Səviyyə {level}</span>\n                <span className=\"text-sm text-gray-500\">{experience} / {xpForNextLevel} XP</span>\n            </div>\n            <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\n                <div \n                    className=\"bg-gradient-to-r from-orange-400 to-red-500 h-2.5 rounded-full\" \n                    style={{ width: `${progressPercentage}%` }}\n                ></div>\n            </div>\n        </div>\n    );\n};\n\nexport default LevelProgressBar;","import { useMemo } from 'react';\n\nexport const useGamification = (experience) => {\n    const gamificationData = useMemo(() => {\n        const xp = experience || 0;\n        const currentLevel = Math.floor(xp / 100) + 1;\n        const nextLevelXp = currentLevel * 100;\n        const currentLevelXp = (currentLevel - 1) * 100;\n        const xpIntoLevel = xp - currentLevelXp;\n        const xpForNextLevel = nextLevelXp - currentLevelXp;\n        const progressPercentage = xpForNextLevel > 0 ? (xpIntoLevel / xpForNextLevel) * 100 : 0;\n\n        return {\n            level: currentLevel,\n            experience: xp,\n            xpForNextLevel: nextLevelXp,\n            progressPercentage,\n        };\n    }, [experience]);\n\n    return gamificationData;\n};","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from './ui/Card';\nimport LevelProgressBar from './ui/LevelProgressBar';\nimport { StarIcon, FireIcon } from '../assets/icons';\n\nconst GamificationStats = ({ profile }) => {\n    if (!profile) return null;\n\n    const experience = profile.experience_points || 0;\n    const dailyStreak = profile.daily_streak || 0;\n\n    return (\n        <Card>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 items-center\">\n                <div className=\"md:col-span-2\">\n                    <h2 className=\"text-xl font-bold mb-4\">Sizin Proqresiniz</h2>\n                    <LevelProgressBar experience={experience} />\n                </div>\n                <div className=\"flex justify-around md:justify-end gap-6 text-center border-t md:border-t-0 md:border-l border-gray-200 pt-4 md:pt-0 md:pl-6\">\n                    <Link to=\"/profile\" className=\"flex flex-col items-center hover:opacity-75 transition-opacity\">\n                        <div className=\"flex items-center gap-2 text-2xl font-bold text-yellow-500\">\n                            <StarIcon />\n                            <span>{experience}</span>\n                        </div>\n                        <span className=\"text-sm text-gray-500\">Təcrübə Xalı</span>\n                    </Link>\n                    <Link to=\"/profile\" className=\"flex flex-col items-center hover:opacity-75 transition-opacity\">\n                        <div className=\"flex items-center gap-2 text-2xl font-bold text-red-500\">\n                            <FireIcon />\n                            <span>{dailyStreak}</span>\n                        </div>\n                        <span className=\"text-sm text-gray-500\">Günlük Seriya</span>\n                    </Link>\n                </div>\n            </div>\n        </Card>\n    );\n};\n\nexport default GamificationStats;","import * as React from \"react\";\nfunction FireIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M12.963 2.286a.75.75 0 0 0-1.071-.136 9.742 9.742 0 0 0-3.539 6.176 7.547 7.547 0 0 1-1.705-1.715.75.75 0 0 0-1.152-.082A9 9 0 1 0 15.68 4.534a7.46 7.46 0 0 1-2.717-2.248ZM15.75 14.25a3.75 3.75 0 1 1-7.313-1.172c.628.465 1.35.81 2.133 1a5.99 5.99 0 0 1 1.925-3.546 3.75 3.75 0 0 1 3.255 3.718Z\",\n    clipRule: \"evenodd\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(FireIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction StarIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M10.788 3.21c.448-1.077 1.976-1.077 2.424 0l2.082 5.006 5.404.434c1.164.093 1.636 1.545.749 2.305l-4.117 3.527 1.257 5.273c.271 1.136-.964 2.033-1.96 1.425L12 18.354 7.373 21.18c-.996.608-2.231-.29-1.96-1.425l1.257-5.273-4.117-3.527c-.887-.76-.415-2.212.749-2.305l5.404-.434 2.082-5.005Z\",\n    clipRule: \"evenodd\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(StarIcon);\nexport default ForwardRef;","import * as React from \"react\";\nfunction AcademicCapIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M11.7 2.805a.75.75 0 0 1 .6 0A60.65 60.65 0 0 1 22.83 8.72a.75.75 0 0 1-.231 1.337 49.948 49.948 0 0 0-9.902 3.912l-.003.002c-.114.06-.227.119-.34.18a.75.75 0 0 1-.707 0A50.88 50.88 0 0 0 7.5 12.173v-.224c0-.131.067-.248.172-.311a54.615 54.615 0 0 1 4.653-2.52.75.75 0 0 0-.65-1.352 56.123 56.123 0 0 0-4.78 2.589 1.858 1.858 0 0 0-.859 1.228 49.803 49.803 0 0 0-4.634-1.527.75.75 0 0 1-.231-1.337A60.653 60.653 0 0 1 11.7 2.805Z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.06 15.473a48.45 48.45 0 0 1 7.666-3.282c.134 1.414.22 2.843.255 4.284a.75.75 0 0 1-.46.711 47.87 47.87 0 0 0-8.105 4.342.75.75 0 0 1-.832 0 47.87 47.87 0 0 0-8.104-4.342.75.75 0 0 1-.461-.71c.035-1.442.121-2.87.255-4.286.921.304 1.83.634 2.726.99v1.27a1.5 1.5 0 0 0-.14 2.508c-.09.38-.222.753-.397 1.11.452.213.901.434 1.346.66a6.727 6.727 0 0 0 .551-1.607 1.5 1.5 0 0 0 .14-2.67v-.645a48.549 48.549 0 0 1 3.44 1.667 2.25 2.25 0 0 0 2.12 0Z\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.462 19.462c.42-.419.753-.89 1-1.395.453.214.902.435 1.347.662a6.742 6.742 0 0 1-1.286 1.794.75.75 0 0 1-1.06-1.06Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(AcademicCapIcon);\nexport default ForwardRef;","import React from 'react';\r\nimport { StarIcon, FireIcon, AcademicCapIcon } from '@heroicons/react/24/solid';\r\n\r\nconst iconMap = {\r\n    sniper: FireIcon,\r\n    marathoner: StarIcon,\r\n    newbie: AcademicCapIcon,\r\n    default: StarIcon,\r\n};\r\n\r\nconst colorMap = {\r\n    gold: 'text-yellow-500',\r\n    silver: 'text-gray-400',\r\n    bronze: 'text-orange-700',\r\n    default: 'text-gray-400',\r\n};\r\n\r\nconst AchievementIcon = ({ achievement }) => {\r\n    if (!achievement) return null;\r\n\r\n    const IconComponent = iconMap[achievement.icon_name] || iconMap.default;\r\n    const iconColor = colorMap[achievement.badge_color] || colorMap.default;\r\n\r\n    return (\r\n        <div \r\n            className=\"flex flex-col items-center justify-start text-center p-3 rounded-lg bg-gray-50 border border-gray-200 w-32 h-30\"\r\n            title={`${achievement.name}: ${achievement.description}`}\r\n        >\r\n            <IconComponent className={`h-10 w-10 ${iconColor} mb-2 flex-shrink-0`} />\r\n            <p className=\"text-xs font-bold text-gray-800 break-words\">{achievement.name}</p>\r\n            <p className=\"mt-1 text-gray-500\" style={{ fontSize: '0.7rem', lineHeight: '0.9rem' }}>{achievement.description}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AchievementIcon;","import React, { useState, useEffect, useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { supabase } from '../supabaseClient';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport { ChartBarIcon, TrophyIcon } from '../assets/icons';\nimport AchievementIcon from '../components/ui/AchievementIcon';\nimport GamificationStats from '../components/GamificationStats';\n\nconst ProfilePage = ({ session, profile, showToast, onProfileUpdate, userAchievements, allAchievements }) => {\n    const [loading, setLoading] = useState(false);\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n\n    useEffect(() => {\n        if (profile) {\n            setFirstName(profile.first_name || '');\n            setLastName(profile.last_name || '');\n        }\n    }, [profile]);\n\n    const { earned, unearned } = useMemo(() => {\n        if (!allAchievements || !userAchievements) {\n            return { earned: [], unearned: [] };\n        }\n        const earnedIds = new Set(userAchievements.map(a => a.achievement_id));\n        const earned = allAchievements.filter(a => earnedIds.has(a.id));\n        const unearned = allAchievements.filter(a => !earnedIds.has(a.id));\n        return { earned, unearned };\n    }, [allAchievements, userAchievements]);\n\n    const handleProfileUpdate = async (e) => {\n        e.preventDefault();\n        setLoading(true);\n\n        const { data, error } = await supabase\n            .from('profiles')\n            .update({\n                first_name: firstName,\n                last_name: lastName,\n                username: `${firstName} ${lastName}`\n            })\n            .eq('id', session.user.id)\n            .select()\n            .single();\n\n        if (error) {\n            showToast(`Profil yenilənərkən xəta: ${error.message}`);\n        } else {\n            onProfileUpdate(data);\n            showToast('Profil uğurla yeniləndi!');\n        }\n        setLoading(false);\n    };\n\n    const handlePasswordUpdate = async (e) => {\n        e.preventDefault();\n        if (password !== confirmPassword) {\n            showToast('Parollar eyni deyil!');\n            return;\n        }\n        if (password.length < 6) {\n            showToast('Parol ən azı 6 simvoldan ibarət olmalıdır.');\n            return;\n        }\n\n        setLoading(true);\n        const { error } = await supabase.auth.updateUser({ password });\n        if (error) {\n            showToast(`Parol yenilənərkən xəta: ${error.message}`);\n        } else {\n            showToast('Parol uğurla yeniləndi!');\n            setPassword('');\n            setConfirmPassword('');\n        }\n        setLoading(false);\n    };\n\n    if (!session || !profile) {\n        return <div>Yüklənir...</div>;\n    }\n\n    return (\n        <div className=\"animate-fade-in space-y-6 max-w-4xl mx-auto\">\n            <div className=\"flex flex-col sm:flex-row justify-between sm:items-center gap-4\">\n                <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800\">Mənim Profilim</h1>\n                <Link to={`/student/${session.user.id}`}>\n                    <Button variant=\"primary\"><ChartBarIcon /> Mənim Nəticələrim</Button>\n                </Link>\n            </div>\n\n            {/* Gamification Stats */}\n            <GamificationStats profile={profile} />\n\n            <Card>\n                <h2 className=\"text-xl font-bold mb-4 flex items-center gap-2\"><TrophyIcon /> Qazanılmış Nailiyyətlər</h2>\n                {earned.length > 0 ? (\n                    <div className=\"flex flex-wrap gap-4\">\n                        {earned.map(ach => <AchievementIcon key={ach.id} achievement={ach} />)}\n                    </div>\n                ) : (\n                    <p className=\"text-gray-500\">Hələ heç bir nailiyyətiniz yoxdur. Testləri tamamlayın və ilkini qazanın!</p>\n                )}\n            </Card>\n\n            <Card>\n                <h2 className=\"text-xl font-bold mb-4 flex items-center gap-2 text-gray-500\">Qazanılacaq Nailiyyətlər</h2>\n                {unearned.length > 0 ? (\n                    <div className=\"flex flex-wrap gap-4\">\n                        {unearned.map(ach => (\n                            <div key={ach.id} className=\"grayscale opacity-60\">\n                                <AchievementIcon achievement={ach} />\n                            </div>\n                        ))}\n                    </div>\n                ) : (\n                    <p className=\"text-green-600 font-semibold\">Təbrik edirik! Bütün mümkün nailiyyətləri qazanmısınız!</p>\n                )}\n            </Card>\n\n            <Card>\n                <h2 className=\"text-xl font-bold mb-4\">Şəxsi Məlumatlar</h2>\n                <form onSubmit={handleProfileUpdate} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                            <label className=\"block text-sm font-medium text-gray-700\">Ad</label>\n                            <input type=\"text\" value={firstName} onChange={(e) => setFirstName(e.target.value)} required className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" />\n                        </div>\n                        <div>\n                            <label className=\"block text-sm font-medium text-gray-700\">Soyad</label>\n                            <input type=\"text\" value={lastName} onChange={(e) => setLastName(e.target.value)} required className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" />\n                        </div>\n                    </div>\n                    <div className=\"flex justify-end\">\n                        <Button type=\"submit\" disabled={loading}>{loading ? 'Yenilənir...' : 'Məlumatları Yenilə'}</Button>\n                    </div>\n                </form>\n            </Card>\n\n            <Card>\n                <h2 className=\"text-xl font-bold mb-4\">Parolu Dəyiş</h2>\n                <form onSubmit={handlePasswordUpdate} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                            <label className=\"block text-sm font-medium text-gray-700\">Yeni Parol</label>\n                            <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" />\n                        </div>\n                        <div>\n                            <label className=\"block text-sm font-medium text-gray-700\">Yeni Parolu Təsdiqlə</label>\n                            <input type=\"password\" value={confirmPassword} onChange={(e) => setConfirmPassword(e.target.value)} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" />\n                        </div>\n                    </div>\n                    <div className=\"flex justify-end\">\n                        <Button type=\"submit\" disabled={loading}>{loading ? 'Dəyişilir...' : 'Parolu Dəyiş'}</Button>\n                    </div>\n                </form>\n            </Card>\n        </div>\n    );\n};\n\nexport default ProfilePage;\n","import React from 'react';\n\nconst Card = ({ children, className = '' }) => (\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\n);\n\nexport default Card;"],"names":["_ref","experience","level","xpForNextLevel","progressPercentage","useMemo","xp","currentLevel","Math","floor","nextLevelXp","currentLevelXp","useGamification","_jsxs","children","className","_jsx","style","width","concat","profile","experience_points","dailyStreak","daily_streak","Card","LevelProgressBar","Link","to","StarIcon","FireIcon","svgRef","title","titleId","props","_objectWithoutProperties","_excluded","React","Object","assign","xmlns","viewBox","fill","ref","id","fillRule","d","clipRule","AcademicCapIcon","iconMap","sniper","marathoner","newbie","default","colorMap","gold","silver","bronze","achievement","IconComponent","icon_name","iconColor","badge_color","name","description","fontSize","lineHeight","session","showToast","onProfileUpdate","userAchievements","allAchievements","loading","setLoading","useState","firstName","setFirstName","lastName","setLastName","password","setPassword","confirmPassword","setConfirmPassword","useEffect","first_name","last_name","earned","unearned","earnedIds","Set","map","a","achievement_id","filter","has","user","Button","variant","ChartBarIcon","GamificationStats","TrophyIcon","length","ach","AchievementIcon","onSubmit","async","e","preventDefault","data","error","supabase","from","update","username","eq","select","single","message","type","value","onChange","target","required","disabled","auth","updateUser"],"sourceRoot":""}