{"version":3,"file":"static/js/493.24361327.chunk.js","mappings":"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","sources":["pages/QuizReviewPage.js","components/ui/Card.js","components/Comments.js"],"sourcesContent":["import React from 'react';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport { ArrowLeftIcon, CheckCircleIcon, XCircleIcon, LightbulbIcon, ClockIcon } from '../assets/icons';\nimport Comments from '../components/Comments'; // Импортируем новый компонент\n\nconst QuizReviewPage = ({ quiz, result, onBack, profile, fetchComments, postComment, deleteComment }) => {\n\n    const { userAnswers, questionOrder, time_per_question } = result;\n\n    const getQuestionStatus = (question, userAnswer) => {\n        if (question.type === 'open') {\n            return {\n                status: 'pending',\n                userAnswerText: userAnswer || 'Cavab yoxdur',\n                correctAnswerText: 'Yoxlama gözlənilir'\n            };\n        }\n\n        let isCorrect = false;\n        let correctAnswerText = '';\n        let userAnswerText = userAnswer || 'Cavab yoxdur';\n\n        if (question.type === 'single') {\n            isCorrect = userAnswer === question.options[question.correctAnswers[0]];\n            correctAnswerText = question.options[question.correctAnswers[0]];\n        } else if (question.type === 'multiple') {\n            const correct = question.correctAnswers.map(i => question.options[i]).sort();\n            const user = userAnswer ? [...userAnswer].sort() : [];\n            isCorrect = JSON.stringify(correct) === JSON.stringify(user);\n            correctAnswerText = correct.join(', ');\n            userAnswerText = userAnswer && userAnswer.length > 0 ? userAnswer.join(', ') : 'Cavab yoxdur';\n        } else if (question.type === 'textInput') {\n            isCorrect = userAnswer && question.correctAnswers[0].toLowerCase() === userAnswer.toLowerCase();\n            correctAnswerText = question.correctAnswers[0];\n        } else if (question.type === 'trueFalse') {\n            isCorrect = userAnswer === question.correctAnswer;\n            correctAnswerText = question.correctAnswer ? 'Doğru' : 'Yanlış';\n            if (userAnswer === true) userAnswerText = 'Doğru';\n            else if (userAnswer === false) userAnswerText = 'Yanlış';\n            else userAnswerText = 'Cavab yoxdur';\n        } else if (question.type === 'ordering') {\n            isCorrect = JSON.stringify(userAnswer) === JSON.stringify(question.orderItems);\n            correctAnswerText = question.orderItems.map((item, i) => `${i + 1}. ${item}`).join('; ');\n            userAnswerText = userAnswer && userAnswer.length > 0 ? userAnswer.map((item, i) => `${i + 1}. ${item}`).join('; ') : 'Cavab yoxdur';\n        }\n        else if (question.type === 'fillInTheBlanks') {\n            isCorrect = Array.isArray(userAnswer) && userAnswer.length === question.correctAnswers.length && userAnswer.every((answer, index) => (answer || '').trim().toLowerCase() === (question.correctAnswers[index] || '').trim().toLowerCase());\n            correctAnswerText = question.correctAnswers.join(', ');\n            userAnswerText = userAnswer && userAnswer.length > 0 ? userAnswer.join(', ') : 'Cavab yoxdur';\n        }\n\n        return { status: isCorrect ? 'correct' : 'incorrect', userAnswerText, correctAnswerText };\n    };\n\n    const statusStyles = {\n        correct: { container: 'bg-green-50 border-l-4 border-green-400', icon: <CheckCircleIcon />, iconColor: 'text-green-500', textColor: 'text-green-700' },\n        incorrect: { container: 'bg-red-50 border-l-4 border-red-400', icon: <XCircleIcon />, iconColor: 'text-red-500', textColor: 'text-red-700' },\n        pending: { container: 'bg-yellow-50 border-l-4 border-yellow-400', icon: <ClockIcon />, iconColor: 'text-yellow-500', textColor: 'text-yellow-700' },\n    };\n\n    return (\n        <div className=\"animate-fade-in\">\n            <Button onClick={onBack} variant=\"secondary\" className=\"mb-6\">\n                <ArrowLeftIcon />\n                <span className=\"hidden sm:inline\">Nəticələrə qayıt</span>\n                <span className=\"sm:hidden\">Geri</span>\n            </Button>\n            <Card>\n                <h1 className=\"text-xl sm:text-2xl font-bold text-center text-orange-600 mb-6 sm:mb-8\">\n                    Cavabların təhlili: {quiz.title}\n                </h1>\n                <div className=\"space-y-6\">\n                    {questionOrder.map((q, index) => {\n                        const userAnswer = userAnswers[q.id];\n                        const { status, userAnswerText, correctAnswerText } = getQuestionStatus(q, userAnswer);\n                        const styles = statusStyles[status];\n\n                        return (\n                            <div key={q.id} className={`p-3 sm:p-4 rounded-lg ${styles.container}`}>\n                                <div className=\"flex items-start\">\n                                    <span className={`mr-3 mt-1 ${styles.iconColor}`}>{styles.icon}</span>\n                                    <h3 className=\"font-semibold text-base sm:text-lg text-gray-800 flex-1\">{index + 1}. {q.text}</h3>\n                                </div>\n\n                                {time_per_question && time_per_question[q.id] !== undefined && (\n                                    <div className=\"pl-8 mt-2 flex items-center text-xs text-gray-500\">\n                                        <ClockIcon className=\"w-4 h-4 mr-1\" />\n                                        <span>Sərf olunan vaxt: {Math.round(time_per_question[q.id])} saniyə</span>\n                                    </div>\n                                )}\n\n                                {q.imageUrl && (\n                                    <div className=\"pl-8 mt-3\">\n                                        <img src={q.imageUrl} alt=\"Question illustration\" className=\"rounded-lg max-h-40 sm:max-h-60 w-auto mx-auto\" onError={(e) => e.target.style.display = 'none'} />\n                                    </div>\n                                )}\n\n                                {q.type === 'fillInTheBlanks' ? (\n                                    <div className=\"mt-3 pl-8 text-lg leading-loose\">\n                                        {q.text.split(/(\\[.*?\\])/g).filter(part => part).map((part, i) => {\n                                            if (part.startsWith('[') && part.endsWith(']')) {\n                                                const blankIndex = q.text.substring(0, q.text.indexOf(part)).split('[').length - 1;\n                                                const userAnswerForBlank = (userAnswer || [])[blankIndex] || '';\n                                                const correctAnswerForBlank = q.correctAnswers[blankIndex] || '';\n                                                const isCorrect = userAnswerForBlank.trim().toLowerCase() === correctAnswerForBlank.trim().toLowerCase();\n                                                return (\n                                                    <span key={i} className={`inline-block font-semibold px-2 py-1 rounded-md text-sm ${isCorrect ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n                                                        {userAnswerForBlank || '___'}\n                                                        {!isCorrect && <span className=\"ml-2 text-xs text-green-700 font-bold\">({correctAnswerText})</span>}\n                                                    </span>\n                                                );\n                                            }\n                                            return <span key={i}>{part}</span>;\n                                        })}\n                                    </div>\n                                ) : (\n                                    <div className=\"mt-3 pl-8 space-y-2 text-sm sm:text-base\">\n                                        <p>\n                                            <strong>Sizin cavabınız:</strong>{' '}\n                                            <span className={`${styles.textColor} font-medium`}>{userAnswerText}</span>\n                                        </p>\n                                        {status === 'incorrect' && (\n                                            <p>\n                                                <strong>Düzgün cavab:</strong>{' '}\n                                                <span className=\"text-green-700 font-medium\">{correctAnswerText}</span>\n                                            </p>\n                                        )}\n                                        {status === 'pending' && (\n                                            <p className=\"font-semibold text-yellow-800\">{correctAnswerText}</p>\n                                        )}\n                                    </div>\n                                )}\n\n                                {q.explanation && (\n                                    <div className=\"mt-4 pt-3 pl-8 border-t border-gray-300/70\">\n                                        <div className=\"flex items-start text-sm text-blue-800\">\n                                            <span className=\"mr-2 mt-1 flex-shrink-0\"><LightbulbIcon /></span>\n                                            <div>\n                                                <strong className=\"font-semibold\">İzah:</strong>\n                                                <p className=\"mt-1 whitespace-pre-wrap\">{q.explanation}</p>\n                                            </div>\n                                        </div>\n                                    </div>\n                                )}\n                                <div className=\"mt-4 pt-4 pl-8 border-t border-gray-300/70\">\n                                    <Comments\n                                        targetId={q.id.toString()}\n                                        targetType=\"question\"\n                                        profile={profile}\n                                        fetchComments={fetchComments}\n                                        postComment={postComment}\n                                        deleteComment={deleteComment}\n                                    />\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </Card>\n        </div>\n    );\n};\n\nexport default QuizReviewPage;\n","import React from 'react';\r\n\r\nconst Card = ({ children, className = '' }) => (\r\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\r\n);\r\n\r\nexport default Card;","import React, { useState, useMemo, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport Button from './ui/Button';\r\nimport { ReplyIcon, TrashIcon } from '../assets/icons';\r\n\r\nconst Comment = ({ comment, onReply, onDelete, profile }) => {\r\n    const [showReplyForm, setShowReplyForm] = useState(false);\r\n    const [replyContent, setReplyContent] = useState('');\r\n\r\n    const handleReplySubmit = (e) => {\r\n        e.preventDefault();\r\n        if (!replyContent.trim()) return;\r\n        onReply(replyContent, comment.id);\r\n        setReplyContent('');\r\n        setShowReplyForm(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col gap-2 p-3 rounded-lg bg-white shadow-sm\">\r\n            <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-2\">\r\n                    <div className=\"w-8 h-8 rounded-full bg-orange-200 flex items-center justify-center font-bold text-orange-600\">\r\n                        {comment.profiles.first_name?.[0] || 'U'}\r\n                    </div>\r\n                    <span className=\"font-semibold text-gray-800\">{comment.profiles.first_name} {comment.profiles.last_name}</span>\r\n                </div>\r\n                <span className=\"text-xs text-gray-400\">{new Date(comment.created_at).toLocaleString()}</span>\r\n            </div>\r\n            <p className=\"text-gray-700 pl-10\">{comment.content}</p>\r\n            <div className=\"flex items-center justify-end gap-2 pl-10\">\r\n                {profile && <Button variant=\"secondary\" size=\"sm\" onClick={() => setShowReplyForm(!showReplyForm)}><ReplyIcon /> Cavab ver</Button>}\r\n                {profile?.id === comment.user_id && <Button variant=\"danger\" size=\"sm\" onClick={() => onDelete(comment.id)}><TrashIcon /></Button>}\r\n            </div>\r\n            {showReplyForm && (\r\n                <form onSubmit={handleReplySubmit} className=\"pl-10 mt-2 flex gap-2\">\r\n                    <input \r\n                        type=\"text\" \r\n                        value={replyContent}\r\n                        onChange={(e) => setReplyContent(e.target.value)}\r\n                        placeholder={`Cavab verilir: ${comment.profiles.first_name}...`}\r\n                        className=\"flex-grow mt-1 block w-full rounded-md border-gray-300 shadow-sm text-sm\"\r\n                    />\r\n                    <Button type=\"submit\" size=\"sm\">Göndər</Button>\r\n                </form>\r\n            )}\r\n            {comment.children && comment.children.length > 0 && (\r\n                <div className=\"pl-6 border-l-2 border-orange-100 mt-2 space-y-3\">\r\n                    {comment.children.map(child => (\r\n                        <Comment key={child.id} comment={child} onReply={onReply} onDelete={onDelete} profile={profile} />\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Comments = ({ targetId, targetType, profile, fetchComments, postComment, deleteComment }) => {\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        const loadComments = async () => {\r\n            const fetchedComments = await fetchComments(targetId, targetType);\r\n            setComments(fetchedComments || []);\r\n        };\r\n        if (targetId && targetType) {\r\n            loadComments();\r\n        }\r\n    }, [targetId, targetType, fetchComments]);\r\n\r\n    const handlePostComment = async (content, parentId = null) => {\r\n        const targetUrl = `${location.pathname}#comment-${parentId || 'new'}`;\r\n        const postedComment = await postComment(targetId, targetType, content, parentId, targetUrl);\r\n        if (postedComment) {\r\n            const fetchedComments = await fetchComments(targetId, targetType);\r\n            setComments(fetchedComments || []);\r\n            if (!parentId) {\r\n                setNewComment('');\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDeleteComment = async (commentId) => {\r\n        const success = await deleteComment(commentId);\r\n        if (success) {\r\n            setComments(prev => prev.filter(c => c.id !== commentId));\r\n        }\r\n    };\r\n\r\n    const commentTree = useMemo(() => {\r\n        const map = {};\r\n        const roots = [];\r\n        comments.forEach(comment => {\r\n            map[comment.id] = { ...comment, children: [] };\r\n        });\r\n        comments.forEach(comment => {\r\n            if (comment.parent_comment_id && map[comment.parent_comment_id]) {\r\n                map[comment.parent_comment_id].children.push(map[comment.id]);\r\n            } else {\r\n                roots.push(map[comment.id]);\r\n            }\r\n        });\r\n        return roots;\r\n    }, [comments]);\r\n\r\n    return (\r\n        <div className=\"space-y-6\">\r\n            <h3 className=\"text-xl font-bold text-gray-800\">Şərhlər ({comments.length})</h3>\r\n            {profile && (\r\n                <form onSubmit={(e) => { e.preventDefault(); handlePostComment(newComment); }} className=\"flex gap-2 items-start\">\r\n                    <textarea \r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder=\"Şərhinizi yazın...\"\r\n                        className=\"flex-grow mt-1 block w-full rounded-md border-gray-300 shadow-sm\"\r\n                        rows=\"3\"\r\n                    />\r\n                    <Button type=\"submit\">Göndər</Button>\r\n                </form>\r\n            )}\r\n            {!profile && <p className=\"text-center p-4 bg-gray-50 rounded-md\">Şərh yazmaq üçün <Link to=\"/auth\" className=\"text-orange-600 font-semibold hover:underline\">daxil olun</Link>.</p>}\r\n            \r\n            <div className=\"space-y-4\">\r\n                {commentTree.map(comment => (\r\n                    <Comment key={comment.id} comment={comment} onReply={handlePostComment} onDelete={handleDeleteComment} profile={profile} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;\r\n"],"names":["_ref","quiz","result","onBack","profile","fetchComments","postComment","deleteComment","userAnswers","questionOrder","time_per_question","statusStyles","correct","container","icon","_jsx","CheckCircleIcon","iconColor","textColor","incorrect","XCircleIcon","pending","ClockIcon","_jsxs","className","children","Button","onClick","variant","ArrowLeftIcon","Card","title","map","q","index","userAnswer","id","status","userAnswerText","correctAnswerText","getQuestionStatus","question","type","isCorrect","options","correctAnswers","i","sort","user","JSON","stringify","join","length","toLowerCase","correctAnswer","orderItems","item","concat","Array","isArray","every","answer","trim","styles","text","undefined","Math","round","imageUrl","src","alt","onError","e","target","style","display","split","filter","part","startsWith","endsWith","blankIndex","substring","indexOf","userAnswerForBlank","correctAnswerForBlank","explanation","LightbulbIcon","Comments","targetId","toString","targetType","Comment","_comment$profiles$fir","comment","onReply","onDelete","showReplyForm","setShowReplyForm","useState","replyContent","setReplyContent","profiles","first_name","last_name","Date","created_at","toLocaleString","content","size","ReplyIcon","user_id","TrashIcon","onSubmit","preventDefault","value","onChange","placeholder","child","_ref2","comments","setComments","newComment","setNewComment","location","useLocation","useEffect","async","fetchedComments","loadComments","handlePostComment","parentId","arguments","targetUrl","pathname","handleDeleteComment","commentId","prev","c","commentTree","useMemo","roots","forEach","_objectSpread","parent_comment_id","push","rows","Link","to"],"sourceRoot":""}