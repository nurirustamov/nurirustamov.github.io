{"version":3,"file":"static/js/250.8dc37ba2.chunk.js","mappings":"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","sources":["pages/TakeQuizPage.js","components/ui/Card.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport { SpeakerIcon, ArrowLeftIcon, ArrowRightIcon, CheckIcon, LightbulbIcon, ArrowUpIcon, ArrowDownIcon } from '../assets/icons';\n\n// --- Helper Functions ---\nconst isAnswerCorrect = (question, userAnswer) => {\n    if (userAnswer === undefined || userAnswer === null) return false;\n    if (question.type === 'open') return false;\n    switch (question.type) {\n        case 'single': return userAnswer === question.options[question.correctAnswers[0]];\n        case 'multiple':\n            const correctOptions = question.correctAnswers.map(i => question.options[i]).sort();\n            const userOptions = userAnswer ? [...userAnswer].sort() : [];\n            if (!Array.isArray(userAnswer)) return false;\n            return JSON.stringify(correctOptions) === JSON.stringify(userOptions);\n        case 'textInput': return userAnswer.trim().toLowerCase() === question.correctAnswers[0].trim().toLowerCase();\n        case 'trueFalse': return userAnswer === question.correctAnswer;\n        case 'ordering': return JSON.stringify(userAnswer) === JSON.stringify(question.orderItems); \n        case 'fillInTheBlanks':\n            if (!Array.isArray(userAnswer) || userAnswer.length !== question.correctAnswers.length) return false;\n            return userAnswer.every((answer, index) =>\n                (answer || '').trim().toLowerCase() === (question.correctAnswers[index] || '').trim().toLowerCase()\n            );\n        default: return false;\n    }\n};\n\nconst speakText = (text) => {\n    if ('speechSynthesis' in window) {\n        window.speechSynthesis.cancel();\n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.lang = 'az-AZ';\n        window.speechSynthesis.speak(utterance);\n    } else { alert('Sizin brauzeriniz mətni səsləndirməyi dəstəkləmir.'); }\n};\n\n// --- Question Renderer Component ---\nconst QuestionRenderer = ({ q, index, answers, handleAnswerChange, isPracticeMode, isAnswerChecked, shuffledOptions, isSubmitting }) => {\n    // Initialize shuffled items for ordering questions only once\n    useEffect(() => {\n        if (q.type === 'ordering' && !answers[q.id]) {\n            const shuffled = [...q.orderItems].sort(() => Math.random() - 0.5);\n            handleAnswerChange(q.id, shuffled);\n        }\n    }, [q.type, q.id, q.orderItems, answers, handleAnswerChange]);\n\n    const handleMoveItem = (questionId, index, direction) => {\n        const currentItems = answers[questionId];\n        if (!currentItems) return;\n\n        const newItems = [...currentItems];\n        const targetIndex = index + direction;\n\n        if (targetIndex < 0 || targetIndex >= newItems.length) {\n            return; // Out of bounds\n        }\n\n        // Swap items\n        [newItems[index], newItems[targetIndex]] = [newItems[targetIndex], newItems[index]];\n\n        handleAnswerChange(questionId, newItems);\n    };\n\n\n    const optionsForCurrentQuestion = q.shuffleOptions && shuffledOptions[q.id] ? shuffledOptions[q.id] : q.options;\n\n    const getOptionClassName = (option, optIndex) => {\n        if (!isPracticeMode || !isAnswerChecked) return 'border-transparent';\n        let isCorrect = false;\n        if (q.type === 'single') isCorrect = optIndex === q.correctAnswers[0];\n        if (q.type === 'multiple') isCorrect = q.correctAnswers.includes(optIndex);\n        if (isCorrect) return 'border-green-500 bg-green-100';\n        let isSelected = false;\n        if (q.type === 'single') isSelected = answers[q.id] === option;\n        if (q.type === 'multiple') isSelected = answers[q.id]?.includes(option);\n        if (isSelected) return 'border-red-500 bg-red-100';\n        return 'border-transparent';\n    };\n\n    if (q.type === 'fillInTheBlanks') {\n        const parts = q.text.split(/(\\[.*?\\])/g).filter(part => part);\n        let blankIndex = -1;\n        return (\n            <div key={q.id} className=\"bg-orange-50 p-4 sm:p-6 rounded-lg mb-6\">\n                <h3 className=\"font-semibold text-lg sm:text-xl text-gray-800 mb-4\">{index + 1}. Cümləni tamamlayın:</h3>\n                {q.imageUrl && <img src={q.imageUrl} alt=\"Question illustration\" className=\"my-4 rounded-lg max-h-60 w-full object-contain mx-auto\" onError={(e) => e.target.style.display = 'none'} />}\n                <div className=\"text-lg leading-loose\">\n                    {parts.map((part, i) => {\n                        if (part.startsWith('[') && part.endsWith(']')) {\n                            blankIndex++;\n                            const currentBlankIndex = blankIndex;\n                            const userAnswer = (answers[q.id] || [])[currentBlankIndex] || '';\n                            const correctAnswer = q.correctAnswers[currentBlankIndex] || '';\n                            let blankStyle = 'border-gray-400 focus:border-orange-500';\n                            if (isPracticeMode && isAnswerChecked) {\n                                const isBlankCorrect = userAnswer.trim().toLowerCase() === correctAnswer.trim().toLowerCase();\n                                blankStyle = isBlankCorrect ? 'border-green-500 bg-green-100' : 'border-red-500 bg-red-100';\n                            }\n\n                            return (\n                                <span key={i} className=\"inline-block\">\n                                    <input\n                                        type=\"text\"\n                                        value={userAnswer}\n                                        onChange={(e) => { const newAnswers = [...(answers[q.id] || [])]; newAnswers[currentBlankIndex] = e.target.value; handleAnswerChange(q.id, newAnswers); }}\n                                        className={`inline-block w-32 sm:w-40 mx-1 p-1 border-b-2 bg-transparent outline-none text-center ${blankStyle}`}\n                                        disabled={isSubmitting || (isPracticeMode && isAnswerChecked)}\n                                    />\n                                    {isPracticeMode && isAnswerChecked && userAnswer.trim().toLowerCase() !== correctAnswer.trim().toLowerCase() && (\n                                        <span className=\"text-xs text-green-600 font-semibold\">({correctAnswer})</span>\n                                    )}\n                                </span>\n                            );\n                        }\n                        return <span key={i}>{part}</span>;\n                    })}\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div key={q.id} className=\"bg-orange-50 p-4 sm:p-6 rounded-lg mb-6\">\n            <div className=\"flex justify-between items-start\">\n                <h3 className=\"font-semibold text-lg sm:text-xl text-gray-800 mb-4 flex-1\">{index + 1}. {q.text}</h3>\n                <button onClick={() => speakText(q.text)} className=\"text-gray-500 hover:text-orange-500 ml-2 sm:ml-4 p-2\"><SpeakerIcon /></button>\n            </div>\n            {q.audioUrl && (\n                <div className=\"my-4\">\n                    <audio controls src={q.audioUrl} className=\"w-full\">Your browser does not support the audio element.</audio>\n                </div>\n            )}\n            {q.imageUrl && <img src={q.imageUrl} alt=\"Question illustration\" className=\"my-4 rounded-lg max-h-60 w-full object-contain mx-auto\" onError={(e) => e.target.style.display = 'none'} />}\n            \n            {q.type === 'single' && optionsForCurrentQuestion.map((option, optIndex) => (\n                <div key={optIndex} className=\"mb-2\"><label className={`block p-3 rounded-lg hover:bg-orange-100 cursor-pointer border-2 ${getOptionClassName(option, optIndex)}`}><input type=\"radio\" name={q.id} value={option} checked={answers[q.id] === option} onChange={(e) => handleAnswerChange(q.id, e.target.value)} className=\"mr-3 h-4 w-4 text-orange-600 focus:ring-orange-500\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} />{option}</label></div>\n            ))}\n            {q.type === 'multiple' && optionsForCurrentQuestion.map((option, optIndex) => (\n                <div key={optIndex} className=\"mb-2\"><label className={`block p-3 rounded-lg hover:bg-orange-100 cursor-pointer border-2 ${getOptionClassName(option, optIndex)}`}><input type=\"checkbox\" name={q.id} value={option} checked={answers[q.id]?.includes(option)} onChange={(e) => { const curr = answers[q.id] || []; const next = e.target.checked ? [...curr, e.target.value] : curr.filter(a => a !== e.target.value); handleAnswerChange(q.id, next); }} className=\"mr-3 h-4 w-4 text-orange-600 rounded focus:ring-orange-500\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} />{option}</label></div>\n            ))}\n            {q.type === 'textInput' && <input type=\"text\" value={answers[q.id] || ''} onChange={(e) => handleAnswerChange(q.id, e.target.value)} className={`mt-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm p-3 ${isPracticeMode && isAnswerChecked ? (isAnswerCorrect(q, answers[q.id]) ? 'bg-green-100 border-green-500' : 'bg-red-100 border-red-500') : ''}`} placeholder=\"Cavabınızı daxil edin...\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} />}\n            {q.type === 'trueFalse' && (\n                <div className=\"flex flex-col sm:flex-row gap-3 mt-2\">\n                    <label className={`block p-3 rounded-lg hover:bg-orange-100 cursor-pointer flex-1 text-center border-2 ${isPracticeMode && isAnswerChecked && q.correctAnswer === true ? 'border-green-500 bg-green-100' : (isPracticeMode && isAnswerChecked && answers[q.id] === true ? 'border-red-500 bg-red-100' : 'border-transparent')}`}><input type=\"radio\" name={q.id} checked={answers[q.id] === true} onChange={() => handleAnswerChange(q.id, true)} className=\"mr-3 h-4 w-4 text-orange-600 focus:ring-orange-500\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} /> Doğru</label>\n                    <label className={`block p-3 rounded-lg hover:bg-orange-100 cursor-pointer flex-1 text-center border-2 ${isPracticeMode && isAnswerChecked && q.correctAnswer === false ? 'border-green-500 bg-green-100' : (isPracticeMode && isAnswerChecked && answers[q.id] === false ? 'border-red-500 bg-red-100' : 'border-transparent')}`}><input type=\"radio\" name={q.id} checked={answers[q.id] === false} onChange={() => handleAnswerChange(q.id, false)} className=\"mr-3 h-4 w-4 text-orange-600 focus:ring-orange-500\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} /> Yanlış</label>\n                </div>\n            )}\n            {q.type === 'ordering' && (\n                <div className=\"space-y-2 mt-4\">\n                    {(answers[q.id] || []).map((item, itemIndex) => (\n                        <div key={itemIndex} className={`flex items-center p-3 rounded-lg border-2 ${isPracticeMode && isAnswerChecked ? (item === q.orderItems[itemIndex] ? 'border-green-500 bg-green-100' : 'border-red-500 bg-red-100') : 'bg-white border-gray-200'}`}>\n                            <span className=\"flex-grow text-gray-800\">{item}</span>\n                            <div className=\"flex gap-1\">\n                                <Button variant=\"secondary\" size=\"sm\" className=\"!p-2\" onClick={() => handleMoveItem(q.id, itemIndex, -1)} disabled={itemIndex === 0 || isSubmitting || (isPracticeMode && isAnswerChecked)}>\n                                    <ArrowUpIcon />\n                                </Button>\n                                <Button variant=\"secondary\" size=\"sm\" className=\"!p-2\" onClick={() => handleMoveItem(q.id, itemIndex, 1)} disabled={itemIndex === (answers[q.id] || []).length - 1 || isSubmitting || (isPracticeMode && isAnswerChecked)}>\n                                    <ArrowDownIcon />\n                                </Button>\n                            </div>\n                        </div>\n                    ))}\n                    {isPracticeMode && isAnswerChecked && JSON.stringify(answers[q.id]) !== JSON.stringify(q.orderItems) && (\n                        <p className=\"text-sm text-gray-600 mt-2\">Düzgün sıralama: {q.orderItems.join(', ')}</p>\n                    )}\n                </div>\n            )}\n            {q.type === 'open' && (\n                <textarea\n                    value={answers[q.id] || ''}\n                    onChange={(e) => handleAnswerChange(q.id, e.target.value)}\n                    className=\"mt-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm p-3\"\n                    placeholder=\"Cavabınızı bura daxil edin...\"\n                    rows=\"5\"\n                    disabled={(isPracticeMode && isAnswerChecked) || isSubmitting}\n                />\n            )}\n            {isPracticeMode && isAnswerChecked && q.explanation && (\n                <div className=\"mt-4 p-4 bg-blue-50 border-l-4 border-blue-400\">\n                    <div className=\"flex items-start text-sm text-blue-800\">\n                        <span className=\"mr-2 mt-1 flex-shrink-0\"><LightbulbIcon /></span>\n                        <div>\n                            <strong className=\"font-semibold\">İzah:</strong>\n                            <p className=\"mt-1 whitespace-pre-wrap\">{q.explanation}</p>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\n// --- Main Component ---\nconst TakeQuizPage = ({ quiz, user, onSubmit, mode = 'exam' }) => {\n    const navigate = useNavigate();\n    \n    const [answers, setAnswers] = useState(() => {\n        const initialState = {};\n        (quiz.questions || []).forEach(q => {\n            if (q.type === 'textInput' || q.type === 'open') {\n                initialState[q.id] = '';\n            }\n        });\n        return initialState;\n    });\n\n    const [deadline] = useState(() => Date.now() + (quiz.timeLimit || 10) * 60 * 1000);\n    const [timeLeft, setTimeLeft] = useState((quiz.timeLimit || 10) * 60);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [isAnswerChecked, setIsAnswerChecked] = useState(false);\n\n    // --- NEW: Time tracking ---\n    const questionStartTimeRef = useRef(null);\n    const timePerQuestionRef = useRef({});\n\n    const isPracticeMode = mode === 'practice';\n    const displayAll = quiz.display_all_questions && !isPracticeMode;\n\n    const quizQuestions = useMemo(() => {\n        return quiz.shuffleQuestions ? [...quiz.questions].sort(() => Math.random() - 0.5) : quiz.questions;\n    }, [quiz]);\n\n    const shuffledOptions = useMemo(() => {\n        if (!quiz.shuffleOptions) return {};\n        const shuffled = {};\n        quizQuestions.forEach(q => {\n            if (['single', 'multiple'].includes(q.type)) {\n                shuffled[q.id] = [...q.options].sort(() => Math.random() - 0.5);\n            }\n        });\n        return shuffled;\n    }, [quizQuestions, quiz.shuffleOptions]);\n\n    const recordTimeSpent = useCallback(() => {\n        if (questionStartTimeRef.current && quizQuestions[currentQuestionIndex]) {\n            const questionId = quizQuestions[currentQuestionIndex].id;\n            const timeSpent = (Date.now() - questionStartTimeRef.current) / 1000; // in seconds\n            timePerQuestionRef.current[questionId] = (timePerQuestionRef.current[questionId] || 0) + timeSpent;\n        }\n        questionStartTimeRef.current = Date.now();\n    }, [currentQuestionIndex, quizQuestions]);\n\n    useEffect(() => {\n        // Start timer for the current question\n        questionStartTimeRef.current = Date.now();\n    }, [currentQuestionIndex]);\n\n    useEffect(() => {\n        // This effect handles recording time if the user navigates away\n        const questionsRef = quizQuestions;\n        const indexRef = currentQuestionIndex;\n        const submittingRef = isSubmitting;\n\n        return () => {\n            if (!submittingRef && questionsRef[indexRef]) {\n                recordTimeSpent();\n            }\n        };\n    }, [isSubmitting, quizQuestions, currentQuestionIndex, recordTimeSpent]);\n\n    const handleSubmitQuiz = useCallback(() => {\n        if (isSubmitting) return;\n        recordTimeSpent(); // Record time for the last question\n        setIsSubmitting(true);\n        if (onSubmit) {\n            onSubmit(answers, quizQuestions, timePerQuestionRef.current);\n        }\n    }, [isSubmitting, onSubmit, answers, quizQuestions, recordTimeSpent]);\n\n    useEffect(() => {\n        if (isPracticeMode || isSubmitting) {\n            return;\n        }\n\n        let animationFrameId;\n\n        const updateTimer = () => {\n            const remaining = Math.max(0, Math.round((deadline - Date.now()) / 1000));\n\n            setTimeLeft(prevTime => {\n                // Обновляем состояние, только если значение секунды изменилось, чтобы избежать лишних ререндеров\n                return prevTime !== remaining ? remaining : prevTime;\n            });\n\n            if (remaining > 0) {\n                animationFrameId = requestAnimationFrame(updateTimer);\n            } else {\n                handleSubmitQuiz();\n            }\n        };\n\n        animationFrameId = requestAnimationFrame(updateTimer);\n\n        return () => cancelAnimationFrame(animationFrameId);\n    }, [isPracticeMode, isSubmitting, deadline, handleSubmitQuiz]);\n\n    const handleAnswerChange = (questionId, answer) => {\n        if (isPracticeMode && isAnswerChecked) return;\n        setAnswers(prev => ({ ...prev, [questionId]: answer }));\n    };\n\n    const handleCheckAnswer = () => setIsAnswerChecked(true);\n\n    const handleNextQuestion = () => {\n        recordTimeSpent();\n        setIsAnswerChecked(false);\n        setCurrentQuestionIndex(prev => prev + 1);\n    };\n\n    const formatTime = (seconds) => `${Math.floor(seconds / 60)}:${('0' + seconds % 60).slice(-2)}`;\n\n    if (!quizQuestions || quizQuestions.length === 0) return <Card><p>Bu testdə hələlik sual yoxdur.</p></Card>;\n\n    const progress = ((currentQuestionIndex + 1) / quizQuestions.length) * 100;\n\n    return (\n        <div className=\"animate-fade-in\">\n            <Card>\n                <div className=\"flex flex-col sm:flex-row justify-between items-center mb-2 gap-4\">\n                    <h1 className=\"text-xl sm:text-2xl font-bold text-orange-600 text-center sm:text-left\">{quiz.title}</h1>\n                    {!isPracticeMode && <div className=\"text-2xl font-bold text-orange-500 bg-orange-100 px-4 py-2 rounded-lg w-full sm:w-auto text-center\">{formatTime(timeLeft)}</div>}\n                    {isPracticeMode && <div className=\"text-lg font-bold text-blue-500 bg-blue-100 px-4 py-2 rounded-lg w-full sm:w-auto text-center\">Məşq Rejimi</div>}\n                </div>\n                {!isPracticeMode && user && <p className=\"text-center sm:text-left text-gray-600 mb-4\">Uğurlar, {user.first_name}!</p>}\n                {!displayAll && !isPracticeMode && <div className=\"w-full bg-gray-200 rounded-full h-2.5 mb-6\"><div className=\"bg-gradient-to-r from-orange-400 to-red-500 h-2.5 rounded-full transition-all duration-500\" style={{ width: `${progress}%` }}></div></div>}\n                \n                {displayAll ? (\n                    quizQuestions.map((q, index) => (\n                        <QuestionRenderer key={q.id} q={q} index={index} answers={answers} handleAnswerChange={handleAnswerChange} isPracticeMode={false} isAnswerChecked={false} shuffledOptions={shuffledOptions} isSubmitting={isSubmitting} />\n                    ))\n                ) : (\n                    <QuestionRenderer q={quizQuestions[currentQuestionIndex]} index={currentQuestionIndex} answers={answers} handleAnswerChange={handleAnswerChange} isPracticeMode={isPracticeMode} isAnswerChecked={isAnswerChecked} shuffledOptions={shuffledOptions} isSubmitting={isSubmitting} />\n                )}\n\n                <div className=\"mt-8 flex flex-col sm:flex-row justify-center items-center gap-4\">\n                    {displayAll ? (\n                        <Button onClick={handleSubmitQuiz} disabled={isSubmitting} className=\"w-full sm:w-auto\">\n                            {isSubmitting ? 'Göndərilir...' : <><CheckIcon /> Testi Bitir</>}\n                        </Button>\n                    ) : isPracticeMode ? (\n                        isAnswerChecked ? (\n                            currentQuestionIndex < quizQuestions.length - 1 ? (\n                                <Button onClick={handleNextQuestion} className=\"w-full sm:w-auto\">Növbəti <ArrowRightIcon /></Button>\n                            ) : (\n                                <Button onClick={() => navigate('/')} className=\"w-full sm:w-auto\"><CheckIcon /> Məşqi bitir</Button>\n                            )\n                        ) : (\n                            <Button onClick={handleCheckAnswer} disabled={answers[quizQuestions[currentQuestionIndex].id] === undefined} className=\"w-full sm:w-auto\">Yoxla</Button>\n                        )\n                    ) : (\n                        <div className=\"w-full flex justify-between items-center\">\n                            {quiz.allow_back_navigation === true ? (\n                                <Button onClick={() => { recordTimeSpent(); setCurrentQuestionIndex(i => i - 1); }} disabled={currentQuestionIndex === 0 || isSubmitting} variant=\"secondary\"><ArrowLeftIcon /> Geri</Button>\n                            ) : (\n                                <div /> // Empty div for spacing\n                            )}\n                            <span>{currentQuestionIndex + 1} / {quizQuestions.length}</span>\n                            {currentQuestionIndex < quizQuestions.length - 1 ? (\n                                <Button onClick={() => { recordTimeSpent(); setCurrentQuestionIndex(i => i + 1); }} disabled={isSubmitting}>İrəli <ArrowRightIcon /></Button>\n                            ) : (\n                                <Button onClick={handleSubmitQuiz} disabled={isSubmitting}>\n                                    {isSubmitting ? 'Göndərilir...' : <><CheckIcon /> Bitir</>}\n                                </Button>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </Card>\n        </div>\n    );\n};\n\nexport default TakeQuizPage;\n","import React from 'react';\r\n\r\nconst Card = ({ children, className = '' }) => (\r\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\r\n);\r\n\r\nexport default Card;"],"names":["isAnswerCorrect","question","userAnswer","undefined","type","options","correctAnswers","correctOptions","map","i","sort","userOptions","Array","isArray","JSON","stringify","trim","toLowerCase","correctAnswer","orderItems","length","every","answer","index","QuestionRenderer","_ref","q","answers","handleAnswerChange","isPracticeMode","isAnswerChecked","shuffledOptions","isSubmitting","useEffect","id","shuffled","Math","random","handleMoveItem","questionId","direction","currentItems","newItems","targetIndex","optionsForCurrentQuestion","shuffleOptions","getOptionClassName","option","optIndex","_answers$q$id","isCorrect","includes","isSelected","parts","text","split","filter","part","blankIndex","_jsxs","className","children","imageUrl","_jsx","src","alt","onError","e","target","style","display","startsWith","endsWith","currentBlankIndex","blankStyle","value","onChange","newAnswers","concat","disabled","onClick","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","lang","speak","alert","speakText","SpeakerIcon","audioUrl","controls","name","checked","_answers$q$id2","curr","next","a","placeholder","item","itemIndex","Button","variant","size","ArrowUpIcon","ArrowDownIcon","join","rows","explanation","LightbulbIcon","_ref2","quiz","user","onSubmit","mode","navigate","useNavigate","setAnswers","useState","initialState","questions","forEach","deadline","Date","now","timeLimit","timeLeft","setTimeLeft","currentQuestionIndex","setCurrentQuestionIndex","setIsSubmitting","setIsAnswerChecked","questionStartTimeRef","useRef","timePerQuestionRef","displayAll","display_all_questions","quizQuestions","useMemo","shuffleQuestions","recordTimeSpent","useCallback","current","timeSpent","questionsRef","indexRef","submittingRef","handleSubmitQuiz","animationFrameId","updateTimer","remaining","max","round","prevTime","requestAnimationFrame","cancelAnimationFrame","prev","_objectSpread","Card","progress","title","seconds","floor","slice","first_name","width","_Fragment","CheckIcon","handleNextQuestion","ArrowRightIcon","handleCheckAnswer","allow_back_navigation","ArrowLeftIcon"],"sourceRoot":""}