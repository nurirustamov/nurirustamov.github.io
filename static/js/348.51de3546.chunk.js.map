{"version":3,"file":"static/js/348.51de3546.chunk.js","mappings":"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","sources":["components/ui/Card.js","pages/QuizResultPage.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ children, className = '' }) => (\r\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\r\n);\r\n\r\nexport default Card;","import React, { useState, useEffect } from 'react';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport { ArrowLeftIcon, EyeIcon, TrophyIcon, ClockIcon, RefreshIcon } from '../assets/icons';\nimport { supabase } from '../supabaseClient';\n\nconst QuizResultPage = ({ lastResult, onBack, onReview, onReviewPractice }) => {\n    const {\n        score,\n        totalPoints,\n        correctAnswersCount,\n        totalQuestions,\n        userName,\n        userSurname,\n        id: resultId,\n        quizId,\n        status\n    } = lastResult;\n\n    const [leaderboard, setLeaderboard] = useState({ rank: 0, totalParticipants: 0, isLoading: true });\n\n    const percentage = totalPoints > 0 ? Math.round((score / totalPoints) * 100) : 0;\n\n    useEffect(() => {\n        if (status === 'pending_review' || !quizId) {\n            setLeaderboard({ rank: 0, totalParticipants: 0, isLoading: false });\n            return;\n        }\n\n        const fetchLeaderboard = async () => {\n            const { data: results, error } = await supabase\n                .from('quiz_results')\n                .select('id, score, created_at')\n                .eq('quizId', quizId)\n                .eq('status', 'completed');\n\n            if (error) {\n                console.error(\"Error fetching quiz leaderboard:\", error);\n                setLeaderboard({ rank: 0, totalParticipants: 0, isLoading: false });\n                return;\n            }\n\n            const sortedResults = results.sort((a, b) => b.score - a.score || new Date(a.created_at) - new Date(b.created_at));\n            \n            const rank = sortedResults.findIndex(r => r.id === resultId) + 1;\n            \n            setLeaderboard({ rank, totalParticipants: sortedResults.length, isLoading: false });\n        };\n\n        fetchLeaderboard();\n    }, [quizId, resultId, status]);\n\n    let message = '';\n    let messageColor = 'text-gray-800';\n\n    if (status === 'pending_review') {\n        message = 'Testdə açıq suallar olduğu üçün nəticəniz müəllim tərəfindən yoxlanıldıqdan sonra göstəriləcək.';\n        messageColor = 'text-blue-600';\n    } else if (percentage === 100) {\n        message = 'Əla! Bütün suallara düzgün cavab verdiniz!';\n        messageColor = 'text-green-600';\n    } else if (percentage >= 75) {\n        message = 'Yaxşı işdir! Siz əla bacardınız.';\n        messageColor = 'text-blue-600';\n    } else if (percentage >= 50) {\n        message = 'Pis deyil, amma daha yaxşı ola bilər.';\n        messageColor = 'text-yellow-600';\n    } else {\n        message = 'Yenidən cəhd etməyə dəyər.';\n        messageColor = 'text-red-600';\n    }\n\n    const circumference = 2 * Math.PI * 70;\n    const strokeDashoffset = circumference - (percentage / 100) * circumference;\n\n    return (\n        <div className=\"animate-fade-in text-center\">\n            <Card className=\"p-4 sm:p-8\">\n                <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800\">Testin Nəticələri</h1>\n                {userName && <p className=\"text-lg text-gray-600 mt-2\">Nəticələr: {userName} {userSurname}</p>}\n                \n                {status !== 'pending_review' ? (\n                    <>\n                        <div className=\"my-6 sm:my-8 relative inline-flex items-center justify-center\">\n                            <svg className=\"w-48 h-48\" viewBox=\"0 0 180 180\">\n                                <circle className=\"text-gray-200\" strokeWidth=\"14\" stroke=\"currentColor\" fill=\"transparent\" r=\"70\" cx=\"90\" cy=\"90\" />\n                                <circle\n                                    className=\"text-orange-500\"\n                                    strokeWidth=\"14\"\n                                    stroke=\"currentColor\"\n                                    fill=\"transparent\"\n                                    r=\"70\" cx=\"90\" cy=\"90\"\n                                    strokeLinecap=\"round\"\n                                    style={{ strokeDasharray: circumference, strokeDashoffset, transition: 'stroke-dashoffset 0.8s ease-out' }}\n                                    transform=\"rotate(-90 90 90)\"\n                                />\n                            </svg>\n                            <div className=\"absolute flex flex-col items-center justify-center w-full\">\n                                <span className=\"text-4xl sm:text-5xl font-bold text-orange-500\">{percentage}%</span>\n                                <span className=\"text-lg text-gray-600 mt-1\">{score} / {totalPoints} bal</span>\n                                <span className=\"text-sm text-gray-500 mt-1\">({correctAnswersCount} / {totalQuestions} düzgün)</span>\n                            </div>\n                        </div>\n                        {leaderboard.isLoading ? (\n                            <div className=\"h-10 flex items-center justify-center mb-8\">\n                                <p className=\"text-gray-500\">Reytinq hesablanır...</p>\n                            </div>\n                        ) : leaderboard.rank > 0 && leaderboard.totalParticipants > 0 && (\n                            <div className=\"mb-8\">\n                                <div className=\"inline-flex items-center bg-yellow-100 text-yellow-800 font-semibold px-4 py-2 rounded-full\">\n                                    <TrophyIcon className=\"w-6 h-6 mr-2\" />\n                                    <span>Sizin bu test üzrə reytinqiniz: {leaderboard.totalParticipants} iştirakçı arasında <strong>{leaderboard.rank}-ci yer</strong></span>\n                                </div>\n                            </div>\n                        )}\n                    </>\n                ) : (\n                    <div className=\"my-12\">\n                        <div className=\"inline-flex items-center justify-center bg-blue-100 text-blue-800 rounded-full w-24 h-24\">\n                            <ClockIcon className=\"w-12 h-12\" />\n                        </div>\n                    </div>\n                )}\n\n                <p className={`text-lg sm:text-xl font-semibold ${messageColor} mb-8`}>{message}</p>\n                \n                <div className=\"flex flex-col sm:flex-row justify-center gap-4 mt-6\">\n                    <Button onClick={onBack} variant=\"secondary\" className=\"w-full sm:w-auto\">\n                        <ArrowLeftIcon />\n                        Siyahıya qayıt\n                    </Button>\n                    <Button onClick={onReview} className=\"w-full sm:w-auto\">\n                        <EyeIcon />\n                        Cavablara bax\n                    </Button>\n                    {status !== 'pending_review' && percentage < 100 && (\n                        <Button onClick={() => onReviewPractice(lastResult)} variant=\"primary\" className=\"w-full sm:w-auto\">\n                            <RefreshIcon />\n                            Səhvlər üzərində işlə\n                        </Button>\n                    )}\n                </div>\n            </Card>\n        </div>\n    );\n};\n\nexport default QuizResultPage;\n"],"names":["_ref","children","className","_jsx","concat","lastResult","onBack","onReview","onReviewPractice","score","totalPoints","correctAnswersCount","totalQuestions","userName","userSurname","id","resultId","quizId","status","leaderboard","setLeaderboard","useState","rank","totalParticipants","isLoading","percentage","Math","round","useEffect","async","data","results","error","supabase","from","select","eq","console","sortedResults","sort","a","b","Date","created_at","findIndex","r","length","fetchLeaderboard","message","messageColor","circumference","PI","strokeDashoffset","_jsxs","Card","_Fragment","viewBox","strokeWidth","stroke","fill","cx","cy","strokeLinecap","style","strokeDasharray","transition","transform","TrophyIcon","ClockIcon","Button","onClick","variant","ArrowLeftIcon","EyeIcon","RefreshIcon"],"sourceRoot":""}