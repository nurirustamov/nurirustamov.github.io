{"version":3,"file":"static/js/369.35c22ac9.chunk.js","mappings":"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","sources":["pages/PastQuizReviewPage.js","components/ui/Card.js","components/Comments.js"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport { ArrowLeftIcon, CheckCircleIcon, XCircleIcon, ClockIcon, LightbulbIcon } from '../assets/icons';\nimport Comments from '../components/Comments';\n\nconst formatDate = (dateString) => {\n    if (!dateString) return 'N/A';\n    const date = new Date(dateString);\n    if (isNaN(date)) return 'Invalid Date';\n    return date.toLocaleString('az-AZ', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' });\n};\n\nconst PastQuizReviewPage = ({ result, quiz, profile, fetchComments, postComment, deleteComment }) => {\n\n    if (!result || !quiz) {\n        return (\n            <Card className=\"text-center\">\n                <p className=\"text-red-500\">Nəticə və ya test məlumatı tapılmadı.</p>\n                <Link to=\"/stats\">\n                    <Button variant=\"secondary\" className=\"mt-4\">Statistikaya qayıt</Button>\n                </Link>\n            </Card>\n        );\n    }\n\n    const studentName = `${result.userName} ${result.userSurname}`;\n\n    const getQuestionStatusInfo = (question, userAnswer) => {\n        // For 'open' questions, the logic depends on whether it's graded\n        if (question.type === 'open') {\n            // Graded: userAnswer is an object { answer: '...', score: X }\n            if (typeof userAnswer === 'object' && userAnswer !== null && userAnswer.hasOwnProperty('score')) {\n                return {\n                    status: userAnswer.score > 0 ? 'correct' : 'incorrect',\n                    userAnswerText: userAnswer.answer || 'Cavab yoxdur',\n                    correctAnswerText: '', // No correct answer to show, just the score\n                    manualScore: userAnswer.score\n                };\n            }\n            // Pending review: userAnswer is a string\n            return {\n                status: 'pending',\n                userAnswerText: userAnswer || 'Cavab yoxdur',\n                correctAnswerText: 'Yoxlanılır...',\n                manualScore: null\n            };\n        }\n\n        // Logic for other auto-graded question types\n        let isCorrect = false;\n        let correctAnswerText = '';\n        let userAnswerText = '';\n\n        if (question.type === 'single') {\n            isCorrect = userAnswer === question.options[question.correctAnswers[0]];\n            correctAnswerText = question.options[question.correctAnswers[0]];\n            userAnswerText = userAnswer || 'Cavab yoxdur';\n        } else if (question.type === 'multiple') {\n            const correct = question.correctAnswers.map(i => question.options[i]).sort();\n            const user = userAnswer ? [...userAnswer].sort() : [];\n            isCorrect = JSON.stringify(correct) === JSON.stringify(user);\n            correctAnswerText = correct.join(', ');\n            userAnswerText = userAnswer && userAnswer.length > 0 ? userAnswer.join(', ') : 'Cavab yoxdur';\n        } else if (question.type === 'textInput') {\n            isCorrect = userAnswer && question.correctAnswers[0].trim().toLowerCase() === userAnswer.trim().toLowerCase();\n            correctAnswerText = question.correctAnswers[0];\n            userAnswerText = userAnswer || 'Cavab yoxdur';\n        } else if (question.type === 'trueFalse') {\n            isCorrect = userAnswer === question.correctAnswer;\n            correctAnswerText = question.correctAnswer ? 'Doğru' : 'Yanlış';\n            userAnswerText = userAnswer === true ? 'Doğru' : (userAnswer === false ? 'Yanlış' : 'Cavab yoxdur');\n        } else if (question.type === 'ordering') {\n            isCorrect = JSON.stringify(userAnswer) === JSON.stringify(question.orderItems);\n            correctAnswerText = question.orderItems.map((item, i) => `${i + 1}. ${item}`).join('; ');\n            userAnswerText = userAnswer && userAnswer.length > 0 ? userAnswer.map((item, i) => `${i + 1}. ${item}`).join('; ') : 'Cavab yoxdur';\n        } else if (question.type === 'fillInTheBlanks') {\n            isCorrect = Array.isArray(userAnswer) && userAnswer.length === question.correctAnswers.length && userAnswer.every((answer, index) => (answer || '').trim().toLowerCase() === (question.correctAnswers[index] || '').trim().toLowerCase());\n            correctAnswerText = question.correctAnswers.join(', ');\n            userAnswerText = userAnswer && userAnswer.length > 0 ? userAnswer.join(', ') : 'Cavab yoxdur';\n        }\n\n        return {\n            status: isCorrect ? 'correct' : 'incorrect',\n            userAnswerText,\n            correctAnswerText,\n            manualScore: null\n        };\n    };\n\n    const statusStyles = {\n        correct: { container: 'bg-green-50 border-l-4 border-green-400', icon: <CheckCircleIcon />, iconColor: 'text-green-500', textColor: 'text-green-700' },\n        incorrect: { container: 'bg-red-50 border-l-4 border-red-400', icon: <XCircleIcon />, iconColor: 'text-red-500', textColor: 'text-red-700' },\n        pending: { container: 'bg-yellow-50 border-l-4 border-yellow-400', icon: <ClockIcon />, iconColor: 'text-yellow-500', textColor: 'text-yellow-700' },\n    };\n\n    return (\n        <div className=\"animate-fade-in\">\n            <div className=\"flex justify-between items-center mb-6\">\n                 <h1 className=\"text-xl sm:text-2xl font-bold text-orange-600\">\n                    Cavabların təhlili: {quiz.title}\n                </h1>\n                <Link to={`/student/${result.user_id}`}>\n                    <Button variant=\"secondary\"><ArrowLeftIcon /> Tələbənin hesabatına qayıt</Button>\n                </Link>\n            </div>\n            <Card>\n                <div className=\"flex justify-between items-center mb-4 pb-4 border-b\">\n                    <div>\n                        <p><strong>Tələbə:</strong> {studentName}</p>\n                        <p><strong>Tarix:</strong> {formatDate(result.created_at)}</p>\n                    </div>\n                    <div className=\"text-right\">\n                        <p><strong>Nəticə:</strong> {result.percentage}%</p>\n                        <p><strong>Bal:</strong> {result.score} / {result.totalPoints}</p>\n                    </div>\n                </div>\n\n                <div className=\"space-y-6\">\n                    {result.questionOrder.map((q, index) => {\n                        const originalQuestion = (quiz.questions || []).find(origQ => origQ.id === q.id);\n                        if (!originalQuestion) return (\n                            <div key={q.id} className=\"p-3 sm:p-4 rounded-lg bg-gray-100 border-l-4 border-gray-400\">\n                                <p className=\"text-gray-600\">Bu sual testdən silinib.</p>\n                            </div>\n                        );\n\n                        const userAnswer = result.userAnswers[q.id];\n                        const { status, userAnswerText, correctAnswerText, manualScore } = getQuestionStatusInfo(originalQuestion, userAnswer);\n                        const styles = statusStyles[status];\n\n                        return (\n                            <div key={q.id} className={`p-3 sm:p-4 rounded-lg ${styles.container}`}>\n                                <div className=\"flex items-start\">\n                                    <span className={`mr-3 mt-1 ${styles.iconColor}`}>{styles.icon}</span>\n                                    <h3 className=\"font-semibold text-base sm:text-lg text-gray-800 flex-1\">{index + 1}. {originalQuestion.text}</h3>\n                                </div>\n                                \n                                {result.time_per_question && result.time_per_question[q.id] !== undefined && (\n                                    <div className=\"pl-8 mt-2 flex items-center text-xs text-gray-500\">\n                                        <ClockIcon className=\"w-4 h-4 mr-1\" />\n                                        <span>Sərf olunan vaxt: {Math.round(result.time_per_question[q.id])} saniyə</span>\n                                    </div>\n                                )}\n                                {originalQuestion.imageUrl && (\n                                    <div className=\"pl-8 mt-3\"><img src={originalQuestion.imageUrl} alt=\"Question illustration\" className=\"rounded-lg max-h-40 sm:max-h-60 w-auto mx-auto\" onError={(e) => e.target.style.display = 'none'} /></div>\n                                )}\n\n                                {originalQuestion.type === 'fillInTheBlanks' ? (\n                                    <div className=\"mt-3 pl-8 text-lg leading-loose\">\n                                        {originalQuestion.text.split(/(\\[.*?\\])/g).filter(part => part).map((part, i) => {\n                                            if (part.startsWith('[') && part.endsWith(']')) {\n                                                const blankIndex = originalQuestion.text.substring(0, originalQuestion.text.indexOf(part)).split('[').length - 1;\n                                                const userAnswerForBlank = (userAnswer || [])[blankIndex] || '';\n                                                const correctAnswerForBlank = originalQuestion.correctAnswers[blankIndex] || '';\n                                                const isCorrect = userAnswerForBlank.trim().toLowerCase() === correctAnswerForBlank.trim().toLowerCase();\n                                                return (\n                                                    <span key={i} className={`inline-block font-semibold px-2 py-1 rounded-md text-sm ${isCorrect ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}`}>\n                                                        {userAnswerForBlank || '___'}\n                                                        {!isCorrect && <span className=\"ml-2 text-xs text-green-700 font-bold\">({correctAnswerForBlank})</span>}\n                                                    </span>\n                                                );\n                                            }\n                                            return <span key={i}>{part}</span>;\n                                        })}\n                                    </div>\n                                ) : (\n                                    <div className=\"mt-3 pl-8 space-y-2 text-sm sm:text-base\">\n                                        <p>\n                                            <strong>Tələbənin cavabı:</strong>{' '}\n                                            <span className={`${styles.textColor} font-medium`}>{userAnswerText}</span>\n                                        </p>\n                                        {status === 'incorrect' && (\n                                            <p>\n                                                <strong>Düzgün cavab:</strong>{' '}\n                                                <span className=\"text-green-700 font-medium\">{correctAnswerText}</span>\n                                            </p>\n                                        )}\n                                        {status === 'pending' && (\n                                            <p className=\"font-semibold text-yellow-800\">({correctAnswerText})</p>\n                                        )}\n                                        {manualScore !== null && (\n                                            <p>\n                                                <strong>Yoxlayan tərəfindən verilən bal:</strong>{' '}\n                                                <span className=\"font-bold text-blue-600\">{manualScore} / {originalQuestion.points}</span>\n                                            </p>\n                                        )}\n                                    </div>\n                                )}\n\n                                {originalQuestion.explanation && (\n                                    <div className=\"mt-4 pt-3 pl-8 border-t border-gray-300/70\">\n                                        <div className=\"flex items-start text-sm text-blue-800\">\n                                            <span className=\"mr-2 mt-1 flex-shrink-0\"><LightbulbIcon /></span>\n                                            <div><strong className=\"font-semibold\">İzah:</strong><p className=\"mt-1 whitespace-pre-wrap\">{originalQuestion.explanation}</p></div>\n                                        </div>\n                                    </div>\n                                )}\n                                <div className=\"mt-4 pt-4 pl-8 border-t border-gray-300/70\">\n                                    <Comments \n                                        targetId={originalQuestion.id.toString()} \n                                        targetType=\"question\"\n                                        profile={profile} \n                                        fetchComments={fetchComments} \n                                        postComment={postComment} \n                                        deleteComment={deleteComment} \n                                    />\n                                </div>\n                            </div>\n                        );\n                    })}\n                </div>\n            </Card>\n        </div>\n    );\n};\n\nexport default PastQuizReviewPage;\n","import React from 'react';\r\n\r\nconst Card = ({ children, className = '' }) => (\r\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\r\n);\r\n\r\nexport default Card;","import React, { useState, useMemo, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport Button from './ui/Button';\r\nimport { ReplyIcon, TrashIcon } from '../assets/icons';\r\n\r\nconst Comment = ({ comment, onReply, onDelete, profile }) => {\r\n    const [showReplyForm, setShowReplyForm] = useState(false);\r\n    const [replyContent, setReplyContent] = useState('');\r\n\r\n    const handleReplySubmit = (e) => {\r\n        e.preventDefault();\r\n        if (!replyContent.trim()) return;\r\n        onReply(replyContent, comment.id);\r\n        setReplyContent('');\r\n        setShowReplyForm(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col gap-2 p-3 rounded-lg bg-white shadow-sm\">\r\n            <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-2\">\r\n                    <div className=\"w-8 h-8 rounded-full bg-orange-200 flex items-center justify-center font-bold text-orange-600\">\r\n                        {comment.profiles.first_name?.[0] || 'U'}\r\n                    </div>\r\n                    <span className=\"font-semibold text-gray-800\">{comment.profiles.first_name} {comment.profiles.last_name}</span>\r\n                </div>\r\n                <span className=\"text-xs text-gray-400\">{new Date(comment.created_at).toLocaleString()}</span>\r\n            </div>\r\n            <p className=\"text-gray-700 pl-10\">{comment.content}</p>\r\n            <div className=\"flex items-center justify-end gap-2 pl-10\">\r\n                {profile && <Button variant=\"secondary\" size=\"sm\" onClick={() => setShowReplyForm(!showReplyForm)}><ReplyIcon /> Cavab ver</Button>}\r\n                {profile?.id === comment.user_id && <Button variant=\"danger\" size=\"sm\" onClick={() => onDelete(comment.id)}><TrashIcon /></Button>}\r\n            </div>\r\n            {showReplyForm && (\r\n                <form onSubmit={handleReplySubmit} className=\"pl-10 mt-2 flex gap-2\">\r\n                    <input \r\n                        type=\"text\" \r\n                        value={replyContent}\r\n                        onChange={(e) => setReplyContent(e.target.value)}\r\n                        placeholder={`Cavab verilir: ${comment.profiles.first_name}...`}\r\n                        className=\"flex-grow mt-1 block w-full rounded-md border-gray-300 shadow-sm text-sm\"\r\n                    />\r\n                    <Button type=\"submit\" size=\"sm\">Göndər</Button>\r\n                </form>\r\n            )}\r\n            {comment.children && comment.children.length > 0 && (\r\n                <div className=\"pl-6 border-l-2 border-orange-100 mt-2 space-y-3\">\r\n                    {comment.children.map(child => (\r\n                        <Comment key={child.id} comment={child} onReply={onReply} onDelete={onDelete} profile={profile} />\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Comments = ({ targetId, targetType, profile, fetchComments, postComment, deleteComment }) => {\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        const loadComments = async () => {\r\n            const fetchedComments = await fetchComments(targetId, targetType);\r\n            setComments(fetchedComments || []);\r\n        };\r\n        if (targetId && targetType) {\r\n            loadComments();\r\n        }\r\n    }, [targetId, targetType, fetchComments]);\r\n\r\n    const handlePostComment = async (content, parentId = null) => {\r\n        const targetUrl = `${location.pathname}#comment-${parentId || 'new'}`;\r\n        const postedComment = await postComment(targetId, targetType, content, parentId, targetUrl);\r\n        if (postedComment) {\r\n            const fetchedComments = await fetchComments(targetId, targetType);\r\n            setComments(fetchedComments || []);\r\n            if (!parentId) {\r\n                setNewComment('');\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDeleteComment = async (commentId) => {\r\n        const success = await deleteComment(commentId);\r\n        if (success) {\r\n            setComments(prev => prev.filter(c => c.id !== commentId));\r\n        }\r\n    };\r\n\r\n    const commentTree = useMemo(() => {\r\n        const map = {};\r\n        const roots = [];\r\n        comments.forEach(comment => {\r\n            map[comment.id] = { ...comment, children: [] };\r\n        });\r\n        comments.forEach(comment => {\r\n            if (comment.parent_comment_id && map[comment.parent_comment_id]) {\r\n                map[comment.parent_comment_id].children.push(map[comment.id]);\r\n            } else {\r\n                roots.push(map[comment.id]);\r\n            }\r\n        });\r\n        return roots;\r\n    }, [comments]);\r\n\r\n    return (\r\n        <div className=\"space-y-6\">\r\n            <h3 className=\"text-xl font-bold text-gray-800\">Şərhlər ({comments.length})</h3>\r\n            {profile && (\r\n                <form onSubmit={(e) => { e.preventDefault(); handlePostComment(newComment); }} className=\"flex gap-2 items-start\">\r\n                    <textarea \r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder=\"Şərhinizi yazın...\"\r\n                        className=\"flex-grow mt-1 block w-full rounded-md border-gray-300 shadow-sm\"\r\n                        rows=\"3\"\r\n                    />\r\n                    <Button type=\"submit\">Göndər</Button>\r\n                </form>\r\n            )}\r\n            {!profile && <p className=\"text-center p-4 bg-gray-50 rounded-md\">Şərh yazmaq üçün <Link to=\"/auth\" className=\"text-orange-600 font-semibold hover:underline\">daxil olun</Link>.</p>}\r\n            \r\n            <div className=\"space-y-4\">\r\n                {commentTree.map(comment => (\r\n                    <Comment key={comment.id} comment={comment} onReply={handlePostComment} onDelete={handleDeleteComment} profile={profile} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;\r\n"],"names":["formatDate","dateString","date","Date","isNaN","toLocaleString","day","month","year","hour","minute","_ref","result","quiz","profile","fetchComments","postComment","deleteComment","_jsxs","Card","className","children","_jsx","Link","to","Button","variant","studentName","concat","userName","userSurname","statusStyles","correct","container","icon","CheckCircleIcon","iconColor","textColor","incorrect","XCircleIcon","pending","ClockIcon","title","user_id","ArrowLeftIcon","created_at","percentage","score","totalPoints","questionOrder","map","q","index","originalQuestion","questions","find","origQ","id","userAnswer","userAnswers","status","userAnswerText","correctAnswerText","manualScore","getQuestionStatusInfo","question","type","hasOwnProperty","answer","isCorrect","options","correctAnswers","i","sort","user","JSON","stringify","join","length","trim","toLowerCase","correctAnswer","orderItems","item","Array","isArray","every","styles","text","time_per_question","undefined","Math","round","imageUrl","src","alt","onError","e","target","style","display","split","filter","part","startsWith","endsWith","blankIndex","substring","indexOf","userAnswerForBlank","correctAnswerForBlank","points","explanation","LightbulbIcon","Comments","targetId","toString","targetType","Comment","_comment$profiles$fir","comment","onReply","onDelete","showReplyForm","setShowReplyForm","useState","replyContent","setReplyContent","profiles","first_name","last_name","content","size","onClick","ReplyIcon","TrashIcon","onSubmit","preventDefault","value","onChange","placeholder","child","_ref2","comments","setComments","newComment","setNewComment","location","useLocation","useEffect","async","fetchedComments","loadComments","handlePostComment","parentId","arguments","targetUrl","pathname","handleDeleteComment","commentId","prev","c","commentTree","useMemo","roots","forEach","_objectSpread","parent_comment_id","push","rows"],"sourceRoot":""}