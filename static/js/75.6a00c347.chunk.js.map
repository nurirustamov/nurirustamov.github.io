{"version":3,"file":"static/js/75.6a00c347.chunk.js","mappings":"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","sources":["pages/ArticleViewPage.js","components/ui/Card.js","components/Comments.js"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport { ArrowLeftIcon, PlayIcon, CheckCircleIcon } from '../assets/icons';\nimport Comments from '../components/Comments'; // Импортируем новый компонент\n\nconst ArticleViewPage = ({ articles, quizzes, onStartQuiz, onMarkAsRead, articleProgress, profile, fetchComments, postComment, deleteComment }) => {\n    const { articleId } = useParams();\n    const navigate = useNavigate();\n\n    const article = useMemo(() => {\n        if (!articles || !quizzes) return null;\n        const currentArticle = articles.find(a => a.id === Number(articleId));\n        if (!currentArticle) return null;\n\n        const attachedQuizIds = new Set((currentArticle.article_quizzes || []).map(aq => aq.quiz_id));\n        const attachedQuizzes = quizzes.filter(q => attachedQuizIds.has(q.id));\n\n        return { ...currentArticle, quizzes: attachedQuizzes };\n    }, [articles, quizzes, articleId]);\n\n    const isCompleted = useMemo(() => {\n        return articleProgress.some(p => p.article_id === Number(articleId));\n    }, [articleProgress, articleId]);\n\n    if (!article) {\n        return <Card><p className=\"text-center\">Məqalə tapılmadı.</p></Card>;\n    }\n\n    return (\n        <div className=\"animate-fade-in max-w-4xl mx-auto space-y-6\">\n            <div className=\"flex justify-between items-center\">\n                <Button variant=\"secondary\" onClick={() => navigate('/articles')}><ArrowLeftIcon /> Məqalələr siyahısına qayıt</Button>\n                {isCompleted ? (\n                    <span className=\"flex items-center font-semibold text-green-600\"><CheckCircleIcon className=\"w-6 h-6 mr-2\" /> Oxunub</span>\n                ) : (\n                    <Button onClick={() => onMarkAsRead(article.id)}>Oxunmuş kimi işarələ</Button>\n                )}\n            </div>\n            <Card>\n                <h1 className=\"text-3xl font-bold text-gray-800 mb-4\">{article.title}</h1>\n                <div className=\"prose max-w-none\">\n                    <ReactMarkdown>{article.content}</ReactMarkdown>\n                </div>\n                <div className=\"mt-6 pt-6 border-t\">\n                    <Comments \n                        targetId={article.id}\n                        targetType=\"article\"\n                        profile={profile}\n                        fetchComments={fetchComments}\n                        postComment={postComment}\n                        deleteComment={deleteComment}\n                    />\n                </div>\n            </Card>\n\n            {article.quizzes && article.quizzes.length > 0 && (\n                <Card>\n                    <h2 className=\"text-2xl font-bold text-gray-800 mb-4\">Mövzuya aid testlər</h2>\n                    <div className=\"space-y-3\">\n                        {article.quizzes.map(quiz => (\n                            <div key={quiz.id} className=\"flex justify-between items-center p-4 border rounded-lg hover:bg-gray-50\">\n                                <div>\n                                    <h3 className=\"font-semibold text-lg\">{quiz.title}</h3>\n                                    <p className=\"text-sm text-gray-500\">{quiz.questions.length} sual</p>\n                                </div>\n                                <Button onClick={() => onStartQuiz(quiz.id)}><PlayIcon /> Testə Başla</Button>\n                            </div>\n                        ))}\n                    </div>\n                </Card>\n            )}\n        </div>\n    );\n};\n\nexport default ArticleViewPage;\n","import React from 'react';\n\nconst Card = ({ children, className = '' }) => (\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\n);\n\nexport default Card;","import React, { useState, useMemo, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport Button from './ui/Button';\r\nimport { ReplyIcon, TrashIcon } from '../assets/icons';\r\n\r\nconst Comment = ({ comment, onReply, onDelete, profile }) => {\r\n    const [showReplyForm, setShowReplyForm] = useState(false);\r\n    const [replyContent, setReplyContent] = useState('');\r\n\r\n    const handleReplySubmit = (e) => {\r\n        e.preventDefault();\r\n        if (!replyContent.trim()) return;\r\n        onReply(replyContent, comment.id);\r\n        setReplyContent('');\r\n        setShowReplyForm(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"flex flex-col gap-2 p-3 rounded-lg bg-white shadow-sm\">\r\n            <div className=\"flex items-center justify-between\">\r\n                <div className=\"flex items-center gap-2\">\r\n                    <div className=\"w-8 h-8 rounded-full bg-orange-200 flex items-center justify-center font-bold text-orange-600\">\r\n                        {comment.profiles.first_name?.[0] || 'U'}\r\n                    </div>\r\n                    <span className=\"font-semibold text-gray-800\">{comment.profiles.first_name} {comment.profiles.last_name}</span>\r\n                </div>\r\n                <span className=\"text-xs text-gray-400\">{new Date(comment.created_at).toLocaleString()}</span>\r\n            </div>\r\n            <p className=\"text-gray-700 pl-10\">{comment.content}</p>\r\n            <div className=\"flex items-center justify-end gap-2 pl-10\">\r\n                {profile && <Button variant=\"secondary\" size=\"sm\" onClick={() => setShowReplyForm(!showReplyForm)}><ReplyIcon /> Cavab ver</Button>}\r\n                {profile?.id === comment.user_id && <Button variant=\"danger\" size=\"sm\" onClick={() => onDelete(comment.id)}><TrashIcon /></Button>}\r\n            </div>\r\n            {showReplyForm && (\r\n                <form onSubmit={handleReplySubmit} className=\"pl-10 mt-2 flex gap-2\">\r\n                    <input \r\n                        type=\"text\" \r\n                        value={replyContent}\r\n                        onChange={(e) => setReplyContent(e.target.value)}\r\n                        placeholder={`Cavab verilir: ${comment.profiles.first_name}...`}\r\n                        className=\"flex-grow mt-1 block w-full rounded-md border-gray-300 shadow-sm text-sm\"\r\n                    />\r\n                    <Button type=\"submit\" size=\"sm\">Göndər</Button>\r\n                </form>\r\n            )}\r\n            {comment.children && comment.children.length > 0 && (\r\n                <div className=\"pl-6 border-l-2 border-orange-100 mt-2 space-y-3\">\r\n                    {comment.children.map(child => (\r\n                        <Comment key={child.id} comment={child} onReply={onReply} onDelete={onDelete} profile={profile} />\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Comments = ({ targetId, targetType, profile, fetchComments, postComment, deleteComment }) => {\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState('');\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        const loadComments = async () => {\r\n            const fetchedComments = await fetchComments(targetId, targetType);\r\n            setComments(fetchedComments || []);\r\n        };\r\n        if (targetId && targetType) {\r\n            loadComments();\r\n        }\r\n    }, [targetId, targetType, fetchComments]);\r\n\r\n    const handlePostComment = async (content, parentId = null) => {\r\n        const targetUrl = `${location.pathname}#comment-${parentId || 'new'}`;\r\n        const postedComment = await postComment(targetId, targetType, content, parentId, targetUrl);\r\n        if (postedComment) {\r\n            const fetchedComments = await fetchComments(targetId, targetType);\r\n            setComments(fetchedComments || []);\r\n            if (!parentId) {\r\n                setNewComment('');\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleDeleteComment = async (commentId) => {\r\n        const success = await deleteComment(commentId);\r\n        if (success) {\r\n            setComments(prev => prev.filter(c => c.id !== commentId));\r\n        }\r\n    };\r\n\r\n    const commentTree = useMemo(() => {\r\n        const map = {};\r\n        const roots = [];\r\n        comments.forEach(comment => {\r\n            map[comment.id] = { ...comment, children: [] };\r\n        });\r\n        comments.forEach(comment => {\r\n            if (comment.parent_comment_id && map[comment.parent_comment_id]) {\r\n                map[comment.parent_comment_id].children.push(map[comment.id]);\r\n            } else {\r\n                roots.push(map[comment.id]);\r\n            }\r\n        });\r\n        return roots;\r\n    }, [comments]);\r\n\r\n    return (\r\n        <div className=\"space-y-6\">\r\n            <h3 className=\"text-xl font-bold text-gray-800\">Şərhlər ({comments.length})</h3>\r\n            {profile && (\r\n                <form onSubmit={(e) => { e.preventDefault(); handlePostComment(newComment); }} className=\"flex gap-2 items-start\">\r\n                    <textarea \r\n                        value={newComment}\r\n                        onChange={(e) => setNewComment(e.target.value)}\r\n                        placeholder=\"Şərhinizi yazın...\"\r\n                        className=\"flex-grow mt-1 block w-full rounded-md border-gray-300 shadow-sm\"\r\n                        rows=\"3\"\r\n                    />\r\n                    <Button type=\"submit\">Göndər</Button>\r\n                </form>\r\n            )}\r\n            {!profile && <p className=\"text-center p-4 bg-gray-50 rounded-md\">Şərh yazmaq üçün <Link to=\"/auth\" className=\"text-orange-600 font-semibold hover:underline\">daxil olun</Link>.</p>}\r\n            \r\n            <div className=\"space-y-4\">\r\n                {commentTree.map(comment => (\r\n                    <Comment key={comment.id} comment={comment} onReply={handlePostComment} onDelete={handleDeleteComment} profile={profile} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comments;\r\n"],"names":["_ref","articles","quizzes","onStartQuiz","onMarkAsRead","articleProgress","profile","fetchComments","postComment","deleteComment","articleId","useParams","navigate","useNavigate","article","useMemo","currentArticle","find","a","id","Number","attachedQuizIds","Set","article_quizzes","map","aq","quiz_id","attachedQuizzes","filter","q","has","_objectSpread","isCompleted","some","p","article_id","_jsxs","className","children","Button","variant","onClick","_jsx","ArrowLeftIcon","CheckCircleIcon","Card","title","ReactMarkdown","content","Comments","targetId","targetType","length","quiz","questions","PlayIcon","concat","Comment","_comment$profiles$fir","comment","onReply","onDelete","showReplyForm","setShowReplyForm","useState","replyContent","setReplyContent","profiles","first_name","last_name","Date","created_at","toLocaleString","size","ReplyIcon","user_id","TrashIcon","onSubmit","e","preventDefault","trim","type","value","onChange","target","placeholder","child","_ref2","comments","setComments","newComment","setNewComment","location","useLocation","useEffect","async","fetchedComments","loadComments","handlePostComment","parentId","arguments","undefined","targetUrl","pathname","handleDeleteComment","commentId","prev","c","commentTree","roots","forEach","parent_comment_id","push","rows","Link","to"],"sourceRoot":""}