{"version":3,"file":"static/js/271.85e2b987.chunk.js","mappings":"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","sources":["pages/QuizAnalysisPage.js","components/ui/Card.js"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button'; \nimport Modal from '../components/ui/Modal';\nimport { ArrowLeftIcon, CheckCircleIcon, XCircleIcon, TrophyIcon, GoldMedalIcon, SilverMedalIcon, BronzeMedalIcon, ClockIcon, ChartBarIcon } from '../assets/icons';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\n// --- Helper Functions ---\nconst isAnswerCorrect = (question, userAnswer) => {\n    if (userAnswer === undefined || userAnswer === null) return false;\n    if (!question || !question.type) return false;\n\n    if (question.type === 'open') {\n        return userAnswer?.score > 0;\n    }\n    if (question.type === 'single') return userAnswer === question.options[question.correctAnswers[0]];\n    if (question.type === 'multiple') { const correct = question.correctAnswers.map(i => question.options[i]).sort(); const user = userAnswer ? [...userAnswer].sort() : []; return JSON.stringify(correct) === JSON.stringify(user); }\n    if (question.type === 'textInput') return userAnswer && question.correctAnswers[0].trim().toLowerCase() === userAnswer.trim().toLowerCase();\n    if (question.type === 'trueFalse') return userAnswer === question.correctAnswer;\n    if (question.type === 'ordering') return JSON.stringify(userAnswer) === JSON.stringify(question.orderItems);\n    return false;\n};\n\nconst formatUserAnswer = (answer) => {\n    if (answer === null || answer === undefined) return 'Cavab yoxdur';\n    if (Array.isArray(answer)) return answer.join(', ');\n    if (typeof answer === 'object') return answer.answer || 'N/A'; // For graded 'open' questions\n    return String(answer);\n};\n\n// --- Modal Component for showing responders ---\nconst QuestionRespondersModal = ({ isOpen, onClose, question, results }) => {\n    const responders = useMemo(() => {\n        if (!question || !results) return { correct: [], incorrect: [] };\n\n        const correct = [];\n        const incorrect = [];\n\n        results.forEach(result => {\n            const student = { id: result.user_id, name: `${result.userName} ${result.userSurname}` };\n            const userAnswer = result.userAnswers[question.id];\n            \n            if (isAnswerCorrect(question, userAnswer)) {\n                correct.push(student);\n            } else {\n                incorrect.push({ ...student, answer: formatUserAnswer(userAnswer) });\n            }\n        });\n\n        return { correct, incorrect };\n    }, [question, results]);\n\n    if (!isOpen) return null;\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} title={`Suala cavab verənlər: \"${question.text}\"`} size=\"lg\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                    <h4 className=\"font-bold text-green-600 mb-2 flex items-center gap-2\"><CheckCircleIcon /> Düzgün cavab verənlər ({responders.correct.length})</h4>\n                    <div className=\"max-h-64 overflow-y-auto bg-green-50 p-3 rounded-lg\">\n                        {responders.correct.length > 0 ? (\n                            <ul className=\"space-y-2\">\n                                {responders.correct.map(s => <li key={s.id}><Link to={`/student/${s.id}`} className=\"text-blue-600 hover:underline\">{s.name}</Link></li>)}\n                            </ul>\n                        ) : <p className=\"text-gray-500\">Yoxdur</p>}\n                    </div>\n                </div>\n                <div>\n                    <h4 className=\"font-bold text-red-600 mb-2 flex items-center gap-2\"><XCircleIcon /> Səhv cavab verənlər ({responders.incorrect.length})</h4>\n                    <div className=\"max-h-64 overflow-y-auto bg-red-50 p-3 rounded-lg\">\n                        {responders.incorrect.length > 0 ? (\n                            <ul className=\"space-y-2\">\n                                {responders.incorrect.map(s => (\n                                    <li key={s.id}>\n                                        <Link to={`/student/${s.id}`} className=\"text-blue-600 hover:underline\">{s.name}</Link>\n                                        <p className=\"text-xs text-gray-600 pl-2 border-l-2 border-red-200 ml-2 mt-1\">Cavab: <span className=\"font-medium text-red-700\">{s.answer}</span></p>\n                                    </li>\n                                ))}\n                            </ul>\n                        ) : <p className=\"text-gray-500\">Yoxdur</p>}\n                    </div>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nconst QuizAnalysisPage = ({ quizzes, results, allUsers, studentGroups }) => {\n    const { quizId } = useParams();\n    const [analyzingQuestion, setAnalyzingQuestion] = useState(null);\n    const [selectedGroupId, setSelectedGroupId] = useState('all');\n    const [selectedStudentId, setSelectedStudentId] = useState('all');\n\n    const quiz = useMemo(() => quizzes.find(q => q.id === Number(quizId)), [quizzes, quizId]);\n\n    const quizResults = useMemo(() => {\n        let filtered = results.filter(r => r.quizId === Number(quizId) && r.status !== 'pending_review');\n\n        if (selectedGroupId !== 'all') {\n            const group = studentGroups.find(g => g.id === Number(selectedGroupId));\n            if (group) {\n                const memberIds = new Set((group.members || []).map(m => m.user_id));\n                filtered = filtered.filter(r => memberIds.has(r.user_id));\n            }\n        }\n\n        return filtered;\n    }, [results, quizId, selectedGroupId, studentGroups]);\n\n    const analysis = useMemo(() => {\n        if (!quiz || quizResults.length === 0) return null;\n\n        const totalAttempts = quizResults.length;\n        const averageScore = quizResults.reduce((acc, r) => acc + r.percentage, 0) / totalAttempts;\n        const highestScore = Math.max(...quizResults.map(r => r.percentage));\n        const lowestScore = Math.min(...quizResults.map(r => r.percentage));\n\n        const scoreDistribution = Array(10).fill(0);\n        quizResults.forEach(r => {\n            const bracket = Math.floor(r.percentage / 10);\n            if (bracket === 10) scoreDistribution[9]++;\n            else scoreDistribution[bracket]++;\n        });\n\n        const questionAnalysis = (quiz.questions || []).map(q => {\n            let correctCount = 0;\n            quizResults.forEach(r => {\n                if (isAnswerCorrect(q, r.userAnswers[q.id])) {\n                    correctCount++;\n                }\n            });\n\n            // Time analysis\n            let totalTime = 0, timeCount = 0;\n            let totalTimeCorrect = 0, correctTimeCount = 0;\n            let totalTimeIncorrect = 0, incorrectTimeCount = 0;\n\n            quizResults.forEach(r => {\n                const timeSpent = r.time_per_question?.[q.id];\n                if (timeSpent !== undefined) {\n                    totalTime += timeSpent;\n                    timeCount++;\n                    if (isAnswerCorrect(q, r.userAnswers[q.id])) {\n                        totalTimeCorrect += timeSpent;\n                        correctTimeCount++;\n                    } else {\n                        totalTimeIncorrect += timeSpent;\n                        incorrectTimeCount++;\n                    }\n                }\n            });\n\n            return {\n                ...q,\n                correctPercentage: (correctCount / totalAttempts) * 100,\n                averageTime: timeCount > 0 ? (totalTime / timeCount) : 0,\n                averageTimeCorrect: correctTimeCount > 0 ? (totalTimeCorrect / correctTimeCount) : 0,\n                averageTimeIncorrect: incorrectTimeCount > 0 ? (totalTimeIncorrect / incorrectTimeCount) : 0,\n            };\n        });\n\n        return { totalAttempts, averageScore, highestScore, lowestScore, scoreDistribution, questionAnalysis };\n\n    }, [quiz, quizResults]);\n\n    const quizLeaderboard = useMemo(() => {\n        if (!quizResults || !allUsers) return [];\n\n        const userBestScores = {};\n        quizResults.forEach(result => {\n            if (!userBestScores[result.user_id] || result.score > userBestScores[result.user_id].score) {\n                userBestScores[result.user_id] = {\n                    score: result.score,\n                    percentage: result.percentage,\n                    user_id: result.user_id\n                };\n            }\n        });\n\n        return Object.values(userBestScores)\n            .sort((a, b) => b.score - a.score)\n            .slice(0, 10)\n            .map(entry => {\n                const userProfile = allUsers.find(u => u.id === entry.user_id);\n                return {\n                    ...entry,\n                    name: userProfile ? `${userProfile.first_name || ''} ${userProfile.last_name || ''}`.trim() : 'Naməlum istifadəçi'\n                };\n            });\n    }, [quizResults, allUsers]);\n\n    const mostTimeConsumingQuestions = useMemo(() => {\n        if (!analysis || !analysis.questionAnalysis) return [];\n        return [...analysis.questionAnalysis]\n            .filter(q => q.averageTime > 0)\n            .sort((a, b) => b.averageTime - a.averageTime)\n            .slice(0, 5);\n    }, [analysis]);\n\n    const studentsWhoTookQuiz = useMemo(() => {\n        if (!quizResults) return [];\n        const studentMap = new Map();\n        quizResults.forEach(result => {\n            if (!studentMap.has(result.user_id)) {\n                studentMap.set(result.user_id, {\n                    id: result.user_id,\n                    name: `${result.userName} ${result.userSurname}`\n                });\n            }\n        });\n        return Array.from(studentMap.values());\n    }, [quizResults]);\n\n    const studentTimeAnalysis = useMemo(() => {\n        if (selectedStudentId === 'all' || !quizResults) return null;\n\n        const studentResult = quizResults\n            .filter(r => r.user_id === selectedStudentId)\n            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))[0];\n\n        if (!studentResult || !studentResult.time_per_question) return [];\n\n        return Object.entries(studentResult.time_per_question)\n            .map(([qId, time]) => {\n                const question = quiz.questions.find(q => q.id === Number(qId));\n                return { id: qId, text: question?.text || 'Naməlum sual', timeSpent: time };\n            })\n            .filter(q => q.text !== 'Naməlum sual')\n            .sort((a, b) => b.timeSpent - a.timeSpent)\n            .slice(0, 5);\n\n    }, [selectedStudentId, quizResults, quiz]);\n\n    if (!quiz) {\n        return <Card><p className=\"text-center\">Test tapılmadı.</p></Card>;\n    }\n\n    if (!analysis) {\n        return (\n            <Card className=\"text-center py-12\">\n                <p className=\"text-gray-500 mb-6 text-lg\">\n                    {selectedGroupId !== 'all' ? 'Seçilmiş qrup üçün bu testdə heç bir nəticə tapılmadı.' : 'Bu test üçün heç bir nəticə tapılmadı.'}\n                </p>\n                {selectedGroupId !== 'all' ? (\n                    <Button variant=\"secondary\" onClick={() => { setSelectedGroupId('all'); setSelectedStudentId('all'); }}>\n                        <ArrowLeftIcon /> Filtri sıfırla\n                    </Button>\n                ) : (\n                    <Link to=\"/stats\"><Button variant=\"secondary\"><ArrowLeftIcon /> Statistikaya qayıt</Button></Link>\n                )}\n            </Card>\n        );\n    }\n\n    const distributionChartData = {\n        labels: ['0-9%', '10-19%', '20-29%', '30-39%', '40-49%', '50-59%', '60-69%', '70-79%', '80-89%', '90-100%'],\n        datasets: [{\n            label: 'Tələbə sayı',\n            data: analysis.scoreDistribution,\n            backgroundColor: 'rgba(249, 115, 22, 0.6)',\n            borderColor: 'rgba(249, 115, 22, 1)',\n            borderWidth: 1,\n        }]\n    };\n\n    return (\n        <div className=\"animate-fade-in space-y-6\">\n            <div className=\"flex flex-col sm:flex-row justify-between sm:items-center gap-4\">\n                <div>\n                    <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800\">Test Analizi</h1>\n                    <p className=\"text-lg text-gray-600\">{quiz.title}</p>\n                </div>\n                <Link to=\"/stats\"><Button variant=\"secondary\"><ArrowLeftIcon /> Statistikaya qayıt</Button></Link>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <Card className=\"text-center\"><h3 className=\"font-semibold\">Cəhdlər</h3><p className=\"text-3xl font-bold text-orange-600\">{analysis.totalAttempts}</p></Card>\n                <Card className=\"text-center\"><h3 className=\"font-semibold\">Orta Nəticə</h3><p className=\"text-3xl font-bold text-blue-600\">{analysis.averageScore.toFixed(1)}%</p></Card>\n                <Card className=\"text-center\"><h3 className=\"font-semibold\">Ən Yüksək</h3><p className=\"text-3xl font-bold text-green-600\">{analysis.highestScore}%</p></Card>\n                <Card className=\"text-center\"><h3 className=\"font-semibold\">Ən Aşağı</h3><p className=\"text-3xl font-bold text-red-600\">{analysis.lowestScore}%</p></Card>\n            </div>\n\n            <Card>\n                <h3 className=\"text-lg font-bold text-gray-800 mb-4 flex items-center gap-2\"><TrophyIcon /> Bu Test üzrə Liderlər</h3>\n                {quizLeaderboard.length > 0 ? (\n                    <ol className=\"space-y-2\">\n                        {quizLeaderboard.map((user, index) => (\n                            <li key={user.user_id} className=\"flex items-center justify-between p-2 rounded-md bg-gray-50\">\n                                <div className=\"flex items-center gap-3\">\n                                    <span className=\"font-bold text-gray-400 w-6 text-center\">{index + 1}</span>\n                                    <span className=\"flex items-center gap-2\">\n                                        {index === 0 ? <GoldMedalIcon /> : index === 1 ? <SilverMedalIcon /> : index === 2 ? <BronzeMedalIcon /> : <TrophyIcon className=\"w-5 h-5 text-gray-400\" />}\n                                        <Link to={`/student/${user.user_id}`} className=\"font-semibold text-blue-600 hover:underline\">{user.name}</Link>\n                                    </span>\n                                </div>\n                                <span className=\"font-bold text-orange-500\">{user.score} bal ({user.percentage}%)</span>\n                            </li>\n                        ))}\n                    </ol>\n                ) : (\n                    <p className=\"text-gray-500\">Bu test üçün reytinq məlumatı yoxdur.</p>\n                )}\n            </Card>\n\n            <Card>\n                <h3 className=\"text-lg font-bold text-gray-800 mb-4\">Nəticələrin Paylanması</h3>\n                <div className=\"h-80\"><Bar data={distributionChartData} options={{ maintainAspectRatio: false, scales: { y: { beginAtZero: true, ticks: { stepSize: 1 } } } }} /></div>\n            </Card>\n\n            <Card>\n                <h3 className=\"text-lg font-bold text-gray-800 mb-4\">Filtrlər</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                        <label htmlFor=\"group-select\" className=\"block text-sm font-medium text-gray-700 mb-1\">Qrup seçin</label>\n                        <select\n                            id=\"group-select\"\n                            value={selectedGroupId}\n                            onChange={e => { setSelectedGroupId(e.target.value); setSelectedStudentId('all'); }}\n                            className=\"w-full p-2 border border-gray-300 rounded-md bg-white focus:ring-orange-500 focus:border-orange-500\"\n                        >\n                            <option value=\"all\">Bütün Qruplar</option>\n                            {(studentGroups || []).map(group => <option key={group.id} value={group.id}>{group.name}</option>)}\n                        </select>\n                    </div>\n                    <div>\n                        <label htmlFor=\"student-select\" className=\"block text-sm font-medium text-gray-700 mb-1\">Tələbə seçin</label>\n                        <select\n                            id=\"student-select\"\n                            value={selectedStudentId}\n                            onChange={e => setSelectedStudentId(e.target.value)}\n                            className=\"w-full p-2 border border-gray-300 rounded-md bg-white focus:ring-orange-500 focus:border-orange-500\"\n                        >\n                            <option value=\"all\">Bütün tələbələr (ümumi)</option>\n                            {studentsWhoTookQuiz.map(student => <option key={student.id} value={student.id}>{student.name}</option>)}\n                        </select>\n                    </div>\n                </div>\n            </Card>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <Card>\n                    <h3 className=\"text-lg font-bold text-gray-800 mb-4\">Ən Çətin Suallar (ən az düzgün cavab)</h3>\n                    <ul className=\"list-inside space-y-2\">{analysis.questionAnalysis.filter(q => q.correctPercentage < 100).sort((a, b) => a.correctPercentage - b.correctPercentage).slice(0, 5).map((q) => <li key={q.id}><button onClick={() => setAnalyzingQuestion(q)} className=\"text-left text-blue-600 hover:underline flex items-center gap-2\"><ChartBarIcon /><strong>{q.text}</strong></button> - <span className=\"text-red-600\">{q.correctPercentage.toFixed(1)}% düzgün</span></li>)}</ul>\n                </Card>\n                <Card>\n                    <h3 className=\"text-lg font-bold text-gray-800 mb-4\">Ən Çox Vaxt Aparan Suallar</h3>\n                    {mostTimeConsumingQuestions.length > 0 ? (\n                        <ul className=\"list-inside space-y-2\">\n                            {mostTimeConsumingQuestions.map(q => (\n                                <li key={q.id}><button onClick={() => setAnalyzingQuestion(q)} className=\"text-left text-blue-600 hover:underline flex items-center gap-2\"><ClockIcon /><strong>{q.text}</strong></button> - <span className=\"text-purple-600\">{q.averageTime.toFixed(1)} san. (orta)</span></li>\n                            ))}\n                        </ul>\n                    ) : <p className=\"text-gray-500\">Vaxt məlumatı tapılmadı.</p>}\n                </Card>\n            </div>\n            \n            {studentTimeAnalysis && studentTimeAnalysis.length > 0 && (\n                <Card>\n                    <h3 className=\"text-lg font-bold text-gray-800 mb-4\">Seçilmiş Tələbə üçün Ən Çox Vaxt Aparan Suallar</h3>\n                    <ul className=\"list-inside space-y-2\">\n                        {studentTimeAnalysis.map(q => (\n                            <li key={q.id}>\n                                <button onClick={() => setAnalyzingQuestion(analysis.questionAnalysis.find(aq => aq.id === Number(q.id)))} className=\"text-left text-blue-600 hover:underline flex items-center gap-2\">\n                                    <ClockIcon /><strong>{q.text}</strong>\n                                </button> - <span className=\"text-purple-600\">{q.timeSpent.toFixed(1)} san.</span>\n                            </li>\n                        ))}\n                    </ul>\n                </Card>\n            )}\n\n            <Card>\n                <h3 className=\"text-lg font-bold text-gray-800 mb-4\">Sualların Analizi</h3>\n                <div className=\"space-y-2\">\n                    {analysis.questionAnalysis.map((q, index) => (\n                        <button key={q.id} onClick={() => setAnalyzingQuestion(q)} className=\"w-full text-left p-4 rounded-lg bg-gray-50 hover:bg-orange-50 transition\">\n                            <p className=\"font-semibold\">{index + 1}. {q.text}</p>\n                            <div className=\"flex items-center gap-4 mt-2\">\n                                <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                                    <div \n                                        className=\"h-4 rounded-full transition-all duration-500\"\n                                        style={{ width: `${q.correctPercentage}%`, backgroundColor: q.correctPercentage > 60 ? '#22C55E' : q.correctPercentage > 30 ? '#F59E0B' : '#EF4444' }}\n                                    ></div>\n                                </div>\n                                <span className=\"font-bold text-sm w-16 text-right\" style={{ color: q.correctPercentage > 60 ? '#16A34A' : q.correctPercentage > 30 ? '#D97706' : '#DC2626' }}>{q.correctPercentage.toFixed(1)}%</span>\n                            </div>\n                            <p className=\"text-xs text-gray-500 mt-1\">düzgün cavab verdi</p>\n                            \n                            {q.averageTime > 0 && (\n                                <div className=\"mt-3 pt-3 border-t border-gray-200 text-xs text-gray-600 space-y-1\">\n                                    <p><strong>Orta sərf olunan vaxt:</strong> {q.averageTime.toFixed(1)} san.</p>\n                                    {q.averageTimeCorrect > 0 && (\n                                        <p className=\"text-green-600\"><strong>Düzgün cavab üçün orta vaxt:</strong> {q.averageTimeCorrect.toFixed(1)} san.</p>\n                                    )}\n                                    {q.averageTimeIncorrect > 0 && (\n                                        <p className=\"text-red-600\"><strong>Səhv cavab üçün orta vaxt:</strong> {q.averageTimeIncorrect.toFixed(1)} san.</p>\n                                    )}\n                                </div>\n                            )}\n                        </button>\n                    ))}\n                </div>\n            </Card>\n            <QuestionRespondersModal isOpen={!!analyzingQuestion} onClose={() => setAnalyzingQuestion(null)} question={analyzingQuestion} results={quizResults} />\n        </div>\n    );\n};\n\nexport default QuizAnalysisPage;\n","import React from 'react';\r\n\r\nconst Card = ({ children, className = '' }) => (\r\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\r\n);\r\n\r\nexport default Card;"],"names":["ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","isAnswerCorrect","question","userAnswer","undefined","type","score","options","correctAnswers","correct","map","i","sort","user","JSON","stringify","trim","toLowerCase","correctAnswer","orderItems","QuestionRespondersModal","_ref","isOpen","onClose","results","responders","useMemo","incorrect","forEach","result","student","id","user_id","name","concat","userName","userSurname","userAnswers","answer","push","_objectSpread","Array","isArray","join","String","_jsx","Modal","title","text","size","children","_jsxs","className","CheckCircleIcon","length","s","Link","to","XCircleIcon","_ref2","quizzes","allUsers","studentGroups","quizId","useParams","analyzingQuestion","setAnalyzingQuestion","useState","selectedGroupId","setSelectedGroupId","selectedStudentId","setSelectedStudentId","quiz","find","q","Number","quizResults","filtered","filter","r","status","group","g","memberIds","Set","members","m","has","analysis","totalAttempts","averageScore","reduce","acc","percentage","highestScore","Math","max","lowestScore","min","scoreDistribution","fill","bracket","floor","questionAnalysis","questions","correctCount","totalTime","timeCount","totalTimeCorrect","correctTimeCount","totalTimeIncorrect","incorrectTimeCount","_r$time_per_question","timeSpent","time_per_question","correctPercentage","averageTime","averageTimeCorrect","averageTimeIncorrect","quizLeaderboard","userBestScores","Object","values","a","b","slice","entry","userProfile","u","first_name","last_name","mostTimeConsumingQuestions","studentsWhoTookQuiz","studentMap","Map","set","from","studentTimeAnalysis","studentResult","Date","created_at","entries","_ref3","qId","time","Card","Button","variant","onClick","ArrowLeftIcon","distributionChartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","toFixed","TrophyIcon","index","GoldMedalIcon","SilverMedalIcon","BronzeMedalIcon","Bar","maintainAspectRatio","scales","y","beginAtZero","ticks","stepSize","htmlFor","value","onChange","e","target","ChartBarIcon","ClockIcon","aq","style","width","color"],"sourceRoot":""}