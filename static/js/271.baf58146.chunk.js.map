{"version":3,"file":"static/js/271.baf58146.chunk.js","mappings":"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","sources":["pages/QuizAnalysisPage.js","components/ui/Card.js"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport Modal from '../components/ui/Modal';\nimport { ArrowLeftIcon, CheckCircleIcon, XCircleIcon, TrophyIcon, GoldMedalIcon, SilverMedalIcon, BronzeMedalIcon } from '../assets/icons';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\n// --- Helper Functions ---\nconst isAnswerCorrect = (question, userAnswer) => {\n    if (userAnswer === undefined || userAnswer === null) return false;\n    if (!question || !question.type) return false;\n\n    if (question.type === 'open') {\n        return userAnswer?.score > 0;\n    }\n    if (question.type === 'single') return userAnswer === question.options[question.correctAnswers[0]];\n    if (question.type === 'multiple') { const correct = question.correctAnswers.map(i => question.options[i]).sort(); const user = userAnswer ? [...userAnswer].sort() : []; return JSON.stringify(correct) === JSON.stringify(user); }\n    if (question.type === 'textInput') return userAnswer && question.correctAnswers[0].trim().toLowerCase() === userAnswer.trim().toLowerCase();\n    if (question.type === 'trueFalse') return userAnswer === question.correctAnswer;\n    if (question.type === 'ordering') return JSON.stringify(userAnswer) === JSON.stringify(question.orderItems);\n    return false;\n};\n\nconst formatUserAnswer = (answer) => {\n    if (answer === null || answer === undefined) return 'Cavab yoxdur';\n    if (Array.isArray(answer)) return answer.join(', ');\n    if (typeof answer === 'object') return answer.answer || 'N/A'; // For graded 'open' questions\n    return String(answer);\n};\n\n// --- Modal Component for showing responders ---\nconst QuestionRespondersModal = ({ isOpen, onClose, question, results }) => {\n    const responders = useMemo(() => {\n        if (!question || !results) return { correct: [], incorrect: [] };\n\n        const correct = [];\n        const incorrect = [];\n\n        results.forEach(result => {\n            const student = { id: result.user_id, name: `${result.userName} ${result.userSurname}` };\n            const userAnswer = result.userAnswers[question.id];\n            \n            if (isAnswerCorrect(question, userAnswer)) {\n                correct.push(student);\n            } else {\n                incorrect.push({ ...student, answer: formatUserAnswer(userAnswer) });\n            }\n        });\n\n        return { correct, incorrect };\n    }, [question, results]);\n\n    if (!isOpen) return null;\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} title={`Suala cavab verənlər: \"${question.text}\"`} size=\"lg\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                    <h4 className=\"font-bold text-green-600 mb-2 flex items-center gap-2\"><CheckCircleIcon /> Düzgün cavab verənlər ({responders.correct.length})</h4>\n                    <div className=\"max-h-64 overflow-y-auto bg-green-50 p-3 rounded-lg\">\n                        {responders.correct.length > 0 ? (\n                            <ul className=\"space-y-2\">\n                                {responders.correct.map(s => <li key={s.id}><Link to={`/student/${s.id}`} className=\"text-blue-600 hover:underline\">{s.name}</Link></li>)}\n                            </ul>\n                        ) : <p className=\"text-gray-500\">Yoxdur</p>}\n                    </div>\n                </div>\n                <div>\n                    <h4 className=\"font-bold text-red-600 mb-2 flex items-center gap-2\"><XCircleIcon /> Səhv cavab verənlər ({responders.incorrect.length})</h4>\n                    <div className=\"max-h-64 overflow-y-auto bg-red-50 p-3 rounded-lg\">\n                        {responders.incorrect.length > 0 ? (\n                            <ul className=\"space-y-2\">\n                                {responders.incorrect.map(s => (\n                                    <li key={s.id}>\n                                        <Link to={`/student/${s.id}`} className=\"text-blue-600 hover:underline\">{s.name}</Link>\n                                        <p className=\"text-xs text-gray-600 pl-2 border-l-2 border-red-200 ml-2 mt-1\">Cavab: <span className=\"font-medium text-red-700\">{s.answer}</span></p>\n                                    </li>\n                                ))}\n                            </ul>\n                        ) : <p className=\"text-gray-500\">Yoxdur</p>}\n                    </div>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nconst QuizAnalysisPage = ({ quizzes, results, allUsers }) => {\n    const { quizId } = useParams();\n    const [analyzingQuestion, setAnalyzingQuestion] = useState(null);\n\n    const quiz = useMemo(() => quizzes.find(q => q.id === Number(quizId)), [quizzes, quizId]);\n    const quizResults = useMemo(() => results.filter(r => r.quizId === Number(quizId) && r.status !== 'pending_review'), [results, quizId]);\n\n    const analysis = useMemo(() => {\n        if (!quiz || quizResults.length === 0) return null;\n\n        const totalAttempts = quizResults.length;\n        const averageScore = quizResults.reduce((acc, r) => acc + r.percentage, 0) / totalAttempts;\n        const highestScore = Math.max(...quizResults.map(r => r.percentage));\n        const lowestScore = Math.min(...quizResults.map(r => r.percentage));\n\n        const scoreDistribution = Array(10).fill(0);\n        quizResults.forEach(r => {\n            const bracket = Math.floor(r.percentage / 10);\n            if (bracket === 10) scoreDistribution[9]++;\n            else scoreDistribution[bracket]++;\n        });\n\n        const questionAnalysis = (quiz.questions || []).map(q => {\n            let correctCount = 0;\n            quizResults.forEach(r => {\n                if (isAnswerCorrect(q, r.userAnswers[q.id])) {\n                    correctCount++;\n                }\n            });\n            return { ...q, correctPercentage: (correctCount / totalAttempts) * 100 };\n        });\n\n        return { totalAttempts, averageScore, highestScore, lowestScore, scoreDistribution, questionAnalysis };\n\n    }, [quiz, quizResults]);\n\n    const quizLeaderboard = useMemo(() => {\n        if (!quizResults || !allUsers) return [];\n\n        const userBestScores = {};\n        quizResults.forEach(result => {\n            if (!userBestScores[result.user_id] || result.score > userBestScores[result.user_id].score) {\n                userBestScores[result.user_id] = {\n                    score: result.score,\n                    percentage: result.percentage,\n                    user_id: result.user_id\n                };\n            }\n        });\n\n        return Object.values(userBestScores)\n            .sort((a, b) => b.score - a.score)\n            .slice(0, 10)\n            .map(entry => {\n                const userProfile = allUsers.find(u => u.id === entry.user_id);\n                return {\n                    ...entry,\n                    name: userProfile ? `${userProfile.first_name || ''} ${userProfile.last_name || ''}`.trim() : 'Naməlum istifadəçi'\n                };\n            });\n    }, [quizResults, allUsers]);\n\n    if (!quiz) return <Card><p className=\"text-center\">Test tapılmadı.</p></Card>;\n    if (!analysis) return <Card><p className=\"text-center\">Bu test üçün heç bir nəticə tapılmadı.</p></Card>;\n\n    const distributionChartData = {\n        labels: ['0-9%', '10-19%', '20-29%', '30-39%', '40-49%', '50-59%', '60-69%', '70-79%', '80-89%', '90-100%'],\n        datasets: [{\n            label: 'Tələbə sayı',\n            data: analysis.scoreDistribution,\n            backgroundColor: 'rgba(249, 115, 22, 0.6)',\n            borderColor: 'rgba(249, 115, 22, 1)',\n            borderWidth: 1,\n        }]\n    };\n\n    return (\n        <div className=\"animate-fade-in space-y-6\">\n            <div className=\"flex flex-col sm:flex-row justify-between sm:items-center gap-4\">\n                <div>\n                    <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800\">Test Analizi</h1>\n                    <p className=\"text-lg text-gray-600\">{quiz.title}</p>\n                </div>\n                <Link to=\"/stats\"><Button variant=\"secondary\"><ArrowLeftIcon /> Statistikaya qayıt</Button></Link>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <Card className=\"text-center\"><h3 className=\"font-semibold\">Cəhdlər</h3><p className=\"text-3xl font-bold text-orange-600\">{analysis.totalAttempts}</p></Card>\n                <Card className=\"text-center\"><h3 className=\"font-semibold\">Orta Nəticə</h3><p className=\"text-3xl font-bold text-blue-600\">{analysis.averageScore.toFixed(1)}%</p></Card>\n                <Card className=\"text-center\"><h3 className=\"font-semibold\">Ən Yüksək</h3><p className=\"text-3xl font-bold text-green-600\">{analysis.highestScore}%</p></Card>\n                <Card className=\"text-center\"><h3 className=\"font-semibold\">Ən Aşağı</h3><p className=\"text-3xl font-bold text-red-600\">{analysis.lowestScore}%</p></Card>\n            </div>\n\n            <Card>\n                <h3 className=\"text-lg font-bold text-gray-800 mb-4 flex items-center gap-2\"><TrophyIcon /> Bu Test üzrə Liderlər</h3>\n                {quizLeaderboard.length > 0 ? (\n                    <ol className=\"space-y-2\">\n                        {quizLeaderboard.map((user, index) => (\n                            <li key={user.user_id} className=\"flex items-center justify-between p-2 rounded-md bg-gray-50\">\n                                <div className=\"flex items-center gap-3\">\n                                    <span className=\"font-bold text-gray-400 w-6 text-center\">{index + 1}</span>\n                                    <span className=\"flex items-center gap-2\">\n                                        {index === 0 ? <GoldMedalIcon /> : index === 1 ? <SilverMedalIcon /> : index === 2 ? <BronzeMedalIcon /> : <TrophyIcon className=\"w-5 h-5 text-gray-400\" />}\n                                        <Link to={`/student/${user.user_id}`} className=\"font-semibold text-blue-600 hover:underline\">{user.name}</Link>\n                                    </span>\n                                </div>\n                                <span className=\"font-bold text-orange-500\">{user.score} bal ({user.percentage}%)</span>\n                            </li>\n                        ))}\n                    </ol>\n                ) : (\n                    <p className=\"text-gray-500\">Bu test üçün reytinq məlumatı yoxdur.</p>\n                )}\n            </Card>\n\n            <Card>\n                <h3 className=\"text-lg font-bold text-gray-800 mb-4\">Nəticələrin Paylanması</h3>\n                <div className=\"h-80\"><Bar data={distributionChartData} options={{ maintainAspectRatio: false, scales: { y: { beginAtZero: true, ticks: { stepSize: 1 } } } }} /></div>\n            </Card>\n\n            <Card>\n                <h3 className=\"text-lg font-bold text-gray-800 mb-4\">Sualların Analizi</h3>\n                <div className=\"space-y-2\">\n                    {analysis.questionAnalysis.map((q, index) => (\n                        <button key={q.id} onClick={() => setAnalyzingQuestion(q)} className=\"w-full text-left p-4 rounded-lg bg-gray-50 hover:bg-orange-50 transition\">\n                            <p className=\"font-semibold\">{index + 1}. {q.text}</p>\n                            <div className=\"flex items-center gap-4 mt-2\">\n                                <div className=\"w-full bg-gray-200 rounded-full h-4\">\n                                    <div \n                                        className=\"h-4 rounded-full transition-all duration-500\"\n                                        style={{ width: `${q.correctPercentage}%`, backgroundColor: q.correctPercentage > 60 ? '#22C55E' : q.correctPercentage > 30 ? '#F59E0B' : '#EF4444' }}\n                                    ></div>\n                                </div>\n                                <span className=\"font-bold text-sm w-16 text-right\" style={{ color: q.correctPercentage > 60 ? '#16A34A' : q.correctPercentage > 30 ? '#D97706' : '#DC2626' }}>{q.correctPercentage.toFixed(1)}%</span>\n                            </div>\n                             <p className=\"text-xs text-gray-500 mt-1\">düzgün cavab verdi</p>\n                        </button>\n                    ))}\n                </div>\n            </Card>\n            <QuestionRespondersModal isOpen={!!analyzingQuestion} onClose={() => setAnalyzingQuestion(null)} question={analyzingQuestion} results={quizResults} />\n        </div>\n    );\n};\n\nexport default QuizAnalysisPage;\n","import React from 'react';\n\nconst Card = ({ children, className = '' }) => (\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\n);\n\nexport default Card;"],"names":["ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","isAnswerCorrect","question","userAnswer","undefined","type","score","options","correctAnswers","correct","map","i","sort","user","JSON","stringify","trim","toLowerCase","correctAnswer","orderItems","QuestionRespondersModal","_ref","isOpen","onClose","results","responders","useMemo","incorrect","forEach","result","student","id","user_id","name","concat","userName","userSurname","userAnswers","answer","push","_objectSpread","Array","isArray","join","String","_jsx","Modal","title","text","size","children","_jsxs","className","CheckCircleIcon","length","s","Link","to","XCircleIcon","_ref2","quizzes","allUsers","quizId","useParams","analyzingQuestion","setAnalyzingQuestion","useState","quiz","find","q","Number","quizResults","filter","r","status","analysis","totalAttempts","averageScore","reduce","acc","percentage","highestScore","Math","max","lowestScore","min","scoreDistribution","fill","bracket","floor","questionAnalysis","questions","correctCount","correctPercentage","quizLeaderboard","userBestScores","Object","values","a","b","slice","entry","userProfile","u","first_name","last_name","Card","distributionChartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","Button","variant","ArrowLeftIcon","toFixed","TrophyIcon","index","GoldMedalIcon","SilverMedalIcon","BronzeMedalIcon","Bar","maintainAspectRatio","scales","y","beginAtZero","ticks","stepSize","onClick","style","width","color"],"sourceRoot":""}