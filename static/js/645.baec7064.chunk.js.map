{"version":3,"file":"static/js/645.baec7064.chunk.js","mappings":"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","sources":["components/ui/Card.js","pages/FlashcardStudyPage.js"],"sourcesContent":["import React from 'react';\n\nconst Card = ({ children, className = '' }) => (\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\n);\n\nexport default Card;","import React, { useState, useMemo, useEffect } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport { ArrowLeftIcon, CheckCircleIcon } from '../assets/icons';\n\n/**\n * Calculates the next review date based on the SM-2 algorithm.\n * @param {object} review - The current review state of the card.\n * @param {number} quality - The user's rating of how well they remembered (0-5).\n * @returns {object} - The updated review object with new interval, repetitions, ease_factor, and next_review_at.\n */\nconst calculateSpacedRepetition = (review, quality) => {\n    let { repetitions, ease_factor, interval } = review;\n\n    if (quality < 3) {\n        repetitions = 0;\n        interval = 1;\n    } else {\n        if (repetitions === 0) {\n            interval = 1;\n        } else if (repetitions === 1) {\n            interval = 6;\n        } else {\n            interval = Math.round(interval * ease_factor);\n        }\n        repetitions += 1;\n    }\n\n    ease_factor = ease_factor + (0.1 - (5 - quality) * (0.08 + (5 - quality) * 0.02));\n    if (ease_factor < 1.3) {\n        ease_factor = 1.3;\n    }\n\n    const next_review_at = new Date();\n    next_review_at.setDate(next_review_at.getDate() + interval);\n\n    return {\n        ...review,\n        repetitions,\n        ease_factor: parseFloat(ease_factor.toFixed(2)),\n        interval,\n        next_review_at: next_review_at.toISOString(),\n    };\n};\n\nconst FlashcardStudyPage = ({ decks, userReviews, onUpdateReview }) => {\n    const { deckId } = useParams();\n    const [studySession, setStudySession] = useState({ cards: [], currentCardIndex: 0, isFlipped: false });\n    const [isSessionLoading, setIsSessionLoading] = useState(true);\n\n    const deck = useMemo(() => decks.find(d => d.id === Number(deckId)), [decks, deckId]);\n\n    useEffect(() => {\n        if (!deck) return;\n\n        const now = new Date().toISOString();\n        const allCards = deck.flashcards || [];\n\n        const dueReviews = (userReviews || []).filter(review => {\n            const cardInDeck = allCards.some(c => c.id === review.card_id);\n            return cardInDeck && review.next_review_at <= now;\n        });\n\n        const newCards = allCards.filter(card =>\n            !(userReviews || []).some(review => review.card_id === card.id)\n        );\n\n        const dueCardIds = new Set(dueReviews.map(r => r.card_id));\n        const dueCardsFromReviews = allCards.filter(c => dueCardIds.has(c.id));\n\n        const cardsToStudy = [...newCards, ...dueCardsFromReviews].sort(() => Math.random() - 0.5);\n\n        setStudySession({ cards: cardsToStudy, currentCardIndex: 0, isFlipped: false });\n        setIsSessionLoading(false);\n\n    }, [deck, userReviews]);\n\n    const handleFlip = () => {\n        setStudySession(prev => ({ ...prev, isFlipped: true }));\n    };\n\n    const handleGrade = (quality) => {\n        const currentCard = studySession.cards[studySession.currentCardIndex];\n        const review = (userReviews || []).find(r => r.card_id === currentCard.id) || {\n            card_id: currentCard.id,\n            repetitions: 0,\n            ease_factor: 2.5,\n            interval: 0\n        };\n\n        const updatedReview = calculateSpacedRepetition(review, quality);\n        onUpdateReview(updatedReview);\n\n        setStudySession(prev => ({\n            ...prev,\n            currentCardIndex: prev.currentCardIndex + 1,\n            isFlipped: false\n        }));\n    };\n\n    if (isSessionLoading) {\n        return <Card className=\"text-center py-12\">Təkrar sessiyası hazırlanır...</Card>;\n    }\n\n    if (!deck) {\n        return <Card className=\"text-center py-12\">Koloda tapılmadı.</Card>;\n    }\n\n    const isSessionDone = studySession.currentCardIndex >= studySession.cards.length;\n\n    if (isSessionDone) {\n        return (\n            <Card className=\"text-center py-12 animate-fade-in\">\n                <CheckCircleIcon className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n                <h2 className=\"text-2xl font-bold text-gray-800\">Sessiya Tamamlandı!</h2>\n                <p className=\"text-gray-600 mt-2\">Bu gün üçün bütün təkrarları bitirdiniz. Afərin!</p>\n                <Link to=\"/decks\">\n                    <Button className=\"mt-6\"><ArrowLeftIcon /> Bütün kolodalara qayıt</Button>\n                </Link>\n            </Card>\n        );\n    }\n\n    const currentCard = studySession.cards[studySession.currentCardIndex];\n    const progressPercentage = (studySession.currentCardIndex / studySession.cards.length) * 100;\n\n    const cardContainerStyle = {\n        perspective: '1000px'\n    };\n    const cardInnerStyle = {\n        transformStyle: 'preserve-3d',\n        transform: studySession.isFlipped ? 'rotateY(180deg)' : 'rotateY(0deg)'\n    };\n    const cardFaceStyle = {\n        backfaceVisibility: 'hidden',\n        WebkitBackfaceVisibility: 'hidden' // For Safari\n    };\n    const cardBackStyle = {\n        ...cardFaceStyle,\n        transform: 'rotateY(180deg)'\n    };\n\n    return (\n        <div className=\"animate-fade-in max-w-2xl mx-auto\">\n            <div className=\"mb-4\">\n                <Link to=\"/decks\">\n                    <Button variant=\"secondary\"><ArrowLeftIcon /> Kolodalara qayıt</Button>\n                </Link>\n            </div>\n            <Card>\n                <div className=\"mb-4\">\n                    <div className=\"flex justify-between items-center mb-1\">\n                        <span className=\"text-sm font-semibold text-gray-600\">{deck.title}</span>\n                        <span className=\"text-sm font-semibold text-gray-600\">{studySession.currentCardIndex + 1} / {studySession.cards.length}</span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                        <div className=\"bg-orange-500 h-2 rounded-full\" style={{ width: `${progressPercentage}%` }}></div>\n                    </div>\n                </div>\n\n                <div style={cardContainerStyle} className={`w-full h-64`}>\n                    <div style={cardInnerStyle} className={`relative w-full h-full transition-transform duration-700`}>\n                        {/* Front of the card */}\n                        <div style={cardFaceStyle} className=\"absolute w-full h-full bg-orange-50 rounded-lg flex items-center justify-center p-6 text-center\">\n                            <p className=\"text-xl font-semibold text-gray-800\">{currentCard.front}</p>\n                        </div>\n                        {/* Back of the card */}\n                        <div style={cardBackStyle} className=\"absolute w-full h-full bg-blue-50 rounded-lg flex items-center justify-center p-6 text-center\">\n                            <p className=\"text-xl font-semibold text-gray-800\">{currentCard.back}</p>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"mt-6\">\n                    {!studySession.isFlipped ? (\n                        <Button onClick={handleFlip} className=\"w-full\">Cavabı Göstər</Button>\n                    ) : (\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                            <Button onClick={() => handleGrade(0)} variant=\"danger\">Yenidən</Button>\n                            <Button onClick={() => handleGrade(2)} className=\"bg-yellow-500 hover:bg-yellow-600 text-white\">Çətin</Button>\n                            <Button onClick={() => handleGrade(4)} className=\"bg-green-500 hover:bg-green-600 text-white\">Yaxşı</Button>\n                            <Button onClick={() => handleGrade(5)} className=\"bg-blue-500 hover:bg-blue-600 text-white\">Asan</Button>\n                        </div>\n                    )}\n                </div>\n            </Card>\n        </div>\n    );\n};\n\nexport default FlashcardStudyPage;\n"],"names":["_ref","children","className","_jsx","concat","decks","userReviews","onUpdateReview","deckId","useParams","studySession","setStudySession","useState","cards","currentCardIndex","isFlipped","isSessionLoading","setIsSessionLoading","deck","useMemo","find","d","id","Number","useEffect","now","Date","toISOString","allCards","flashcards","dueReviews","filter","review","some","c","card_id","next_review_at","newCards","card","dueCardIds","Set","map","r","cardsToStudy","has","sort","Math","random","handleGrade","quality","currentCard","updatedReview","calculateSpacedRepetition","repetitions","ease_factor","interval","round","setDate","getDate","_objectSpread","parseFloat","toFixed","prev","Card","length","_jsxs","CheckCircleIcon","Link","to","Button","ArrowLeftIcon","progressPercentage","cardInnerStyle","transformStyle","transform","cardFaceStyle","backfaceVisibility","WebkitBackfaceVisibility","cardBackStyle","variant","title","style","width","perspective","front","back","onClick","handleFlip"],"sourceRoot":""}