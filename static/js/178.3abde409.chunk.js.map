{"version":3,"file":"static/js/178.3abde409.chunk.js","mappings":"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","sources":["components/ui/Card.js","components/OrderingQuestion.js","pages/TakeQuizPage.js"],"sourcesContent":["import React from 'react';\n\nconst Card = ({ children, className = '' }) => (\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\n);\n\nexport default Card;","import React, { useState, useEffect, useRef } from 'react';\n\nconst OrderingQuestion = ({ question, onAnswer }) => {\n    const [items, setItems] = useState([]);\n    const dragItem = useRef(null);\n    const dragOverItem = useRef(null);\n\n    useEffect(() => {\n        // Shuffle the items initially\n        setItems([...question.orderItems].sort(() => Math.random() - 0.5));\n    }, [question]);\n\n    const handleDragEnd = () => {\n        const newItems = [...items];\n        const draggedItemContent = newItems.splice(dragItem.current, 1)[0];\n        newItems.splice(dragOverItem.current, 0, draggedItemContent);\n        dragItem.current = null;\n        dragOverItem.current = null;\n        setItems(newItems);\n        onAnswer(newItems);\n    };\n\n    return (\n        <div>\n            <p className=\"text-sm text-gray-500 mb-2\">Elementləri düzgün ardıcıllıqla yerləşdirmək üçün sürüşdürün.</p>\n            {items.map((item, index) => (\n                <div \n                    key={index} \n                    draggable \n                    onDragStart={() => (dragItem.current = index)} \n                    onDragEnter={() => (dragOverItem.current = index)} \n                    onDragEnd={handleDragEnd} \n                    onDragOver={(e) => e.preventDefault()} \n                    className=\"p-3 mb-2 bg-gray-100 rounded-md cursor-grab active:cursor-grabbing border border-gray-200\"\n                >\n                    {item}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default OrderingQuestion;","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport OrderingQuestion from '../components/OrderingQuestion';\nimport { SpeakerIcon, ArrowLeftIcon, ArrowRightIcon, CheckIcon, LightbulbIcon } from '../assets/icons';\n\n// --- Helper Functions ---\nconst isAnswerCorrect = (question, userAnswer) => {\n    if (userAnswer === undefined || userAnswer === null) return false;\n    if (question.type === 'open') return false;\n    switch (question.type) {\n        case 'single': return userAnswer === question.options[question.correctAnswers[0]];\n        case 'multiple':\n            const correctOptions = question.correctAnswers.map(i => question.options[i]).sort();\n            const userOptions = userAnswer ? [...userAnswer].sort() : [];\n            return JSON.stringify(correctOptions) === JSON.stringify(userOptions);\n        case 'textInput': return userAnswer.trim().toLowerCase() === question.correctAnswers[0].trim().toLowerCase();\n        case 'trueFalse': return userAnswer === question.correctAnswer;\n        case 'ordering': return JSON.stringify(userAnswer) === JSON.stringify(question.orderItems);\n        default: return false;\n    }\n};\n\nconst speakText = (text) => {\n    if ('speechSynthesis' in window) {\n        window.speechSynthesis.cancel();\n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.lang = 'az-AZ';\n        window.speechSynthesis.speak(utterance);\n    } else { alert('Sizin brauzeriniz mətni səsləndirməyi dəstəkləmir.'); }\n};\n\n// --- Question Renderer Component ---\nconst QuestionRenderer = ({ q, index, answers, handleAnswerChange, isPracticeMode, isAnswerChecked, shuffledOptions, isSubmitting }) => {\n    const optionsForCurrentQuestion = q.shuffleOptions && shuffledOptions[q.id] ? shuffledOptions[q.id] : q.options;\n\n    const getOptionClassName = (option, optIndex) => {\n        if (!isPracticeMode || !isAnswerChecked) return 'border-transparent';\n        let isCorrect = false;\n        if (q.type === 'single') isCorrect = optIndex === q.correctAnswers[0];\n        if (q.type === 'multiple') isCorrect = q.correctAnswers.includes(optIndex);\n        if (isCorrect) return 'border-green-500 bg-green-100';\n        let isSelected = false;\n        if (q.type === 'single') isSelected = answers[q.id] === option;\n        if (q.type === 'multiple') isSelected = answers[q.id]?.includes(option);\n        if (isSelected) return 'border-red-500 bg-red-100';\n        return 'border-transparent';\n    };\n\n    return (\n        <div key={q.id} className=\"bg-orange-50 p-4 sm:p-6 rounded-lg mb-6\">\n            <div className=\"flex justify-between items-start\">\n                <h3 className=\"font-semibold text-lg sm:text-xl text-gray-800 mb-4 flex-1\">{index + 1}. {q.text}</h3>\n                <button onClick={() => speakText(q.text)} className=\"text-gray-500 hover:text-orange-500 ml-2 sm:ml-4 p-2\"><SpeakerIcon /></button>\n            </div>\n            {q.audioUrl && (\n                <div className=\"my-4\">\n                    <audio controls src={q.audioUrl} className=\"w-full\">Your browser does not support the audio element.</audio>\n                </div>\n            )}\n            {q.imageUrl && <img src={q.imageUrl} alt=\"Question illustration\" className=\"my-4 rounded-lg max-h-60 w-full object-contain mx-auto\" onError={(e) => e.target.style.display = 'none'} />}\n            \n            {q.type === 'single' && optionsForCurrentQuestion.map((option, optIndex) => (\n                <div key={optIndex} className=\"mb-2\"><label className={`block p-3 rounded-lg hover:bg-orange-100 cursor-pointer border-2 ${getOptionClassName(option, optIndex)}`}><input type=\"radio\" name={q.id} value={option} checked={answers[q.id] === option} onChange={(e) => handleAnswerChange(q.id, e.target.value)} className=\"mr-3 h-4 w-4 text-orange-600 focus:ring-orange-500\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} />{option}</label></div>\n            ))}\n            {q.type === 'multiple' && optionsForCurrentQuestion.map((option, optIndex) => (\n                <div key={optIndex} className=\"mb-2\"><label className={`block p-3 rounded-lg hover:bg-orange-100 cursor-pointer border-2 ${getOptionClassName(option, optIndex)}`}><input type=\"checkbox\" name={q.id} value={option} checked={answers[q.id]?.includes(option)} onChange={(e) => { const curr = answers[q.id] || []; const next = e.target.checked ? [...curr, e.target.value] : curr.filter(a => a !== e.target.value); handleAnswerChange(q.id, next); }} className=\"mr-3 h-4 w-4 text-orange-600 rounded focus:ring-orange-500\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} />{option}</label></div>\n            ))}\n            {q.type === 'textInput' && <input type=\"text\" value={answers[q.id] || ''} onChange={(e) => handleAnswerChange(q.id, e.target.value)} className={`mt-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm p-3 ${isPracticeMode && isAnswerChecked ? (isAnswerCorrect(q, answers[q.id]) ? 'bg-green-100 border-green-500' : 'bg-red-100 border-red-500') : ''}`} placeholder=\"Cavabınızı daxil edin...\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} />}\n            {q.type === 'trueFalse' && (\n                <div className=\"flex flex-col sm:flex-row gap-3 mt-2\">\n                    <label className={`block p-3 rounded-lg hover:bg-orange-100 cursor-pointer flex-1 text-center border-2 ${isPracticeMode && isAnswerChecked && q.correctAnswer === true ? 'border-green-500 bg-green-100' : (isPracticeMode && isAnswerChecked && answers[q.id] === true ? 'border-red-500 bg-red-100' : 'border-transparent')}`}><input type=\"radio\" name={q.id} checked={answers[q.id] === true} onChange={() => handleAnswerChange(q.id, true)} className=\"mr-3 h-4 w-4 text-orange-600 focus:ring-orange-500\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} /> Doğru</label>\n                    <label className={`block p-3 rounded-lg hover:bg-orange-100 cursor-pointer flex-1 text-center border-2 ${isPracticeMode && isAnswerChecked && q.correctAnswer === false ? 'border-green-500 bg-green-100' : (isPracticeMode && isAnswerChecked && answers[q.id] === false ? 'border-red-500 bg-red-100' : 'border-transparent')}`}><input type=\"radio\" name={q.id} checked={answers[q.id] === false} onChange={() => handleAnswerChange(q.id, false)} className=\"mr-3 h-4 w-4 text-orange-600 focus:ring-orange-500\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} /> Yanlış</label>\n                </div>\n            )}\n            {q.type === 'ordering' && <OrderingQuestion question={q} onAnswer={(orderedItems) => handleAnswerChange(q.id, orderedItems)} disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} />}\n            {q.type === 'open' && (\n                <textarea\n                    value={answers[q.id] || ''}\n                    onChange={(e) => handleAnswerChange(q.id, e.target.value)}\n                    className=\"mt-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm p-3\"\n                    placeholder=\"Cavabınızı bura daxil edin...\"\n                    rows=\"5\"\n                    disabled={(isPracticeMode && isAnswerChecked) || isSubmitting}\n                />\n            )}\n            {isPracticeMode && isAnswerChecked && q.explanation && (\n                <div className=\"mt-4 p-4 bg-blue-50 border-l-4 border-blue-400\">\n                    <div className=\"flex items-start text-sm text-blue-800\">\n                        <span className=\"mr-2 mt-1 flex-shrink-0\"><LightbulbIcon /></span>\n                        <div>\n                            <strong className=\"font-semibold\">İzah:</strong>\n                            <p className=\"mt-1 whitespace-pre-wrap\">{q.explanation}</p>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\n// --- Main Component ---\nconst TakeQuizPage = ({ quiz, user, onSubmit, mode = 'exam' }) => {\n    const navigate = useNavigate();\n    \n    const [answers, setAnswers] = useState(() => {\n        const initialState = {};\n        (quiz.questions || []).forEach(q => {\n            if (q.type === 'textInput' || q.type === 'open') {\n                initialState[q.id] = '';\n            }\n        });\n        return initialState;\n    });\n\n    const [timeLeft, setTimeLeft] = useState((quiz.timeLimit || 10) * 60);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [isAnswerChecked, setIsAnswerChecked] = useState(false);\n\n    const isPracticeMode = mode === 'practice';\n    const displayAll = quiz.display_all_questions && !isPracticeMode;\n\n    const quizQuestions = useMemo(() => {\n        return quiz.shuffleQuestions ? [...quiz.questions].sort(() => Math.random() - 0.5) : quiz.questions;\n    }, [quiz]);\n\n    const shuffledOptions = useMemo(() => {\n        if (!quiz.shuffleOptions) return {};\n        const shuffled = {};\n        quizQuestions.forEach(q => {\n            if (['single', 'multiple'].includes(q.type)) {\n                shuffled[q.id] = [...q.options].sort(() => Math.random() - 0.5);\n            }\n        });\n        return shuffled;\n    }, [quizQuestions, quiz.shuffleOptions]);\n\n    const handleSubmitQuiz = useCallback(() => {\n        if (isSubmitting) return;\n        setIsSubmitting(true);\n        if (onSubmit) {\n            onSubmit(answers, quizQuestions);\n        }\n    }, [isSubmitting, onSubmit, answers, quizQuestions]);\n\n    useEffect(() => {\n        if (isPracticeMode) return;\n        if (timeLeft <= 0) {\n            handleSubmitQuiz();\n            return;\n        }\n        const timer = setInterval(() => setTimeLeft(t => t - 1), 1000);\n        return () => clearInterval(timer);\n    }, [timeLeft, isPracticeMode, handleSubmitQuiz]);\n\n    const handleAnswerChange = (questionId, answer) => {\n        if (isPracticeMode && isAnswerChecked) return;\n        setAnswers(prev => ({ ...prev, [questionId]: answer }));\n    };\n\n    const handleCheckAnswer = () => setIsAnswerChecked(true);\n    const handleNextQuestion = () => {\n        setIsAnswerChecked(false);\n        setCurrentQuestionIndex(prev => prev + 1);\n    };\n\n    const formatTime = (seconds) => `${Math.floor(seconds / 60)}:${('0' + seconds % 60).slice(-2)}`;\n\n    if (!quizQuestions || quizQuestions.length === 0) return <Card><p>Bu testdə hələlik sual yoxdur.</p></Card>;\n\n    const progress = ((currentQuestionIndex + 1) / quizQuestions.length) * 100;\n\n    return (\n        <div className=\"animate-fade-in\">\n            <Card>\n                <div className=\"flex flex-col sm:flex-row justify-between items-center mb-2 gap-4\">\n                    <h1 className=\"text-xl sm:text-2xl font-bold text-orange-600 text-center sm:text-left\">{quiz.title}</h1>\n                    {!isPracticeMode && <div className=\"text-2xl font-bold text-orange-500 bg-orange-100 px-4 py-2 rounded-lg w-full sm:w-auto text-center\">{formatTime(timeLeft)}</div>}\n                    {isPracticeMode && <div className=\"text-lg font-bold text-blue-500 bg-blue-100 px-4 py-2 rounded-lg w-full sm:w-auto text-center\">Məşq Rejimi</div>}\n                </div>\n                {!isPracticeMode && user && <p className=\"text-center sm:text-left text-gray-600 mb-4\">Uğurlar, {user.first_name}!</p>}\n                {!displayAll && !isPracticeMode && <div className=\"w-full bg-gray-200 rounded-full h-2.5 mb-6\"><div className=\"bg-gradient-to-r from-orange-400 to-red-500 h-2.5 rounded-full transition-all duration-500\" style={{ width: `${progress}%` }}></div></div>}\n                \n                {displayAll ? (\n                    quizQuestions.map((q, index) => (\n                        <QuestionRenderer key={q.id} q={q} index={index} answers={answers} handleAnswerChange={handleAnswerChange} isPracticeMode={false} isAnswerChecked={false} shuffledOptions={shuffledOptions} isSubmitting={isSubmitting} />\n                    ))\n                ) : (\n                    <QuestionRenderer q={quizQuestions[currentQuestionIndex]} index={currentQuestionIndex} answers={answers} handleAnswerChange={handleAnswerChange} isPracticeMode={isPracticeMode} isAnswerChecked={isAnswerChecked} shuffledOptions={shuffledOptions} isSubmitting={isSubmitting} />\n                )}\n\n                <div className=\"mt-8 flex flex-col sm:flex-row justify-center items-center gap-4\">\n                    {displayAll ? (\n                        <Button onClick={handleSubmitQuiz} disabled={isSubmitting} className=\"w-full sm:w-auto\">\n                            {isSubmitting ? 'Göndərilir...' : <><CheckIcon /> Testi Bitir</>}\n                        </Button>\n                    ) : isPracticeMode ? (\n                        isAnswerChecked ? (\n                            currentQuestionIndex < quizQuestions.length - 1 ? (\n                                <Button onClick={handleNextQuestion} className=\"w-full sm:w-auto\">Növbəti <ArrowRightIcon /></Button>\n                            ) : (\n                                <Button onClick={() => navigate('/')} className=\"w-full sm:w-auto\"><CheckIcon /> Məşqi bitir</Button>\n                            )\n                        ) : (\n                            <Button onClick={handleCheckAnswer} disabled={answers[quizQuestions[currentQuestionIndex].id] === undefined} className=\"w-full sm:w-auto\">Yoxla</Button>\n                        )\n                    ) : (\n                        <div className=\"w-full flex justify-between items-center\">\n                            <Button onClick={() => setCurrentQuestionIndex(i => i - 1)} disabled={currentQuestionIndex === 0 || isSubmitting} variant=\"secondary\"><ArrowLeftIcon /> Geri</Button>\n                            <span>{currentQuestionIndex + 1} / {quizQuestions.length}</span>\n                            {currentQuestionIndex < quizQuestions.length - 1 ? (\n                                <Button onClick={() => setCurrentQuestionIndex(i => i + 1)} disabled={isSubmitting}>İrəli <ArrowRightIcon /></Button>\n                            ) : (\n                                <Button onClick={handleSubmitQuiz} disabled={isSubmitting}>\n                                    {isSubmitting ? 'Göndərilir...' : <><CheckIcon /> Bitir</>}\n                                </Button>\n                            )}\n                        </div>\n                    )}\n                </div>\n            </Card>\n        </div>\n    );\n};\n\nexport default TakeQuizPage;\n"],"names":["_ref","children","className","_jsx","concat","question","onAnswer","items","setItems","useState","dragItem","useRef","dragOverItem","useEffect","orderItems","sort","Math","random","handleDragEnd","newItems","draggedItemContent","splice","current","_jsxs","map","item","index","draggable","onDragStart","onDragEnter","onDragEnd","onDragOver","e","preventDefault","isAnswerCorrect","userAnswer","undefined","type","options","correctAnswers","correctOptions","i","userOptions","JSON","stringify","trim","toLowerCase","correctAnswer","QuestionRenderer","q","answers","handleAnswerChange","isPracticeMode","isAnswerChecked","shuffledOptions","isSubmitting","optionsForCurrentQuestion","shuffleOptions","id","getOptionClassName","option","optIndex","_answers$q$id","isCorrect","includes","isSelected","text","onClick","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","lang","speak","alert","speakText","SpeakerIcon","audioUrl","controls","src","imageUrl","alt","onError","target","style","display","name","value","checked","onChange","disabled","_answers$q$id2","curr","next","filter","a","placeholder","OrderingQuestion","orderedItems","rows","explanation","LightbulbIcon","_ref2","quiz","user","onSubmit","mode","navigate","useNavigate","setAnswers","initialState","questions","forEach","timeLeft","setTimeLeft","timeLimit","currentQuestionIndex","setCurrentQuestionIndex","setIsSubmitting","setIsAnswerChecked","displayAll","display_all_questions","quizQuestions","useMemo","shuffleQuestions","shuffled","handleSubmitQuiz","useCallback","timer","setInterval","t","clearInterval","questionId","answer","prev","_objectSpread","length","Card","progress","title","seconds","floor","slice","first_name","width","Button","_Fragment","CheckIcon","handleNextQuestion","ArrowRightIcon","handleCheckAnswer","variant","ArrowLeftIcon"],"sourceRoot":""}