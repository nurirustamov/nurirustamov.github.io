{"version":3,"file":"static/js/987.0f82f299.chunk.js","mappings":"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","sources":["components/ui/ComboBox.js","pages/ArticleEditorPage.js","components/ui/Card.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\n\r\nconst ComboBox = ({ options, value, onChange, placeholder }) => {\r\n    const [query, setQuery] = useState('');\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const filteredOptions = useMemo(() => \r\n        query === ''\r\n            ? options\r\n            : options.filter(option => \r\n                option.toLowerCase().includes(query.toLowerCase())\r\n            )\r\n    , [query, options]);\r\n\r\n    const handleSelect = (option) => {\r\n        onChange(option);\r\n        setQuery('');\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        setQuery(e.target.value);\r\n        onChange(e.target.value); // Allow creating new categories\r\n        if (!isOpen) {\r\n            setIsOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"relative w-full\">\r\n            <input \r\n                type=\"text\"\r\n                value={value}\r\n                onChange={handleInputChange}\r\n                onFocus={() => setIsOpen(true)}\r\n                onBlur={() => setTimeout(() => setIsOpen(false), 150)} // Delay to allow click on option\r\n                placeholder={placeholder}\r\n                className=\"w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\r\n            />\r\n            {isOpen && (\r\n                <ul className=\"absolute z-10 w-full bg-white border border-gray-300 rounded-md shadow-lg mt-1 max-h-60 overflow-auto\">\r\n                    {filteredOptions.length > 0 ? (\r\n                        filteredOptions.map(option => (\r\n                            <li \r\n                                key={option}\r\n                                onMouseDown={() => handleSelect(option)} // Use onMouseDown to fire before onBlur\r\n                                className=\"px-3 py-2 cursor-pointer hover:bg-orange-100\"\r\n                            >\r\n                                {option}\r\n                            </li>\r\n                        ))\r\n                    ) : (\r\n                        <li className=\"px-3 py-2 text-gray-500\">Nəticə tapılmadı.</li>\r\n                    )}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComboBox;","import React, { useState, useEffect, useMemo, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Editor } from '@tinymce/tinymce-react';\nimport mammoth from 'mammoth';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport ComboBox from '../components/ui/ComboBox';\nimport { ArrowLeftIcon, CheckIcon, DocumentTextIcon, PencilAltIcon, UploadIcon } from '../assets/icons';\n\nconst ArticleEditorPage = ({ article, onSave, showToast, existingArticleCategories, quizzes }) => {\n    const [draft, setDraft] = useState(article);\n    const [selectedQuizIds, setSelectedQuizIds] = useState(new Set());\n    const [selectedQuizCategory, setSelectedQuizCategory] = useState('all');\n    const navigate = useNavigate();\n    const fileInputRef = useRef(null);\n    const editorRef = useRef(null); // Ref for TinyMCE editor instance\n\n    useEffect(() => {\n        setDraft(article);\n        const initialQuizIds = new Set((article?.article_quizzes || []).map(aq => aq.quiz_id));\n        setSelectedQuizIds(initialQuizIds);\n    }, [article]);\n\n    const handleDraftChange = (e) => {\n        const { name, value, type, checked } = e.target;\n        setDraft(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value }));\n    };\n\n    const handleCategoryChange = (value) => {\n        setDraft(prev => ({ ...prev, category: value }));\n    };\n\n    const onContentChange = (content) => {\n        setDraft(prev => ({ ...prev, content: content }));\n    };\n\n    const handleQuizSelection = (quizId) => {\n        const newSelection = new Set(selectedQuizIds);\n        if (newSelection.has(quizId)) {\n            newSelection.delete(quizId);\n        } else {\n            newSelection.add(quizId);\n        }\n        setSelectedQuizIds(newSelection);\n    };\n\n    const handleSave = () => {\n        if (!draft.title || !draft.title.trim()) {\n            showToast('Məqalə başlığı boş ola bilməz.');\n            return;\n        }\n        onSave({ ...draft, selectedQuizIds: Array.from(selectedQuizIds) });\n    };\n\n    const handleWordUpload = (event) => {\n        const file = event.target.files[0];\n        if (!file) return;\n\n        showToast('Word sənədi çevrilir...');\n        const reader = new FileReader();\n\n        reader.onload = (loadEvent) => {\n            const arrayBuffer = loadEvent.target.result;\n            mammoth.convertToHtml({ arrayBuffer: arrayBuffer })\n                .then(result => {\n                    // Insert HTML directly into TinyMCE editor\n                    if (editorRef.current) {\n                        editorRef.current.setContent(result.value);\n                        onContentChange(result.value); // Also update React state\n                    }\n                    showToast('Məqalə uğurla idxal edildi!', 'success');\n                })\n                .catch(error => {\n                    console.error(\"Docx to HTML conversion error:\", error);\n                    showToast('Word sənədini çevirərkən xəta baş verdi.', 'error');\n                });\n        };\n\n        reader.onerror = (error) => {\n            console.error(\"File reading error:\", error);\n            showToast('Sənədi oxuyarkən xəta baş verdi.', 'error');\n        };\n\n        reader.readAsArrayBuffer(file);\n        event.target.value = null; // Reset file input\n    };\n\n    const triggerFileUpload = () => {\n        fileInputRef.current.click();\n    };\n\n    const quizCategories = useMemo(() => {\n        return ['all', ...new Set((quizzes || []).map(q => q.category || 'Kateqoriyasız'))];\n    }, [quizzes]);\n\n    const filteredQuizzes = useMemo(() => {\n        if (!quizzes) return [];\n        if (selectedQuizCategory === 'all') {\n            return quizzes;\n        }\n        return quizzes.filter(q => (q.category || 'Kateqoriyasız') === selectedQuizCategory);\n    }, [quizzes, selectedQuizCategory]);\n\n    if (!draft) return <div>Yüklənir...</div>;\n\n    return (\n        <div className=\"animate-fade-in\">\n            <div className=\"grid lg:grid-cols-3 gap-8 items-start\">\n                {/* Left Panel */}\n                <div className=\"lg:col-span-1 space-y-6 lg:sticky lg:top-24\">\n                    <div className=\"flex flex-col gap-2\">\n                        <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800\">Məqalə Redaktoru</h1>\n                        <div className=\"flex flex-col sm:flex-row gap-2\">\n                            <Button onClick={() => navigate('/admin/articles')} variant=\"secondary\" className=\"w-full justify-center\"><ArrowLeftIcon /> Siyahıya qayıt</Button>\n                            <Button onClick={handleSave} className=\"w-full justify-center\"><CheckIcon /> Yadda saxla</Button>\n                        </div>\n                    </div>\n                    <Card>\n                        <h3 className=\"font-bold text-gray-800 mb-3 flex items-center gap-2\"><DocumentTextIcon /> Əsas Məlumatlar</h3>\n                        <div className=\"space-y-4\">\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Başlıq</label>\n                                <input type=\"text\" name=\"title\" value={draft.title || ''} onChange={handleDraftChange} className=\"w-full p-2 border border-gray-300 rounded-md\" />\n                            </div>\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Kateqoriya</label>\n                                <ComboBox options={existingArticleCategories} value={draft.category || ''} onChange={handleCategoryChange} placeholder=\"Kateqoriya seçin...\" />\n                            </div>\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Giriş Kodu (Könüllü)</label>\n                                <input type=\"text\" name=\"passcode\" value={draft.passcode || ''} onChange={handleDraftChange} className=\"w-full p-2 border border-gray-300 rounded-md\" placeholder=\"Məqalə üçün parol təyin et\" />\n                            </div>\n                            <div>\n                                <label className=\"flex items-center cursor-pointer\">\n                                    <input type=\"checkbox\" name=\"is_published\" checked={!!draft.is_published} onChange={handleDraftChange} className=\"h-4 w-4 text-orange-600 rounded border-gray-300\" />\n                                    <span className=\"ml-2 text-sm text-gray-700\">Dərc edilsin</span>\n                                </label>\n                            </div>\n                        </div>\n                    </Card>\n                    <Card>\n                        <h3 className=\"font-bold text-gray-800 mb-3 flex items-center gap-2\"><PencilAltIcon /> Əlaqəli Testlər</h3>\n                        <div className=\"mb-4\">\n                            <label htmlFor=\"quiz-category-filter\" className=\"block text-sm font-medium text-gray-700 mb-1\">Testləri kateqoriya üzrə filtr edin</label>\n                            <select\n                                id=\"quiz-category-filter\"\n                                value={selectedQuizCategory}\n                                onChange={e => setSelectedQuizCategory(e.target.value)}\n                                className=\"w-full p-2 border border-gray-300 rounded-md bg-white focus:ring-orange-500 focus:border-orange-500\"\n                            >\n                                {quizCategories.map(cat => <option key={cat} value={cat}>{cat === 'all' ? 'Bütün Testlər' : cat}</option>)}\n                            </select>\n                        </div>\n                        <div className=\"max-h-48 overflow-y-auto space-y-2 pr-2\">\n                            {filteredQuizzes.length > 0 ? filteredQuizzes.map(quiz => (\n                                <div key={quiz.id}>\n                                    <label className=\"flex items-center cursor-pointer p-2 rounded-md hover:bg-gray-100\">\n                                        <input type=\"checkbox\" checked={selectedQuizIds.has(quiz.id)} onChange={() => handleQuizSelection(quiz.id)} className=\"h-4 w-4 text-orange-600 rounded border-gray-300\" />\n                                        <span className=\"ml-3 text-sm text-gray-800\">{quiz.title}</span>\n                                    </label>\n                                </div>\n                            )) : <p className=\"text-sm text-gray-500 text-center py-4\">Bu kateqoriyada test yoxdur.</p>}\n                        </div>\n                    </Card>\n                </div>\n\n                {/* Right Panel */}\n                <div className=\"lg:col-span-2 space-y-6\">\n                    <Card>\n                        <div className=\"flex justify-between items-center mb-3\">\n                            <h3 className=\"font-bold text-gray-800\">Məqalə Məzmunu</h3>\n                            <div>\n                                <input type=\"file\" ref={fileInputRef} onChange={handleWordUpload} accept=\".docx\" className=\"hidden\" />\n                                <Button onClick={triggerFileUpload} variant=\"secondary\"><UploadIcon /> Word-dən idxal et</Button>\n                            </div>\n                        </div>\n                        <Editor\n                            apiKey=\"ocpsuuiv9mu6iw0y1u66hwuexghbh8jfdb2tmom17zk5nqo5\"\n                            onInit={(evt, editor) => editorRef.current = editor}\n                            value={draft.content || ''}\n                            onEditorChange={onContentChange}\n                            init={{\n                                height: 500,\n                                menubar: false,\n                                plugins: [\n                                    'advlist autolink lists link image charmap print preview anchor',\n                                    'searchreplace visualblocks code fullscreen',\n                                    'insertdatetime media table paste code help wordcount'\n                                ],\n                                toolbar: 'undo redo | formatselect | ' +\n                                    'bold italic backcolor | alignleft aligncenter ' +\n                                    'alignright alignjustify | bullist numlist outdent indent | ' +\n                                    'removeformat | help'\n                            }}\n                        />\n                    </Card>\n                    {/* Preview Card is no longer needed as TinyMCE is WYSIWYG */}\n                    {/* <Card>\n                        <h3 className=\"font-bold text-gray-800 mb-3\">Önizləmə</h3>\n                        <div className=\"prose max-w-none p-4 border rounded-md bg-gray-50 min-h-[200px]\">\n                            <ReactMarkdown remarkPlugins={[remarkGfm]}>{draft.content || 'Önizləmə üçün məzmun daxil edin...'}</ReactMarkdown>\n                        </div>\n                    </Card> */}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ArticleEditorPage;\n","import React from 'react';\n\nconst Card = ({ children, className = '' }) => (\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\n);\n\nexport default Card;"],"names":["_ref","options","value","onChange","placeholder","query","setQuery","useState","isOpen","setIsOpen","filteredOptions","useMemo","filter","option","toLowerCase","includes","_jsxs","className","children","_jsx","type","e","target","onFocus","onBlur","setTimeout","length","map","onMouseDown","handleSelect","article","onSave","showToast","existingArticleCategories","quizzes","draft","setDraft","selectedQuizIds","setSelectedQuizIds","Set","selectedQuizCategory","setSelectedQuizCategory","navigate","useNavigate","fileInputRef","useRef","editorRef","useEffect","initialQuizIds","article_quizzes","aq","quiz_id","handleDraftChange","name","checked","prev","_objectSpread","onContentChange","content","quizCategories","q","category","filteredQuizzes","Button","onClick","variant","ArrowLeftIcon","handleSave","title","trim","Array","from","CheckIcon","Card","DocumentTextIcon","ComboBox","passcode","is_published","PencilAltIcon","htmlFor","id","cat","quiz","has","quizId","newSelection","delete","add","handleQuizSelection","ref","event","file","files","reader","FileReader","onload","loadEvent","arrayBuffer","result","mammoth","then","current","setContent","catch","error","console","onerror","readAsArrayBuffer","accept","triggerFileUpload","click","UploadIcon","Editor","apiKey","onInit","evt","editor","onEditorChange","init","height","menubar","plugins","toolbar","concat"],"sourceRoot":""}