{"version":3,"file":"static/js/863.a5170d4e.chunk.js","mappings":"mLAKA,MAAMA,EAAcA,KAChBC,EAAAA,EAAAA,KAAA,OAAKC,MAAM,6BAA6BC,UAAU,UAAUC,KAAK,OAAOC,QAAQ,YAAYC,OAAO,eAAeC,YAAa,EAAEC,UAC7HP,EAAAA,EAAAA,KAAA,QAAMQ,cAAc,QAAQC,eAAe,QAAQC,EAAE,2EAIvDC,EAAiBC,IAA+D,IAA9D,OAAEC,EAAM,QAAEC,EAAO,UAAEC,EAAS,WAAEC,EAAU,aAAEC,GAAcL,EAC5E,MAAOM,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,KACtCC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,IAAIG,KAE/CC,GAAgBC,EAAAA,EAAAA,SAAQ,KAC1B,MAAMC,EAAiBR,EAAWS,cAClC,OAAOX,EAAWY,OAAOC,IACpBZ,EAAaa,SAASD,IAAQA,EAAIF,cAAcG,SAASJ,KAE/D,CAACV,EAAYC,EAAcC,IAmB9B,OACIa,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACnB,OAAQA,EAAQC,QAASA,EAASmB,MAAM,uBAAmB1B,SAAA,EAC9DP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,OAAOC,YAAY,eAAeC,MAAOlB,EAAYmB,SAAUC,GAAKnB,EAAcmB,EAAEC,OAAOH,OAAQlC,UAAU,uDACzHF,EAAAA,EAAAA,KAAA,OAAKE,UAAU,0CAAyCK,SACnDiB,EAAcgB,IAAIX,IACfE,EAAAA,EAAAA,MAAA,SAAiB7B,UAAU,oEAAmEK,SAAA,EAC1FP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,WAAWO,QAASpB,EAAaqB,IAAIb,GAAMQ,SAAUA,IAvB5DR,KACrB,MAAMc,EAAe,IAAIpB,IAAIF,GACzBsB,EAAaD,IAAIb,GACjBc,EAAaC,OAAOf,GAEpBc,EAAaE,IAAIhB,GAErBP,EAAgBqB,IAgBuEG,CAAgBjB,GAAM3B,UAAU,yCACtG2B,IAFOA,OAMpB7B,EAAAA,EAAAA,KAAA,OAAKE,UAAU,wBAAuBK,UAClCwB,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAACC,QAnBFC,KACdlC,EAAUmC,MAAMC,KAAK9B,IACrBP,IACAQ,EAAgB,IAAIC,KACpBJ,EAAc,KAesBiC,SAAgC,IAAtB/B,EAAagC,KAAW9C,SAAA,CAAC,iDAAwBc,EAAagC,KAAK,aAMnHC,EAAYC,IAA+C,IAA9C,KAAEC,EAAO,GAAE,SAAEC,EAAQ,WAAEzC,EAAa,IAAIuC,EACvD,MAAOG,EAAYC,IAAiBvC,EAAAA,EAAAA,UAAS,KACtCwC,EAAaC,IAAkBzC,EAAAA,EAAAA,WAAS,GAczC0C,EAAUjC,IACRA,IAAQ2B,EAAK1B,SAASD,IACtB4B,EAAS,IAAID,EAAM3B,KAQ3B,OACIE,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,+CAA8CK,SAAC,0EAChEwB,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,qFAAoFK,SAAA,CAC9FiD,EAAKhB,IAAI,CAACX,EAAKkC,KACZhC,EAAAA,EAAAA,MAAA,QAAkB7B,UAAU,qGAAoGK,SAAA,CAC3HsB,GACD7B,EAAAA,EAAAA,KAAA,UAAQgD,QAASA,KAAMgB,OArBxBC,EAqBkCpC,OApBjD4B,EAASD,EAAK5B,OAAOC,GAAOA,IAAQoC,IADrBA,OAqBwC/D,UAAU,wCAAuCK,UACpFP,EAAAA,EAAAA,KAACD,EAAW,CAACG,UAAU,gBAHpB6D,KAOf/D,EAAAA,EAAAA,KAAA,SACIkC,KAAK,OACLE,MAAOsB,EACPrB,SAAWC,GAAMqB,EAAcrB,EAAEC,OAAOH,OACxC8B,UAtCO5B,IACL,UAAVA,EAAE6B,KAA6B,MAAV7B,EAAE6B,MACvB7B,EAAE8B,iBACFN,EAAOJ,EAAWW,QAClBV,EAAc,MAmCNxB,YAAY,iCACZjC,UAAU,iEAEbc,EAAWsD,OAAS,IACjBtE,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,CAACC,QAASA,IAAMa,GAAe,GAAOU,QAAQ,YAAYlB,KAAK,KAAKnD,UAAU,+BAA+B+B,MAAM,qBAAiB1B,UACvIP,EAAAA,EAAAA,KAACwE,EAAAA,GAAQ,CAACtE,UAAU,kBAIhCF,EAAAA,EAAAA,KAACW,EAAc,CACXE,OAAQ+C,EACR9C,QAASA,IAAM+C,GAAe,GAC9B9C,UAjCmB0D,IAC3BhB,EAAS,IAAID,KAASiB,KAiCdzD,WAAYA,EACZC,aAAcuC,QAMxBkB,EAAeC,IAA6B,IAADC,EAAA,IAA3B,SAAEC,EAAQ,SAAEpB,GAAUkB,EACxC,MAeMG,EAAiCxC,IACnCmB,GAAQsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIF,GAAQ,IAAEG,eAAgB,CAAC1C,EAAEC,OAAOH,WAEhD6C,EAAyB7C,IAC3BqB,GAAQsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIF,GAAQ,IAAEK,cAAe9C,MAErC+C,EAAYA,KACd1B,GAAQsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIF,GAAQ,IAAEO,QAAS,IAAIP,EAASO,QAAS,QAcrDC,EAAeA,KACjB5B,GAAQsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIF,GAAQ,IAAES,WAAY,IAAKT,EAASS,YAAc,GAAK,QAMnEC,EAA+BjD,IACjC,MAAMkD,EAAOlD,EAAEC,OAAOH,MAChB4C,GAAkBQ,EAAKC,MAAM,eAAiB,IAAIjD,IAAIkD,GAAKA,EAAEC,MAAM,GAAI,IAC7ElC,GAAQsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACHF,GAAQ,IACXW,KAAMA,EACNR,eAAgBA,EAChBI,QAAS,OAIjB,OAAQP,EAAS3C,MACb,IAAK,SACL,IAAK,WACD,OACIH,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,MAAIE,UAAU,mCAAkCK,SAAC,4BACjDP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWK,SACrBsE,EAASO,QAAQ5C,IAAI,CAACoD,EAAQC,KAC3B9D,EAAAA,EAAAA,MAAA,OAAe7B,UAAU,0BAAyBK,SAAA,EAC9CP,EAAAA,EAAAA,KAAA,SAAOkC,KAAwB,WAAlB2C,EAAS3C,KAAoB,QAAU,WAAY4D,KAAI,iBAAAC,OAAmBlB,EAASmB,IAAMvD,QAASoC,EAASG,eAAelD,SAAS+D,GAAMxD,SAAUA,IA1DzJ0B,KAC/B,GAAsB,WAAlBc,EAAS3C,KACTuB,GAAQsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIF,GAAQ,IAAEG,eAAgB,CAACjB,UACtC,CACH,MAAMkC,EAAapB,EAASG,eAAelD,SAASiC,GAC9Cc,EAASG,eAAepD,OAAOsE,GAAKA,IAAMnC,GAC1C,IAAIc,EAASG,eAAgBjB,GACnCN,GAAQsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIF,GAAQ,IAAEG,eAAgBiB,IAC5C,GAkD8LE,CAA0BN,GAAM3F,UAAU,2EAChNF,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,OAAOE,MAAOwD,EAAQvD,SAAWC,GAhE9C8D,EAACrC,EAAO3B,KAC/B,MAAMiE,EAAa,IAAIxB,EAASO,SAChCiB,EAAWtC,GAAS3B,EACpBqB,GAAQsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIF,GAAQ,IAAEO,QAASiB,MA6D0CD,CAAmBP,EAAKvD,EAAEC,OAAOH,OAAQD,YAAW,WAAA4D,OAAaF,EAAM,GAAK3F,UAAU,0GACzIF,EAAAA,EAAAA,KAAA,UAAQgD,QAASA,IAzCvBe,KAClB,MAAMsC,EAAaxB,EAASO,QAAQxD,OAAO,CAAC0E,EAAGJ,IAAMA,IAAMnC,GACrDkC,EAAapB,EAASG,eACvBpD,OAAOsE,GAAKA,IAAMnC,GAClBvB,IAAI0D,GAAMA,EAAInC,EAAQmC,EAAI,EAAIA,GACnCzC,GAAQsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIF,GAAQ,IAAEO,QAASiB,EAAYrB,eAAgBiB,MAoCdM,CAAaV,GAAM3F,UAAU,oDAAmDK,UAACP,EAAAA,EAAAA,KAACwG,EAAAA,GAAS,QAH5GX,OAOlB9D,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAACC,QAASmC,EAAWZ,QAAQ,YAAYrE,UAAU,eAAcK,SAAA,EAACP,EAAAA,EAAAA,KAACwE,EAAAA,GAAQ,IAAG,oCAGjG,IAAK,YACD,OACIzC,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,qFAC3DP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,OAAOE,MAAOyC,EAASG,eAAe,IAAM,GAAI3C,SAAUyC,EAA+B3C,YAAY,sCAA2BjC,UAAU,uHAGlK,IAAK,YACD,OACI6B,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,+BAA8BK,SAAA,EACzCwB,EAAAA,EAAAA,MAAA,SAAO7B,UAAU,8JAA6JK,SAAA,EAACP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,QAAQ4D,KAAI,MAAAC,OAAQlB,EAASmB,IAAMvD,SAAoC,IAA3BoC,EAASK,cAAwB7C,SAAUA,IAAM4C,GAAsB,GAAO/E,UAAU,4BAA4B,KAACF,EAAAA,EAAAA,KAAA,QAAME,UAAU,OAAMK,SAAC,mBACnXwB,EAAAA,EAAAA,MAAA,SAAO7B,UAAU,8JAA6JK,SAAA,EAACP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,QAAQ4D,KAAI,MAAAC,OAAQlB,EAASmB,IAAMvD,SAAoC,IAA3BoC,EAASK,cAAyB7C,SAAUA,IAAM4C,GAAsB,GAAQ/E,UAAU,4BAA4B,KAACF,EAAAA,EAAAA,KAAA,QAAME,UAAU,OAAMK,SAAC,2BAGjY,IAAK,WACD,OACIwB,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,MAAIE,UAAU,mCAAkCK,SAAC,4FACjDP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWK,SACF,QADEqE,EACrBC,EAASS,kBAAU,IAAAV,OAAA,EAAnBA,EAAqBpC,IAAI,CAACiE,EAAMZ,KAC7B9D,EAAAA,EAAAA,MAAA,OAAe7B,UAAU,0BAAyBK,SAAA,EAC9CwB,EAAAA,EAAAA,MAAA,QAAM7B,UAAU,0BAAyBK,SAAA,CAAEsF,EAAM,EAAE,QACnD7F,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,OAAOE,MAAOqE,EAAMpE,SAAWC,GA/DzCoE,EAAC3C,EAAO3B,KAClC,MAAMuE,EAAW,IAAK9B,EAASS,YAAc,IAC7CqB,EAAS5C,GAAS3B,EAClBqB,GAAQsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIF,GAAQ,IAAES,WAAYqB,MA4DqCD,CAAsBb,EAAKvD,EAAEC,OAAOH,OAAQD,YAAW,WAAA4D,OAAaF,EAAM,GAAK3F,UAAU,0GAC1IF,EAAAA,EAAAA,KAAA,UAAQgD,QAASA,IAxDpBe,KACrB,MAAM4C,EAAW9B,EAASS,WAAW1D,OAAO,CAAC0E,EAAGJ,IAAMA,IAAMnC,GAC5DN,GAAQsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAIF,GAAQ,IAAES,WAAYqB,MAsDWC,CAAgBf,GAAM3F,UAAU,oDAAmDK,UAACP,EAAAA,EAAAA,KAACwG,EAAAA,GAAS,QAH/GX,OAOlB9D,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAACC,QAASqC,EAAcd,QAAQ,YAAYrE,UAAU,eAAcK,SAAA,EAACP,EAAAA,EAAAA,KAACwE,EAAAA,GAAQ,IAAG,oCAGpG,IAAK,kBACD,OACIzC,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,sCAC3DP,EAAAA,EAAAA,KAAA,KAAGE,UAAU,6BAA4BK,SAAC,uIAC1CP,EAAAA,EAAAA,KAAA,YAAUoC,MAAOyC,EAASW,MAAQ,GAAInD,SAAUkD,EAA6BpD,YAAY,2BAAsB0E,KAAK,IAAI3G,UAAU,uHAG9I,IAAK,OACD,OACI6B,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,0EAAyEK,SAAA,EACpFP,EAAAA,EAAAA,KAAC8G,EAAAA,GAAa,CAAC5G,UAAU,aACzBF,EAAAA,EAAAA,KAAA,QAAAO,SAAM,6GAGlB,QAAS,OAAO,OA6FxB,EAzFuBwG,IAA0G,IAAzG,SAAElC,EAAQ,MAAEd,EAAK,SAAEN,EAAQ,SAAEuD,EAAQ,YAAEC,EAAW,aAAEC,EAAY,oBAAEC,EAAmB,WAAEnG,GAAY+F,EACvH,MAAOK,EAAeC,IAAoBjG,EAAAA,EAAAA,UAASyD,IAEnDyC,EAAAA,EAAAA,WAAU,KACND,EAAiBxC,IAClB,CAACA,KAEJyC,EAAAA,EAAAA,WAAU,KACN,MAAMC,EAAUC,WAAW,KACnBC,KAAKC,UAAUN,KAAmBK,KAAKC,UAAU7C,IACjDpB,EAAS2D,IAEd,KACH,MAAO,IAAMO,aAAaJ,IAC3B,CAACH,EAAe3D,EAAUoB,IAE7B,MAAM+C,EAAqBtF,IACvB,MAAM,KAAEwD,EAAI,MAAE1D,EAAK,KAAEF,GAASI,EAAEC,OAC1BsF,EAA0B,WAAT3F,EAAoB4F,SAAS1F,EAAO,IAAMA,EACjEiF,EAAiBU,IAAIhD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUgD,GAAI,IAAE,CAACjC,GAAO+B,MAOjD,OACI9F,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,qEAAoEK,SAAA,EAC/EwB,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,4FAA2FK,SAAA,EACtGwB,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,oCAAmCK,SAAA,EAC9CP,EAAAA,EAAAA,KAAA,QAAME,UAAU,iHAAgHK,SAAEwD,EAAQ,KAC1IhC,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,4BAC3DwB,EAAAA,EAAAA,MAAA,UAAQ+D,KAAK,OAAO1D,MAAOgF,EAAclF,KAAMG,SAAUuF,EAAmB1H,UAAU,8HAA6HK,SAAA,EAC/MP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,SAAQ7B,SAAC,oBACvBP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,WAAU7B,SAAC,4BACzBP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,YAAW7B,SAAC,+BAC1BP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,YAAW7B,SAAC,iCAC1BP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,WAAU7B,SAAC,mBACzBP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,OAAM7B,SAAC,uBACrBP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,kBAAiB7B,SAAC,uCAGxCwB,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,YAC3DP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,SAAS4D,KAAK,SAAS1D,MAAOgF,EAAcY,QAAU,EAAG3F,SAAUuF,EAAmBK,IAAI,IAAI/H,UAAU,qIAG5H6B,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,0BAAyBK,SAAA,EACpCP,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,CAACC,QAASmE,EAAqB5C,QAAQ,YAAYrE,UAAU,OAAO+B,MAAM,mCAAwB1B,UAACP,EAAAA,EAAAA,KAAC8G,EAAAA,GAAa,OACxH9G,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,CAACC,QAASkE,EAAc3C,QAAQ,YAAYrE,UAAU,OAAO+B,MAAM,sCAAsB1B,UAACP,EAAAA,EAAAA,KAACkI,EAAAA,GAAW,OAC7GlI,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,CAACC,QAASiE,EAAa1C,QAAQ,YAAYrE,UAAU,OAAO+B,MAAM,cAAa1B,UAACP,EAAAA,EAAAA,KAACmI,EAAAA,EAAa,OACrGnI,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,CAACC,QAASgE,EAAUzC,QAAQ,SAASrE,UAAU,OAAO+B,MAAM,iBAAW1B,UAACP,EAAAA,EAAAA,KAACwG,EAAAA,GAAS,aAIjGzE,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,gBAAeK,SAAA,CACF,oBAAvB6G,EAAclF,MACXlC,EAAAA,EAAAA,KAAC0E,EAAY,CAACG,SAAUuC,EAAe3D,SAAU4D,KAEjDtF,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,4BAC3DP,EAAAA,EAAAA,KAAA,YAAU8F,KAAK,OAAO1D,MAAOgF,EAAc5B,KAAMnD,SAAUuF,EAAmBzF,YAAY,8CAA+B0E,KAAK,IAAI3G,UAAU,wHAGpJ6B,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,8DAC3DP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,OAAO4D,KAAK,WAAW1D,MAAOgF,EAAcgB,UAAY,GAAI/F,SAAUuF,EAAmBzF,YAAY,gCAAgCjC,UAAU,wHAE/J6B,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,oDAC3DP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,OAAO4D,KAAK,WAAW1D,MAAOgF,EAAciB,UAAY,GAAIhG,SAAUuF,EAAmBzF,YAAY,gCAAgCjC,UAAU,wHAE/JF,EAAAA,EAAAA,KAACsD,EAAS,CAACE,KAAM4D,EAAc5D,MAAQ,GAAIC,SAnD7B6E,IACtBjB,EAAiBU,IAAIhD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUgD,GAAI,IAAEvE,KAAM8E,MAkDoCtH,WAAYA,KACnFe,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,kDAC3DP,EAAAA,EAAAA,KAAA,YAAU8F,KAAK,cAAc1D,MAAOgF,EAAcmB,aAAe,GAAIlG,SAAUuF,EAAmBzF,YAAY,iEAA4C0E,KAAK,IAAI3G,UAAU,0HAI7J,oBAAvBkH,EAAclF,OACXlC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,0DAAyDK,UACpEP,EAAAA,EAAAA,KAAC0E,EAAY,CAACG,SAAUuC,EAAe3D,SAAU4D,S,yDClUrE,MA0DA,EA1DiBzG,IAAgD,IAA/C,QAAEwE,EAAO,MAAEhD,EAAK,SAAEC,EAAQ,YAAEF,GAAavB,EACvD,MAAO4H,EAAOC,IAAYrH,EAAAA,EAAAA,UAAS,KAC5BP,EAAQ6H,IAAatH,EAAAA,EAAAA,WAAS,GAE/BuH,GAAkBlH,EAAAA,EAAAA,SAAQ,IAClB,KAAV+G,EACMpD,EACAA,EAAQxD,OAAOgE,GACbA,EAAOjE,cAAcG,SAAS0G,EAAM7G,gBAE9C,CAAC6G,EAAOpD,IAgBV,OACIrD,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,kBAAiBK,SAAA,EAC5BP,EAAAA,EAAAA,KAAA,SACIkC,KAAK,OACLE,MAAOA,EACPC,SAbeC,IACvBmG,EAASnG,EAAEC,OAAOH,OAClBC,EAASC,EAAEC,OAAOH,OACbvB,GACD6H,GAAU,IAUNE,QAASA,IAAMF,GAAU,GACzBG,OAAQA,IAAMrB,WAAW,IAAMkB,GAAU,GAAQ,KACjDvG,YAAaA,EACbjC,UAAU,yGAEbW,IACGb,EAAAA,EAAAA,KAAA,MAAIE,UAAU,wGAAuGK,SAChHoI,EAAgBrE,OAAS,EACtBqE,EAAgBnG,IAAIoD,IAChB5F,EAAAA,EAAAA,KAAA,MAEI8I,YAAaA,IA/BnBlD,KAClBvD,EAASuD,GACT6C,EAAS,IACTC,GAAU,IA4BiCK,CAAanD,GAChC1F,UAAU,+CAA8CK,SAEvDqF,GAJIA,KAQb5F,EAAAA,EAAAA,KAAA,MAAIE,UAAU,0BAAyBK,SAAC,+C,uMCvC1DyI,EAA2BpI,IAAiD,IAAhD,OAAEC,EAAM,QAAEC,EAAO,WAAEmI,EAAU,UAAEC,GAAWtI,EACxE,MAAO4E,EAAM2D,IAAW/H,EAAAA,EAAAA,UAAS,KAC1BgI,EAAUC,IAAejI,EAAAA,EAAAA,UAAS,CAAC,CAAEc,KAAM,SAAUoH,MAAO,MAC5D9F,EAAM+F,IAAWnI,EAAAA,EAAAA,UAAS,KAC1BoI,EAAOC,IAAYrI,EAAAA,EAAAA,UAAS,KAC5BsI,EAAaC,IAAkBvI,EAAAA,EAAAA,UAAS,IACxCwI,EAAYC,IAAiBzI,EAAAA,EAAAA,UAAS,IACtC0I,EAAWC,IAAgB3I,EAAAA,EAAAA,WAAS,IACpC4I,EAAYC,IAAiB7I,EAAAA,EAAAA,UAAS,SACtC8I,EAAUC,IAAe/I,EAAAA,EAAAA,WAAS,IAClCgJ,EAAqBC,IAA0BjJ,EAAAA,EAAAA,WAAS,GACzDkJ,EAAeC,EAAAA,OAAa,MAwB5BC,EAAuBA,CAACzG,EAAO0G,EAAOrI,KACxC,MAAMsI,EAAc,IAAItB,GACxBsB,EAAY3G,GAAO0G,GAAmB,UAAVA,EAAoB3C,SAAS1F,EAAO,IAAMA,EACtEiH,EAAYqB,IA6BhB,OAAK7J,GAGDkB,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACnB,OAAQA,EAAQC,QAASA,EAASmB,MAAM,8CAA8B1B,SAAA,EACzEwB,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,8CAA6CK,SAAA,EACxDwB,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,eAC3DP,EAAAA,EAAAA,KAAA,YAAUoC,MAAOoD,EAAMnD,SAAUC,GAAK6G,EAAQ7G,EAAEC,OAAOH,OAAQyE,KAAK,KAAK3G,UAAU,yDAAyDiC,YAAY,iFAE5JJ,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,4CAC3DP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,OAAOyI,IAAKL,EAAcjI,SA3B5BC,IACtB,GAAIA,EAAEC,OAAOiH,MAAO,CAChB,MAAMoB,EAAW1H,MAAMC,KAAKb,EAAEC,OAAOiH,OACrC,GAAIA,EAAMlF,OAASsG,EAAStG,OAAS,GAEjC,YADA4E,EAAU,0DAGdO,EAAS1B,GAAQ,IAAIA,KAAS6C,GAClC,GAmB8EC,UAAQ,EAACC,OAAO,qCAAqC5K,UAAU,YACjI6B,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAACC,QAASA,IAAMsH,EAAaS,QAAQC,QAASzG,QAAQ,YAAYlB,KAAK,KAAKnD,UAAU,OAAMK,SAAA,EAACP,EAAAA,EAAAA,KAACiL,EAAAA,GAAU,IAAG,kBACjHzB,EAAMlF,OAAS,IACZtE,EAAAA,EAAAA,KAAA,OAAKE,UAAU,iBAAgBK,SAC1BiJ,EAAMhH,IAAI,CAAC0I,EAAMnH,KACdhC,EAAAA,EAAAA,MAAA,OAAiB7B,UAAU,uEAAsEK,SAAA,EAC7FP,EAAAA,EAAAA,KAAA,QAAAO,SAAO2K,EAAKpF,QACZ9F,EAAAA,EAAAA,KAAA,UAAQgD,QAASA,KAAMmI,OAvBnCC,EAuB8CF,OAtB9DzB,EAASD,EAAM5H,OAAOsJ,GAAQA,IAASE,IADvBA,OAuBqDlL,UAAU,kCAAiCK,UAChFP,EAAAA,EAAAA,KAACqL,EAAAA,GAAK,QAHJtH,UAW1B/D,EAAAA,EAAAA,KAAA,MAAIE,UAAU,8BAA6BK,SAAC,kBAC5CP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWK,SACrB6I,EAAS5G,IAAI,CAAC8I,EAAMvH,KACjBhC,EAAAA,EAAAA,MAAA,OAAiB7B,UAAU,oDAAmDK,SAAA,EAC1EwB,EAAAA,EAAAA,MAAA,UAAQK,MAAOkJ,EAAKpJ,KAAMG,SAAUC,GAAKkI,EAAqBzG,EAAO,OAAQzB,EAAEC,OAAOH,OAAQlC,UAAU,2DAA0DK,SAAA,EAC9JP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,SAAQ7B,SAAC,yBACvBP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,WAAU7B,SAAC,uBACzBP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,kBAAiB7B,SAAC,0BAChCP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,YAAW7B,SAAC,iCAC1BP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,YAAW7B,SAAC,8BAC1BP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,WAAU7B,SAAC,mBACzBP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,OAAM7B,SAAC,0BAEzBP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,SAASE,MAAOkJ,EAAKhC,MAAOjH,SAAUC,GAAKkI,EAAqBzG,EAAO,QAASzB,EAAEC,OAAOH,OAAQ6F,IAAI,IAAI/H,UAAU,gDAC/HF,EAAAA,EAAAA,KAAA,QAAME,UAAU,wBAAuBK,SAAC,oBACxCP,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,CAACC,QAASA,IAhEjBe,KAChBqF,EAAS9E,OAAS,GAClB+E,EAAYD,EAASxH,OAAO,CAAC0E,EAAGJ,IAAMA,IAAMnC,KA8DLwH,CAAexH,GAAQQ,QAAQ,SAASlB,KAAK,KAAKD,SAAUgG,EAAS9E,QAAU,EAAE/D,UAACP,EAAAA,EAAAA,KAACwG,EAAAA,GAAS,QAZ7GzC,OAgBlBhC,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAACC,QAxEAwI,KAChBnC,EAAY,IAAID,EAAU,CAAElH,KAAM,SAAUoH,MAAO,MAuEb/E,QAAQ,YAAYlB,KAAK,KAAKnD,UAAU,SAAQK,SAAA,EAACP,EAAAA,EAAAA,KAACwE,EAAAA,GAAQ,IAAG,sBAC3FzC,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,sDAAqDK,SAAA,EAChEwB,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,uBAC3DwB,EAAAA,EAAAA,MAAA,UAAQK,MAAO4H,EAAY3H,SAAUC,GAAK2H,EAAc3H,EAAEC,OAAOH,OAAQlC,UAAU,yDAAwDK,SAAA,EACvIP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,OAAM7B,SAAC,UACrBP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,OAAM7B,SAAC,UACrBP,EAAAA,EAAAA,KAAA,UAAQoC,MAAM,gBAAO7B,SAAC,yBAG9BwB,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,iCAC3DP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,SAASE,MAAOwH,EAAYvH,SAAUC,GAAKuH,EAAc/B,SAASxF,EAAEC,OAAOH,MAAO,KAAM6F,IAAI,IAAIwD,IAAI,IAAIvL,UAAU,+DAElI6B,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,kBAC3DP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,SAASE,MAAOsH,EAAarH,SAAUC,GAAKqH,EAAe7B,SAASxF,EAAEC,OAAOH,MAAO,KAAM6F,IAAI,IAAI/H,UAAU,+DAE5H6B,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,0CAAyCK,SAAC,qDAC3DP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,OAAOE,MAAOoB,EAAMnB,SAAUC,GAAKiH,EAAQjH,EAAEC,OAAOH,OAAQlC,UAAU,yDAAyDiC,YAAY,8CAG/JJ,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,gBAAeK,SAAA,EAC1BwB,EAAAA,EAAAA,MAAA,SAAO7B,UAAU,mCAAkCK,SAAA,EAC/CP,EAAAA,EAAAA,KAAA,SACIkC,KAAK,WACLO,QAASyH,EACT7H,SAAUC,GAAK6H,EAAY7H,EAAEC,OAAOE,SACpCvC,UAAU,qDAEdF,EAAAA,EAAAA,KAAA,QAAME,UAAU,6BAA4BK,SAAC,yFAEjDP,EAAAA,EAAAA,KAAA,KAAGE,UAAU,kCAAiCK,SAAC,qIAEnDwB,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,OAAMK,SAAA,EACjBwB,EAAAA,EAAAA,MAAA,SAAO7B,UAAU,mCAAkCK,SAAA,EAC/CP,EAAAA,EAAAA,KAAA,SACIkC,KAAK,WACLO,QAAS2H,EACT/H,SAAUC,GAAK+H,EAAuB/H,EAAEC,OAAOE,SAC/CvC,UAAU,qDAEdF,EAAAA,EAAAA,KAAA,QAAME,UAAU,6BAA4BK,SAAC,uFAEjDP,EAAAA,EAAAA,KAAA,KAAGE,UAAU,kCAAiCK,SAAC,8LAIvDP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,wBAAuBK,UAClCP,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,CAACC,QAtJG0I,UACnB,GAAKlG,EAAKnB,OAIV,GAAsD,IAAlD+E,EAASuC,OAAO,CAACC,EAAKC,IAAMD,EAAMC,EAAEvC,MAAO,GAA/C,CAIAS,GAAa,GACb,UACUd,EAAWzD,EAAMgE,EAAOJ,EAAU5F,EAAMkG,EAAaE,EAAYM,EAAUF,EAAYI,GAC7FtJ,IACAqI,EAAQ,IACRM,EAAS,GACb,CAAE,MAAOqC,GACL5C,EAAU,yDAADnD,OAAsC+F,EAAMC,SACzD,CAAC,QACGhC,GAAa,EACjB,CAXA,MAFIb,EAAU,iEAJVA,EAAU,kFAoJ2B9F,SAAU0G,EAAUvJ,SAChDuJ,EAAY,0BAAiB/H,EAAAA,EAAAA,MAAAiK,EAAAA,SAAA,CAAAzL,SAAA,EAAEP,EAAAA,EAAAA,KAACiM,EAAAA,GAAY,IAAG,mBAjG5C,MAklBxB,EA1euB1I,IAA0L,IAAzL,KAAE2I,EAAI,OAAEC,EAAM,OAAEC,EAAM,UAAElD,EAAS,mBAAEmD,EAAqB,GAAE,WAAErL,EAAa,GAAE,gBAAEsL,EAAe,qBAAEC,EAAoB,cAAEC,EAAa,qBAAEC,EAAoB,yBAAEC,GAA0BnJ,EACvM,MAAOoJ,EAAmBC,IAAwBxL,EAAAA,EAAAA,WAAS,IAEpDyL,EAAcC,IAAmB1L,EAAAA,EAAAA,UAAS,KAC1C2L,EAAeC,IAAoB5L,EAAAA,EAAAA,UAAS,IAE7C6L,EAAwB3K,IAC1B,MAAM,KAAEwD,EAAI,MAAE1D,EAAK,KAAEF,EAAI,QAAEO,GAAYH,EAAEC,OACzC,IAAI2K,EAAsB,aAAThL,EAAsBO,EAAUL,EACpC,mBAATF,IACAgL,EAAa9K,EAAQ,IAAI+K,KAAK/K,GAAOgL,cAAgB,MAEzDZ,GAAazH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAImH,GAAI,IAAE,CAACpG,GAAOoH,MAO/BG,EAAyBC,IAC3Bd,GAAazH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAImH,GAAI,IAAEqB,UAAWD,MAGlCE,EAAmB,SAACtL,EAAMsD,GAAI,IAAEwC,EAAMyF,UAAAnJ,OAAA,QAAAoJ,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAAC,MAAM,CAClDzH,GAAImH,KAAKQ,MAAQC,KAAKC,SACtBrI,OACAtD,OACA8F,SACA5C,QAAS,CAAC,GAAI,IACdJ,eAAgB,GAChBE,eAAe,EACfI,WAAY,CAAC,GAAI,IACjB8C,SAAU,GACVC,SAAU,GACVE,YAAa,GAChB,EAmDKuF,EAAkBC,IACpBV,EAAsBnB,EAAKqB,UAAU/K,IAAIwL,GAAKA,EAAEhI,KAAO+H,EAAgB/H,GAAK+H,EAAkBC,KAuJ5FC,EAA0BC,IAC5B,IAAKA,EAAW,MAAO,GACvB,MAAMC,EAAO,IAAIhB,KAAKe,GACtB,OAAO,IAAIf,KAAKgB,EAAKC,UAAwC,IAA3BD,EAAKE,qBAA8BjB,cAAczH,MAAM,EAAG,KA0HhG,OAAKuG,GAKDnK,EAAAA,EAAAA,MAAAiK,EAAAA,SAAA,CAAAzL,SAAA,EACAP,EAAAA,EAAAA,KAACgJ,EAAwB,CACrBnI,OAAQ8L,EACR7L,QAASA,IAAM8L,GAAqB,GACpC3D,WAlP0ByC,MAAOlG,EAAMgE,EAAOJ,EAAU5F,EAAMkG,EAAaE,EAAYM,EAAUF,EAAYI,KACjH,MAAMkE,EAAmBlF,EAAS5G,IAAIqJ,GAAC,GAAA9F,OAAO8F,EAAEvC,MAAK,qBAAAvD,OAAU8F,EAAE3J,KAAI,iBAAgBqM,KAAK,MACpFC,EAAiBpF,EAASuC,OAAO,CAACC,EAAKC,IAAMD,EAAMC,EAAEvC,MAAO,GAC5DmF,EAAoBb,KAAKnC,IAAI,EAAGmC,KAAKc,MAAMhF,EAAc8E,IACzDG,EAAYnL,EAAKoL,MAAM,KAAKpM,IAAIqM,GAAKA,EAAExK,QAAQzC,OAAOkN,SAE5D,IAAIC,EAAmB,GACvB,MAAMC,EAAY,GAElB,IAAK,MAAM9D,KAAQ1B,EACf,GAAI0B,EAAKhJ,KAAK+M,WAAW,WAA2B,oBAAd/D,EAAKhJ,KAA4B,CACnE,MAAMgN,QAAe,IAAIC,QAAQ,CAACC,EAASC,KACvC,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAActE,GACrBoE,EAAOG,OAAS,IAAML,EAAQE,EAAOI,OAAOd,MAAM,KAAK,IACvDU,EAAOK,QAAU7D,GAASuD,EAAOvD,KAErCkD,EAAUY,KAAK,CACXC,YAAa,CACTC,UAAW5E,EAAKhJ,KAChB6N,KAAMb,IAGlB,MAAO,GAAIhE,EAAKpF,KAAKkK,SAAS,SAAU,CACpC,MAAMC,QAAoB/E,EAAK+E,cACzBP,QAAeQ,EAAAA,cAAsB,CAAED,gBAEvCE,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAYZ,EAAOtN,MAC3B2M,GAAgB,0CAAAhJ,OAA0BmF,EAAKpF,KAAI,QAAAC,OAAOoK,EAAQI,aAAeJ,EAAQK,WAAa,GAC1G,CAGJ,MAAMC,EAAM,wLAAA1K,OACsFuI,EAAgB,sZAAAvI,OAK/D6D,EAAU,sGAAA7D,OACtB0I,EAAiB,gIAAA1I,OACK0B,KAAKC,UAAUiH,GAAU,2EAAA5I,OAC/CiE,EAAU,wCAAAjE,OAC3CmE,EAAW,kWAAmN,GAAE,kBAAAnE,OAChOqE,EAAsB,gQAA4J,GAAE,2LAAArE,OAG3D0I,EAAiB,oCAAA1I,OAAmC0B,KAAKC,UAAUiH,GAAU,qLAAA5I,OAChE0I,EAAiB,oCAAA1I,OAAmC0B,KAAKC,UAAUiH,GAAU,yIAAA5I,OACzH0I,EAAiB,oCAAA1I,OAAmC0B,KAAKC,UAAUiH,GAAU,wLAAA5I,OACxC0I,EAAiB,oCAAA1I,OAAmC0B,KAAKC,UAAUiH,GAAU,4JAAA5I,OACrG0I,EAAiB,oCAAA1I,OAAmC0B,KAAKC,UAAUiH,GAAU,gLAAA5I,OACpE0I,EAAiB,oCAAA1I,OAAmC0B,KAAKC,UAAUiH,GAAU,wGAAA5I,OACpI0I,EAAiB,oCAAA1I,OAAmC0B,KAAKC,UAAUiH,GAAU,gUAAA5I,OAI/HP,EAAI,KAAAO,OAAIgJ,EAAgB,eAI/B2B,EAAG,GAAA3K,OAAM4K,2CAAkC,8BAE3CC,EAAc,CAChBC,SAAU,CAAC,CAAEC,MAAO,CAAC,CAAEtL,KAAMiL,MAAazB,MAG9C,IACI,MAAM+B,QAAiBC,MAAMN,EAAK,CAC9BO,OAAQ,OACRC,QAAS,CAEL,cAAgB,UAADnL,OAAY4K,oNAC3B,eAAgB,oBAEpBQ,KAAM1J,KAAKC,UAAUkJ,KAGzB,IAAKG,EAASK,GAAI,CAAC,IAADC,EACd,MAAMC,QAAkBP,EAASQ,OAC3BC,GAAwB,OAATF,QAAS,IAATA,GAAgB,QAAPD,EAATC,EAAWxF,aAAK,IAAAuF,OAAP,EAATA,EAAkBtF,UAAWgF,EAASU,WAC3D,MAAM,IAAIC,MAAM,uCAAD3L,OAA8ByL,GACjD,CAEA,MAAMzB,QAAagB,EAASQ,OAE5B,IAAKxB,EAAK4B,YAAyC,IAA3B5B,EAAK4B,WAAWrN,OACpC,MAAM,IAAIoN,MAAM,gDAIpB,IAAIE,EAAa7B,EAAK4B,WAAW,GAAGE,QAAQf,MAAM,GAAGtL,KACrDoM,EAAaA,EAAWE,QAAQ,WAAY,IAAIA,QAAQ,OAAQ,IAAIzN,OAEpE,MACMiJ,EADqB7F,KAAKsK,MAAMH,GACEpP,IAAIwL,IAACjJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAUiJ,GAAC,IAAEhI,GAAImH,KAAKQ,MAAQC,KAAKC,YAChFR,EAAsB,IAAInB,EAAKqB,aAAcD,IAC7CpE,EAAU,GAADnD,OAAIuH,EAAahJ,OAAM,wEAGhCwI,EAAgBtH,EAAOuJ,GACvB/B,EAAiBxD,EAAM5H,OAAOoQ,GAAKA,EAAE9P,KAAK+M,WAAW,WAAwB,oBAAX+C,EAAE9P,MACxE,CAAE,MAAO4J,GAEL,MADAmG,QAAQnG,MAAM,uBAAwBA,GAChC,IAAI4F,MAAM5F,EAAMC,SAAW,4DACrC,GA0II7C,UAAWA,KAEflJ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,kBAAiBK,UAC5BwB,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,wCAAuCK,SAAA,EAGlDwB,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,qGAAoGK,SAAA,EAC/GwB,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,sBAAqBK,SAAA,EAChCP,EAAAA,EAAAA,KAAA,MAAIE,UAAU,+CAA8CK,SAAC,oBAC7DwB,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,kCAAiCK,SAAA,EAC5CwB,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAACC,QAASoJ,EAAQ7H,QAAQ,YAAYrE,UAAU,wBAAuBK,SAAA,EAACP,EAAAA,EAAAA,KAACkS,EAAAA,GAAa,IAAG,gCAChGnQ,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAACC,QAvRbmP,KACVjG,EAAKjK,OAAUiK,EAAKjK,MAAMoC,OAI1B6H,EAAKkG,UAAalG,EAAKkG,SAAS/N,OAIrC8H,EAAOD,GAHHhD,EAAU,wCAJVA,EAAU,8CAqRmChJ,UAAU,wBAAuBK,SAAA,EAACP,EAAAA,EAAAA,KAACqS,EAAAA,GAAS,IAAG,8BAIpFtQ,EAAAA,EAAAA,MAACuQ,EAAAA,EAAI,CAAA/R,SAAA,EACDwB,EAAAA,EAAAA,MAAA,MAAI7B,UAAU,uDAAsDK,SAAA,EAACP,EAAAA,EAAAA,KAACuS,EAAAA,GAAgB,IAAG,iCACzFxQ,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,YAAWK,SAAA,EACtBwB,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,+CAA8CK,SAAC,qBAChEP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,OAAO4D,KAAK,QAAQ1D,MAAO8J,EAAKjK,OAAS,GAAII,SAAU4K,EAAsB/M,UAAU,+DAEvG6B,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,+CAA8CK,SAAC,gBAChEP,EAAAA,EAAAA,KAACwS,EAAAA,EAAQ,CAACpN,QAASiH,EAAoBjK,MAAO8J,EAAKkG,UAAY,GAAI/P,SA9XjED,IAC1BoK,GAAazH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAImH,GAAI,IAAEkG,SAAUhQ,MA6XwFD,YAAY,4DAEnHJ,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,+CAA8CK,SAAC,iBAChEP,EAAAA,EAAAA,KAAA,YAAU8F,KAAK,cAAc1D,MAAO8J,EAAKuG,aAAe,GAAIpQ,SAAU4K,EAAsBpG,KAAK,IAAI3G,UAAU,qEAK3H6B,EAAAA,EAAAA,MAACuQ,EAAAA,EAAI,CAAA/R,SAAA,EACDwB,EAAAA,EAAAA,MAAA,MAAI7B,UAAU,uDAAsDK,SAAA,EAACP,EAAAA,EAAAA,KAAC0S,EAAAA,GAAa,IAAG,wBACtF3Q,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,YAAWK,SAAA,EACtBwB,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,+CAA8CK,SAAC,gDAChEP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,SAAS4D,KAAK,YAAY1D,MAAO8J,EAAKyG,WAAa,GAAItQ,SAAU4K,EAAsBhF,IAAI,IAAI/H,UAAU,+DAEzH6B,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,0BAAyBK,SAAA,EACpCwB,EAAAA,EAAAA,MAAA,SAAO7B,UAAU,mCAAkCK,SAAA,EAACP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,WAAW4D,KAAK,mBAAmBrD,UAAWyJ,EAAK0G,iBAAkBvQ,SAAU4K,EAAsB/M,UAAU,oDAAoD,KAACF,EAAAA,EAAAA,KAAA,QAAME,UAAU,6BAA4BK,SAAC,8CACjRwB,EAAAA,EAAAA,MAAA,SAAO7B,UAAU,mCAAkCK,SAAA,EAACP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,WAAW4D,KAAK,iBAAiBrD,UAAWyJ,EAAK2G,eAAgBxQ,SAAU4K,EAAsB/M,UAAU,oDAAoD,KAACF,EAAAA,EAAAA,KAAA,QAAME,UAAU,6BAA4BK,SAAC,iDAC7QwB,EAAAA,EAAAA,MAAA,SAAO7B,UAAU,mCAAkCK,SAAA,EAACP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,WAAW4D,KAAK,wBAAwBrD,UAAWyJ,EAAK4G,sBAAuBzQ,SAAU4K,EAAsB/M,UAAU,oDAAoD,KAACF,EAAAA,EAAAA,KAAA,QAAME,UAAU,6BAA4BK,SAAC,6EAC3RwB,EAAAA,EAAAA,MAAA,SAAO7B,UAAU,mCAAkCK,SAAA,EAACP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,WAAW4D,KAAK,wBAAwBrD,SAAwC,IAA/ByJ,EAAK6G,sBAAgC1Q,SAAU4K,EAAsB/M,UAAU,oDAAoD,KAACF,EAAAA,EAAAA,KAAA,QAAME,UAAU,6BAA4BK,SAAC,gDAClSwB,EAAAA,EAAAA,MAAA,SAAO7B,UAAU,mCAAkCK,SAAA,EAACP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,WAAW4D,KAAK,eAAerD,UAAWyJ,EAAK8G,aAAc3Q,SAAU4K,EAAsB/M,UAAU,oDAAoD,KAACF,EAAAA,EAAAA,KAAA,QAAME,UAAU,6BAA4BK,SAAC,4FAKrRwB,EAAAA,EAAAA,MAACuQ,EAAAA,EAAI,CAAA/R,SAAA,EACDwB,EAAAA,EAAAA,MAAA,MAAI7B,UAAU,uDAAsDK,SAAA,EAACP,EAAAA,EAAAA,KAACiT,EAAAA,GAAS,IAAG,uDAClFlR,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,YAAWK,SAAA,EACtBwB,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,+CAA8CK,SAAC,gDAChEP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,iBAAiB4D,KAAK,aAAa1D,MAAO6L,EAAuB/B,EAAKgH,YAAa7Q,SAAU4K,EAAsB/M,UAAU,+DAE7I6B,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,+CAA8CK,SAAC,8CAChEP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,iBAAiB4D,KAAK,WAAW1D,MAAO6L,EAAuB/B,EAAKiH,UAAW9Q,SAAU4K,EAAsB/M,UAAU,+DAEzI6B,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,+CAA8CK,SAAC,qCAChEP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,SAAS4D,KAAK,gBAAgB1D,MAAO8J,EAAKkH,eAAiB,EAAG/Q,SAAU4K,EAAsBhF,IAAI,IAAI/H,UAAU,+DAEhI6B,EAAAA,EAAAA,MAAA,OAAAxB,SAAA,EACIP,EAAAA,EAAAA,KAAA,SAAOE,UAAU,+CAA8CK,SAAC,wCAChEP,EAAAA,EAAAA,KAAA,SAAOkC,KAAK,OAAO4D,KAAK,WAAW1D,MAAO8J,EAAKmH,UAAY,GAAIhR,SAAU4K,EAAsB/M,UAAU,yDAAyDiC,YAAY,wDAO9LnC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,0BAAyBK,UACpCwB,EAAAA,EAAAA,MAACuQ,EAAAA,EAAI,CAAA/R,SAAA,EACDwB,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,yDAAwDK,SAAA,EACnEwB,EAAAA,EAAAA,MAAA,MAAI7B,UAAU,kCAAiCK,SAAA,CAAC,YAAU2L,EAAKqB,UAAUjJ,OAAO,QAChFvC,EAAAA,EAAAA,MAAA,OAAK7B,UAAU,uBAAsBK,SAAA,EACjCP,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,CAACC,QA/ZHsQ,KAC7B,IAAKC,OAAOC,QAAQ,6IAA8F,OAClH,MAAMjG,EAAY,IAEXrK,MAAMC,KAAK,CAAEmB,OAAQ,GAAK,CAACgC,EAAGJ,IAAMsH,EAAiB,SAAS,QAADzH,OAAUG,EAAI,EAAC,kBAC/EsH,EAAiB,YAAa,sCAE3BtK,MAAMC,KAAK,CAAEmB,OAAQ,GAAK,CAACgC,EAAGJ,IAAMsH,EAAiB,SAAS,QAADzH,OAAUG,EAAI,EAAC,mBAE5EhD,MAAMC,KAAK,CAAEmB,OAAQ,GAAK,CAACgC,EAAGJ,IAAMsH,EAAiB,SAAS,QAADzH,OAAUG,EAAI,EAAC,mBAE5EhD,MAAMC,KAAK,CAAEmB,OAAQ,IAAM,CAACgC,EAAGJ,IAAMsH,EAAiB,SAAS,QAADzH,OAAUG,EAAI,GAAE,gBAEjFsH,EAAiB,OAAQ,oBAAqB,KAElDH,EAAsBE,IAgZ6ChJ,QAAQ,YAAWhE,SAAC,6BAC/DP,EAAAA,EAAAA,KAAC+C,EAAAA,EAAM,CAACC,QA9YFyQ,KAC9B,IAAKF,OAAOC,QAAQ,8IAA+F,OACnH,MAAMjG,EAAY,IAEXrK,MAAMC,KAAK,CAAEmB,OAAQ,GAAK,CAACgC,EAAGJ,IAAMsH,EAAiB,SAAS,QAADzH,OAAUG,EAAI,EAAC,qBAE5EhD,MAAMC,KAAK,CAAEmB,OAAQ,IAAM,CAACgC,EAAGJ,IAAMsH,EAAiB,SAAS,QAADzH,OAAUG,EAAI,EAAC,mBAE7EhD,MAAMC,KAAK,CAAEmB,OAAQ,GAAK,CAACgC,EAAGJ,IAAMsH,EAAiB,SAAS,QAADzH,OAAUG,EAAI,GAAE,mBAC7EhD,MAAMC,KAAK,CAAEmB,OAAQ,GAAK,CAACgC,EAAGJ,IAAMsH,EAAiB,OAAO,QAADzH,OAAUG,EAAI,GAAE,wBAElFmH,EAAsBE,IAmY8ChJ,QAAQ,YAAWhE,SAAC,8BACpEwB,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAACC,QAjVL0Q,KACvBxK,EAAU,iDACV,IACI,MAAMyK,EC9SmBzH,KAEjC,MAAM0H,EAAyBA,CAAChO,EAAQ7B,KACpC,MAAM8P,EAASC,OAAOC,aAAa,GAAKhQ,GACxC,OAAO,IAAIiQ,EAAAA,IAAU,CACjBzT,SAAU,CACN,IAAI0T,EAAAA,IAAQ,CAAEzO,KAAK,KAADO,OAAO8N,EAAM,QAC/B,IAAII,EAAAA,IAAQrO,EAAOsO,aAEvBC,OAAQ,CAAEC,KAAM,QAIlB7T,EAAW,CACb,IAAIyT,EAAAA,IAAU,CACVzT,SAAU,CACN,IAAI0T,EAAAA,IAAQ,kCACZ,IAAIA,EAAAA,IAAQ,CACRzO,KAAM,8BACN6O,MAAO,KAGfC,SAAU,CACN,CACIpS,KAAMqS,EAAAA,IAAYC,MAClBC,SAAUC,EAAAA,IAAgBC,MAGlCC,QAAS,CAAEC,MAAO,OAEtB,IAAIb,EAAAA,IAAU,CACVxO,KAAM0G,EAAKjK,MACX6S,QAASC,EAAAA,IAAaC,UACtBC,UAAWC,EAAAA,IAAcC,SAE7B,IAAInB,EAAAA,IAAU,CACVxO,KAAM0G,EAAKuG,aAAe,KAE9B,IAAIuB,EAAAA,IAAU,CAAExO,KAAM,MAiF1B,OA9EA0G,EAAKqB,UAAU6H,QAAQ,CAACpH,EAAGjK,KAEvB,GAAe,oBAAXiK,EAAE9L,KAA4B,CAC9B,MAAMmT,EAAiBrH,EAAExI,KAAKsM,QAAQ,WAAY,uBAClDvR,EAASqP,KACL,IAAIoE,EAAAA,IAAU,CACVzT,SAAU,CACN,IAAI0T,EAAAA,IAAQ,CAAEzO,KAAK,GAADO,OAAKhC,EAAQ,EAAC,MAAMuR,MAAM,IAC5C,IAAIrB,EAAAA,IAAQoB,IAEhBT,QAAS,CAAEW,OAAQ,OAG/B,MAEIhV,EAASqP,KACL,IAAIoE,EAAAA,IAAU,CACVzT,SAAU,CACN,IAAI0T,EAAAA,IAAQ,CAAEzO,KAAK,GAADO,OAAKhC,EAAQ,EAAC,MAAMuR,MAAM,IAC5C,IAAIrB,EAAAA,IAAQjG,EAAExI,OAElBoP,QAAS,CAAEW,OAAQ,QAK/B,OAAQvH,EAAE9L,MACN,IAAK,SACL,IAAK,WACD8L,EAAE5I,QAAQgQ,QAAQ,CAACI,EAAKC,KACpBlV,EAASqP,KAAKgE,EAAuB4B,EAAKC,MAE9C,MACJ,IAAK,YACDlV,EAASqP,KAAKgE,EAAuB,aAAS,IAC9CrT,EAASqP,KAAKgE,EAAuB,mBAAU,IAC/C,MACJ,IAAK,YACL,IAAK,OAEArT,EAASqP,KAAK,IAAIoE,EAAAA,IAAU,CAAExO,KAAK,YACpC,MACJ,IAAK,WAEqB,IAAIwI,EAAE1I,YAAYoQ,KAAK,IAAM9H,KAAKC,SAAW,IACrDuH,QAAS3O,IACnBlG,EAASqP,KAAK,IAAIoE,EAAAA,IAAU,CAAExO,KAAK,OAADO,OAASU,QAE9ClG,EAASqP,KAAK,IAAIoE,EAAAA,IAAU,CAAExO,KAAK,aAOpC,IAAImQ,EAAAA,IAAS,CACrBC,OAAQ,CACJC,QAAS,CACLzF,SAAU,CACN0F,IAAK,CACDC,KAAM,kBACN1S,KAAM,MAIlB2S,SAAU,CACNF,IAAK,CACDC,KAAM,kBACN1S,KAAM,GACNiS,MAAM,KAIlBW,SAAU,CAAC,CACP1V,SAAUA,OD2LE2V,CAAqBhK,GACjCiK,EAAAA,IAAOC,OAAOzC,GAAK0C,KAAKC,KACpBC,EAAAA,EAAAA,QAAOD,EAAK,GAADvQ,OAAKmG,EAAKjK,MAAM6P,QAAQ,KAAM,KAAI,WAErD,CAAE,MAAOhG,GACL5C,EAAU,oEAADnD,OAAuC+F,EAAMC,SAAW,SACjEkG,QAAQnG,MAAMA,EAClB,GAuUyDvH,QAAQ,YAAWhE,SAAA,EAACP,EAAAA,EAAAA,KAACwW,EAAAA,GAAY,IAAG,YACrEzU,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAACC,QAASuJ,EAAsBhI,QAAQ,YAAWhE,SAAA,EAACP,EAAAA,EAAAA,KAACkI,EAAAA,GAAW,IAAG,cAC1EnG,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAACC,QAASsJ,EAAiB/H,QAAQ,YAAWhE,SAAA,EAACP,EAAAA,EAAAA,KAACiL,EAAAA,GAAU,IAAG,mBACpElJ,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAACC,QAASA,IAAM0J,EAAyBR,EAAKqB,WAAYhJ,QAAQ,YAAWhE,SAAA,EAACP,EAAAA,EAAAA,KAACyW,EAAAA,GAAQ,IAAG,mDACjG1U,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAACC,QAASA,IAAM4J,GAAqB,GAAOrI,QAAQ,UAAShE,SAAA,EAACP,EAAAA,EAAAA,KAACiM,EAAAA,GAAY,IAAG,wBACrFlK,EAAAA,EAAAA,MAACgB,EAAAA,EAAM,CAACC,QAtYhB0T,KAChB,MAAMC,EAAc,CAChB3Q,GAAImH,KAAKQ,MACTnI,KAAM,GACNtD,KAAM,SACNkD,QAAS,CAAC,GAAI,IACdJ,eAAgB,GAChBE,eAAe,EACfI,WAAY,CAAC,GAAI,IACjB8C,SAAU,GACVC,SAAU,GACVE,YAAa,GACbP,OAAQ,GAEZqF,EAAsB,IAAInB,EAAKqB,UAAWoJ,KAwXWpW,SAAA,EAACP,EAAAA,EAAAA,KAACwE,EAAAA,GAAQ,IAAG,sBAGlDxE,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWK,SACrB2L,EAAKqB,UAAU/K,IAAI,CAACwL,EAAGjK,KACpB/D,EAAAA,EAAAA,KAAC4W,EAAAA,EAAc,CAEX/R,SAAUmJ,EACVjK,MAAOA,EACPN,SAAUqK,EACV9G,SAAUA,KAAM6P,OA3XxBC,EA2XuC9I,EAAEhI,QA1X7DqH,EAAsBnB,EAAKqB,UAAU3L,OAAOoM,GAAKA,EAAEhI,KAAO8Q,IADtCA,OA4XQ7P,YAAaA,IAxXZ6P,KAC7B,MAAMC,EAAkB7K,EAAKqB,UAAUyJ,KAAKhJ,GAAKA,EAAEhI,KAAO8Q,GAC1D,IAAKC,EAAiB,OAEtB,MAAME,GAAclS,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQgS,GAAe,IAAE/Q,GAAImH,KAAKQ,MAAQC,KAAKC,WAC7DqJ,EAAgBhL,EAAKqB,UAAU4J,UAAUnJ,GAAKA,EAAEhI,KAAO8Q,GACvDxJ,EAAe,IAAIpB,EAAKqB,WAC9BD,EAAa8J,OAAOF,EAAgB,EAAG,EAAGD,GAC1C5J,EAAsBC,IAgXyB+J,CAAwBrJ,EAAEhI,IAC7CkB,aAAcA,IAAMuF,EAAqBuB,GACzC7G,oBAAqBA,IApOrBuE,WAC5BxC,EAAU,gDAEV,MAAM,GAAElD,GAA2BsR,EAApBC,GAAeC,EAAAA,EAAAA,GAAKF,EAAgBG,GAEnD,IAAIhH,EAGJ,GAFqB5D,GAAgBE,EAAczI,OAAS,EAGxDmM,EAAM,2PAAA1K,OAEa8G,EAAY,uBAE5B,CACH,IAAI6K,EAAe,2BAAA3R,OAAoBwR,EAAgB/R,KAAI,MAE3D,OAAQ+R,EAAgBrV,MACpB,IAAK,SACL,IAAK,WACD,GAAIqV,EAAgBnS,SAAWmS,EAAgBnS,QAAQd,OAAS,EAAG,CAC/DoT,GAAe,eAAA3R,OAAmBwR,EAAgBnS,QAAQmJ,KAAK,MAAK,MACpE,MAAMoJ,GAAkBJ,EAAgBvS,gBAAkB,IAAIxC,IAAI0D,GAAKqR,EAAgBnS,QAAQc,IAC/FwR,GAAe,4BAAA3R,OAA0B4R,EAAepJ,KAAK,MAAK,KACtE,CACA,MACJ,IAAK,YACL,IAAK,kBACDmJ,GAAe,4BAAA3R,QAA2BwR,EAAgBvS,gBAAkB,IAAIuJ,KAAK,MAAK,MAC1F,MACJ,IAAK,YACDmJ,GAAe,uBAAA3R,OAAqBwR,EAAgBrS,cAAa,MACjE,MACJ,IAAK,WACDwS,GAAe,+BAAA3R,QAAyBwR,EAAgBjS,YAAc,IAAIiJ,KAAK,QAAO,MAM1FgJ,EAAgBhP,cAChBmP,GAAe,cAAA3R,OAAawR,EAAgBhP,YAAW,OAG3DkI,EAAM,oYAAA1K,OAG+B2R,EAAe,iBAExD,CAEAjH,GAAM,2uBAAA1K,OAQ4C0B,KAAKC,UAAU6P,GAAgB,oEAAAxR,OAG3E0B,KAAKC,UAAU6P,GAAgB,cAGrC,MAAMvI,EAAY,GAClB,IAAK,MAAM9D,KAAQ6B,EAAe,CAC7B,MAAMmC,QAAe,IAAIC,QAAQ,CAACC,EAASC,KACxC,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAActE,GACrBoE,EAAOG,OAAS,IAAML,EAAQE,EAAOI,OAAOd,MAAM,KAAK,IACvDU,EAAOK,QAAU7D,GAASuD,EAAOvD,KAErCkD,EAAUY,KAAK,CACXC,YAAa,CAAEC,UAAW5E,EAAKhJ,KAAM6N,KAAMb,IAEnD,CAEA,MAAMwB,EAAG,GAAA3K,OAAM4K,2CAAkC,8BAC3CC,EAAc,CAChBC,SAAU,CAAC,CAAEC,MAAO,CAAC,CAAEtL,KAAMiL,MAAazB,MAG9C,IACI,MAAM+B,QAAiBC,MAAMN,EAAK,CAC9BO,OAAQ,OACRC,QAAS,CACL,cAAgB,UAADnL,OAAY4K,oNAC3B,eAAgB,oBAEpBQ,KAAM1J,KAAKC,UAAUkJ,KAGzB,IAAKG,EAASK,GAAI,CAAC,IAADwG,EACd,MAAMtG,QAAkBP,EAASQ,OACjC,MAAM,IAAIG,OAAe,OAATJ,QAAS,IAATA,GAAgB,QAAPsG,EAATtG,EAAWxF,aAAK,IAAA8L,OAAP,EAATA,EAAkB7L,UAAWgF,EAASU,WAC1D,CAGA,IAAIG,SADeb,EAASQ,QACNI,WAAW,GAAGE,QAAQf,MAAM,GAAGtL,KACrDoM,EAAaA,EAAWE,QAAQ,WAAY,IAAIA,QAAQ,OAAQ,IAAIzN,OAEpE,MAAMwT,EAAqBpQ,KAAKsK,MAAMH,GAEtC,KAAIiG,GAAsBA,EAAmBvT,OAAS,GAQlD,MAAM,IAAIoN,MAAM,sEARqC,CACrD,MAAMiF,GAAW5R,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ8S,EAAmB,IAAE,IAAE7R,GAAImH,KAAKQ,MAAQC,KAAKC,WAChEqJ,EAAgBhL,EAAKqB,UAAU4J,UAAUnJ,GAAKA,EAAEhI,KAAOsR,EAAiBtR,IACxE8R,EAAmB,IAAI5L,EAAKqB,WAClCuK,EAAiBV,OAAOF,EAAgB,EAAG,EAAGP,GAC9CtJ,EAAsByK,GACtB5O,EAAU,wFACd,CAGJ,CAAE,MAAO4C,GACLmG,QAAQnG,MAAM,iCAAkCA,GAChD5C,EAAU,0EAADnD,OAA6C+F,EAAMC,SAChE,GAgHuDgM,CAAwB/J,GACnDhN,WAAYA,GARPgN,EAAEhI,OAYQ,IAA1BkG,EAAKqB,UAAUjJ,SACZtE,EAAAA,EAAAA,KAAA,OAAKE,UAAU,sEAAqEK,UAChFP,EAAAA,EAAAA,KAAA,KAAGE,UAAU,gBAAeK,SAAC,gMAnH9CP,EAAAA,EAAAA,KAAA,OAAAO,SAAK,wB,uDEliBpB,MAIA,EAJaK,IAAA,IAAC,SAAEL,EAAQ,UAAEL,EAAY,IAAIU,EAAA,OACtCZ,EAAAA,EAAAA,KAAA,OAAKE,UAAS,iEAAA6F,OAAmE7F,GAAYK,SAAEA,I","sources":["components/QuestionEditor.js","components/ui/ComboBox.js","pages/QuizEditorPage.js","utils/wordExporter.js","components/ui/Card.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport Button from './ui/Button';\nimport Modal from './ui/Modal';\nimport { TrashIcon, PlusIcon, DuplicateIcon, LightbulbIcon, LibraryIcon } from '../assets/icons';\n\nconst XCircleIcon = () => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n    </svg>\n);\n\nconst TagPickerModal = ({ isOpen, onClose, onAddTags, uniqueTags, existingTags }) => {\n    const [searchTerm, setSearchTerm] = useState('');\n    const [selectedTags, setSelectedTags] = useState(new Set());\n\n    const availableTags = useMemo(() => {\n        const lowercasedTerm = searchTerm.toLowerCase();\n        return uniqueTags.filter(tag => \n            !existingTags.includes(tag) && tag.toLowerCase().includes(lowercasedTerm)\n        );\n    }, [uniqueTags, existingTags, searchTerm]);\n\n    const handleToggleTag = (tag) => {\n        const newSelection = new Set(selectedTags);\n        if (newSelection.has(tag)) {\n            newSelection.delete(tag);\n        } else {\n            newSelection.add(tag);\n        }\n        setSelectedTags(newSelection);\n    };\n\n    const handleAdd = () => {\n        onAddTags(Array.from(selectedTags));\n        onClose();\n        setSelectedTags(new Set());\n        setSearchTerm('');\n    };\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} title=\"Bankdan teq seçin\">\n            <input type=\"text\" placeholder=\"Teq axtar...\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} className=\"w-full p-2 mb-4 border border-gray-300 rounded-md\" />\n            <div className=\"max-h-60 overflow-y-auto space-y-2 pr-2\">\n                {availableTags.map(tag => (\n                    <label key={tag} className=\"flex items-center p-2 rounded-md hover:bg-gray-100 cursor-pointer\">\n                        <input type=\"checkbox\" checked={selectedTags.has(tag)} onChange={() => handleToggleTag(tag)} className=\"h-4 w-4 text-orange-600 rounded mr-3\" />\n                        {tag}\n                    </label>\n                ))}\n            </div>\n            <div className=\"mt-6 flex justify-end\">\n                <Button onClick={handleAdd} disabled={selectedTags.size === 0}>Seçilmişləri əlavə et ({selectedTags.size})</Button>\n            </div>\n        </Modal>\n    );\n};\n\nconst TagEditor = ({ tags = [], onUpdate, uniqueTags = [] }) => {\n    const [inputValue, setInputValue] = useState('');\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter' || e.key === ',') {\n            e.preventDefault();\n            addTag(inputValue.trim());\n            setInputValue('');\n        }\n    };\n\n    const removeTag = (tagToRemove) => {\n        onUpdate(tags.filter(tag => tag !== tagToRemove));\n    };\n\n    const addTag = (tag) => {\n        if (tag && !tags.includes(tag)) {\n            onUpdate([...tags, tag]);\n        }\n    };\n\n    const handleAddMultipleTags = (tagsToAdd) => {\n        onUpdate([...tags, ...tagsToAdd]);\n    };\n\n    return (\n        <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">Teqlər (Enter və ya vergül ilə əlavə et)</label>\n            <div className=\"flex flex-wrap items-center gap-2 p-1.5 border border-gray-300 rounded-md bg-white\">\n                {tags.map((tag, index) => (\n                    <span key={index} className=\"flex items-center gap-1 bg-orange-100 text-orange-800 text-xs font-medium px-2.5 py-1 rounded-full\">\n                        {tag}\n                        <button onClick={() => removeTag(tag)} className=\"text-orange-600 hover:text-orange-800\">\n                            <XCircleIcon className=\"h-4 w-4\" />\n                        </button>\n                    </span>\n                ))}\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    onKeyDown={handleKeyDown}\n                    placeholder=\"Yeni teq əlavə et...\"\n                    className=\"flex-1 bg-transparent outline-none p-1 text-sm min-w-[120px]\"\n                />\n                {uniqueTags.length > 0 && (\n                    <Button onClick={() => setIsModalOpen(true)} variant=\"secondary\" size=\"sm\" className=\"!p-1.5 !rounded-full h-6 w-6\" title=\"Bankdan teq seç\">\n                        <PlusIcon className=\"h-4 w-4\" />\n                    </Button>\n                )}\n            </div>\n            <TagPickerModal \n                isOpen={isModalOpen} \n                onClose={() => setIsModalOpen(false)} \n                onAddTags={handleAddMultipleTags}\n                uniqueTags={uniqueTags}\n                existingTags={tags}\n            />\n        </div>\n    );\n};\n\nconst AnswerEditor = ({ question, onUpdate }) => {\n    const handleOptionChange = (index, value) => {\n        const newOptions = [...question.options];\n        newOptions[index] = value;\n        onUpdate({ ...question, options: newOptions });\n    };\n    const handleCorrectAnswerChange = (index) => {\n        if (question.type === 'single') {\n            onUpdate({ ...question, correctAnswers: [index] });\n        } else {\n            const newCorrect = question.correctAnswers.includes(index)\n                ? question.correctAnswers.filter(i => i !== index)\n                : [...question.correctAnswers, index];\n            onUpdate({ ...question, correctAnswers: newCorrect });\n        }\n    };\n    const handleCorrectTextAnswerChange = (e) => {\n        onUpdate({ ...question, correctAnswers: [e.target.value] });\n    };\n    const handleTrueFalseChange = (value) => {\n        onUpdate({ ...question, correctAnswer: value });\n    };\n    const addOption = () => {\n        onUpdate({ ...question, options: [...question.options, ''] });\n    };\n    const removeOption = (index) => {\n        const newOptions = question.options.filter((_, i) => i !== index);\n        const newCorrect = question.correctAnswers\n            .filter(i => i !== index)\n            .map(i => (i > index ? i - 1 : i));\n        onUpdate({ ...question, options: newOptions, correctAnswers: newCorrect });\n    };\n    const handleOrderItemChange = (index, value) => {\n        const newItems = [...(question.orderItems || [])];\n        newItems[index] = value;\n        onUpdate({ ...question, orderItems: newItems });\n    };\n    const addOrderItem = () => {\n        onUpdate({ ...question, orderItems: [...(question.orderItems || []), ''] });\n    };\n    const removeOrderItem = (index) => {\n        const newItems = question.orderItems.filter((_, i) => i !== index);\n        onUpdate({ ...question, orderItems: newItems });\n    };\n    const handleFillInTheBlanksChange = (e) => {\n        const text = e.target.value;\n        const correctAnswers = (text.match(/\\[(.*?)\\]/g) || []).map(b => b.slice(1, -1));\n        onUpdate({\n            ...question,\n            text: text, // The text itself now contains the answers\n            correctAnswers: correctAnswers,\n            options: [] // Not used for this type\n        });\n    };\n\n    switch (question.type) {\n        case 'single':\n        case 'multiple':\n            return (\n                <div>\n                    <h4 className=\"font-semibold text-gray-800 mb-3\">Cavab variantları</h4>\n                    <div className=\"space-y-2\">\n                        {question.options.map((option, idx) => (\n                            <div key={idx} className=\"flex items-center gap-2\">\n                                <input type={question.type === 'single' ? 'radio' : 'checkbox'} name={`correctAnswer_${question.id}`} checked={question.correctAnswers.includes(idx)} onChange={() => handleCorrectAnswerChange(idx)} className=\"h-5 w-5 text-orange-600 focus:ring-orange-500 border-gray-300 rounded\" />\n                                <input type=\"text\" value={option} onChange={(e) => handleOptionChange(idx, e.target.value)} placeholder={`Variant ${idx + 1}`} className=\"flex-1 rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\" />\n                                <button onClick={() => removeOption(idx)} className=\"text-gray-400 hover:text-red-500 p-1 rounded-full\"><TrashIcon /></button>\n                            </div>\n                        ))}\n                    </div>\n                    <Button onClick={addOption} variant=\"secondary\" className=\"mt-3 text-sm\"><PlusIcon /> Variant əlavə et</Button>\n                </div>\n            );\n        case 'textInput':\n            return (\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Düzgün cavab (hərf registri nəzərə alınmır)</label>\n                    <input type=\"text\" value={question.correctAnswers[0] || ''} onChange={handleCorrectTextAnswerChange} placeholder=\"Düzgün cavabı daxil edin\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\" />\n                </div>\n            );\n        case 'trueFalse':\n            return (\n                <div className=\"flex items-center gap-4 pt-2\">\n                    <label className=\"flex items-center p-3 rounded-lg hover:bg-gray-100 cursor-pointer border-2 border-transparent has-[:checked]:bg-orange-100 has-[:checked]:border-orange-300\"><input type=\"radio\" name={`tf_${question.id}`} checked={question.correctAnswer === true} onChange={() => handleTrueFalseChange(true)} className=\"h-4 w-4 text-orange-600\" /> <span className=\"ml-2\">Doğru</span></label>\n                    <label className=\"flex items-center p-3 rounded-lg hover:bg-gray-100 cursor-pointer border-2 border-transparent has-[:checked]:bg-orange-100 has-[:checked]:border-orange-300\"><input type=\"radio\" name={`tf_${question.id}`} checked={question.correctAnswer === false} onChange={() => handleTrueFalseChange(false)} className=\"h-4 w-4 text-orange-600\" /> <span className=\"ml-2\">Yanlış</span></label>\n                </div>\n            );\n        case 'ordering':\n            return (\n                <div>\n                    <h4 className=\"font-semibold text-gray-800 mb-3\">Sıralama üçün elementlər (düzgün ardıcıllıqla)</h4>\n                    <div className=\"space-y-2\">\n                        {question.orderItems?.map((item, idx) => (\n                            <div key={idx} className=\"flex items-center gap-2\">\n                                <span className=\"text-gray-500 font-bold\">{idx + 1}.</span>\n                                <input type=\"text\" value={item} onChange={(e) => handleOrderItemChange(idx, e.target.value)} placeholder={`Element ${idx + 1}`} className=\"flex-1 rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\" />\n                                <button onClick={() => removeOrderItem(idx)} className=\"text-gray-400 hover:text-red-500 p-1 rounded-full\"><TrashIcon /></button>\n                            </div>\n                        ))}\n                    </div>\n                    <Button onClick={addOrderItem} variant=\"secondary\" className=\"mt-3 text-sm\"><PlusIcon /> Element əlavə et</Button>\n                </div>\n            );\n        case 'fillInTheBlanks':\n            return (\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Mətn və boşluqlar</label>\n                    <p className=\"text-xs text-gray-500 mb-2\">Düzgün cavabları kvadrat mötərizə içinə alın. Məsələn: `Paytaxt [Bakı]`.</p>\n                    <textarea value={question.text || ''} onChange={handleFillInTheBlanksChange} placeholder=\"Mətni daxil edin...\" rows=\"4\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"></textarea>\n                </div>\n            );\n        case 'open':\n            return (\n                <div className=\"p-3 bg-blue-50 text-blue-800 rounded-md text-sm flex items-center gap-2\">\n                    <LightbulbIcon className=\"w-5 h-5\" />\n                    <span>Bu sualın cavabı müəllim tərəfindən manual olaraq yoxlanılacaq.</span>\n                </div>\n            );\n        default: return null;\n    }\n};\n\nconst QuestionEditor = ({ question, index, onUpdate, onDelete, onDuplicate, onSaveToBank, onGenerateVariation, uniqueTags }) => {\n    const [localQuestion, setLocalQuestion] = useState(question);\n\n    useEffect(() => {\n        setLocalQuestion(question);\n    }, [question]);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            if (JSON.stringify(localQuestion) !== JSON.stringify(question)) {\n                onUpdate(localQuestion);\n            }\n        }, 500);\n        return () => clearTimeout(handler);\n    }, [localQuestion, onUpdate, question]);\n\n    const handleInputChange = (e) => {\n        const { name, value, type } = e.target;\n        const processedValue = type === 'number' ? parseInt(value, 10) : value;\n        setLocalQuestion(prev => ({ ...prev, [name]: processedValue }));\n    };\n\n    const handleTagsChange = (newTags) => {\n        setLocalQuestion(prev => ({ ...prev, tags: newTags }));\n    };\n\n    return (\n        <div className=\"border border-gray-200 rounded-lg shadow-sm mb-6 bg-white relative\">\n            <div className=\"p-4 border-b border-gray-200 flex justify-between items-center bg-gray-50/50 rounded-t-lg\">\n                <div className=\"flex items-center gap-4 flex-wrap\">\n                    <span className=\"bg-orange-500 text-white rounded-full h-8 w-8 flex items-center justify-center font-bold text-sm flex-shrink-0\">{index + 1}</span>\n                    <div>\n                        <label className=\"block text-xs font-medium text-gray-500\">Sualın növü</label>\n                        <select name=\"type\" value={localQuestion.type} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm text-xs p-1\">\n                            <option value=\"single\">Tək cavab</option>\n                            <option value=\"multiple\">Bir neçə cavab</option>\n                            <option value=\"textInput\">Mətn daxil etmə</option>\n                            <option value=\"trueFalse\">Doğru/Yanlış</option>\n                            <option value=\"ordering\">Sıralama</option>\n                            <option value=\"open\">Açıq Sual</option>\n                            <option value=\"fillInTheBlanks\">Boşluqları Doldur</option>\n                        </select>\n                    </div>\n                    <div>\n                        <label className=\"block text-xs font-medium text-gray-500\">Ballar</label>\n                        <input type=\"number\" name=\"points\" value={localQuestion.points || 1} onChange={handleInputChange} min=\"1\" className=\"mt-1 block w-20 rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm text-xs p-1\" />\n                    </div>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                    <Button onClick={onGenerateVariation} variant=\"secondary\" className=\"!p-2\" title=\"Bənzər sual yarat (AI)\"><LightbulbIcon /></Button>\n                    <Button onClick={onSaveToBank} variant=\"secondary\" className=\"!p-2\" title=\"Sualı banka əlavə et\"><LibraryIcon /></Button>\n                    <Button onClick={onDuplicate} variant=\"secondary\" className=\"!p-2\" title=\"Dublikat et\"><DuplicateIcon /></Button>\n                    <Button onClick={onDelete} variant=\"danger\" className=\"!p-2\" title=\"Sualı sil\"><TrashIcon /></Button>\n                </div>\n            </div>\n\n            <div className=\"p-4 space-y-4\">\n                {localQuestion.type === 'fillInTheBlanks' ? (\n                    <AnswerEditor question={localQuestion} onUpdate={setLocalQuestion} />\n                ) : (\n                    <div>\n                        <label className=\"block text-sm font-medium text-gray-700\">Sualın mətni</label>\n                        <textarea name=\"text\" value={localQuestion.text} onChange={handleInputChange} placeholder=\"Sualınızı bura daxil edin...\" rows=\"2\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"></textarea>\n                    </div>\n                )}\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Şəkil URL-i (istəyə bağlı)</label>\n                    <input type=\"text\" name=\"imageUrl\" value={localQuestion.imageUrl || ''} onChange={handleInputChange} placeholder=\"https://example.com/image.png\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\" />\n                </div>\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Audio URL-i (istəyə bağlı)</label>\n                    <input type=\"text\" name=\"audioUrl\" value={localQuestion.audioUrl || ''} onChange={handleInputChange} placeholder=\"https://example.com/audio.mp3\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\" />\n                </div>\n                <TagEditor tags={localQuestion.tags || []} onUpdate={handleTagsChange} uniqueTags={uniqueTags} />\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">İzah (istəyə bağlı)</label>\n                    <textarea name=\"explanation\" value={localQuestion.explanation || ''} onChange={handleInputChange} placeholder=\"Düzgün cavabın izahını bura daxil edin...\" rows=\"2\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"></textarea>\n                </div>\n            </div>\n\n            {localQuestion.type !== 'fillInTheBlanks' && (\n                <div className=\"p-4 bg-gray-50/50 border-t border-gray-200 rounded-b-lg\">\n                    <AnswerEditor question={localQuestion} onUpdate={setLocalQuestion} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default QuestionEditor;\n","import React, { useState, useMemo } from 'react';\r\n\r\nconst ComboBox = ({ options, value, onChange, placeholder }) => {\r\n    const [query, setQuery] = useState('');\r\n    const [isOpen, setIsOpen] = useState(false);\r\n\r\n    const filteredOptions = useMemo(() => \r\n        query === ''\r\n            ? options\r\n            : options.filter(option => \r\n                option.toLowerCase().includes(query.toLowerCase())\r\n            )\r\n    , [query, options]);\r\n\r\n    const handleSelect = (option) => {\r\n        onChange(option);\r\n        setQuery('');\r\n        setIsOpen(false);\r\n    };\r\n\r\n    const handleInputChange = (e) => {\r\n        setQuery(e.target.value);\r\n        onChange(e.target.value); // Allow creating new categories\r\n        if (!isOpen) {\r\n            setIsOpen(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"relative w-full\">\r\n            <input \r\n                type=\"text\"\r\n                value={value}\r\n                onChange={handleInputChange}\r\n                onFocus={() => setIsOpen(true)}\r\n                onBlur={() => setTimeout(() => setIsOpen(false), 150)} // Delay to allow click on option\r\n                placeholder={placeholder}\r\n                className=\"w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm\"\r\n            />\r\n            {isOpen && (\r\n                <ul className=\"absolute z-10 w-full bg-white border border-gray-300 rounded-md shadow-lg mt-1 max-h-60 overflow-auto\">\r\n                    {filteredOptions.length > 0 ? (\r\n                        filteredOptions.map(option => (\r\n                            <li \r\n                                key={option}\r\n                                onMouseDown={() => handleSelect(option)} // Use onMouseDown to fire before onBlur\r\n                                className=\"px-3 py-2 cursor-pointer hover:bg-orange-100\"\r\n                            >\r\n                                {option}\r\n                            </li>\r\n                        ))\r\n                    ) : (\r\n                        <li className=\"px-3 py-2 text-gray-500\">Nəticə tapılmadı.</li>\r\n                    )}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ComboBox;","import React, { useState } from 'react';\nimport Button from '../components/ui/Button';\nimport Card from '../components/ui/Card';\nimport ComboBox from '../components/ui/ComboBox';\nimport Modal from '../components/ui/Modal';\nimport QuestionEditor from '../components/QuestionEditor';\nimport { ArrowLeftIcon, PlusIcon, CheckIcon, UploadIcon, LibraryIcon, DocumentTextIcon, PencilAltIcon, ClockIcon, SaveIcon, SparklesIcon, XIcon, DownloadIcon } from '../assets/icons';\nimport { TrashIcon } from '../assets/icons';\nimport mammoth from 'mammoth';\nimport { Packer } from 'docx';\nimport { saveAs } from 'file-saver';\nimport { generateWordDocument } from '../utils/wordExporter'; // Создадим этот файл\n\nconst AIQuestionGeneratorModal = ({ isOpen, onClose, onGenerate, showToast }) => {\n    const [text, setText] = useState('');\n    const [criteria, setCriteria] = useState([{ type: 'single', count: 3 }]);\n    const [tags, setTags] = useState('');\n    const [files, setFiles] = useState([]);\n    const [totalPoints, setTotalPoints] = useState(5);\n    const [numOptions, setNumOptions] = useState(4);\n    const [isLoading, setIsLoading] = useState(false);\n    const [difficulty, setDifficulty] = useState('orta'); // 'asan', 'orta', 'çətin'\n    const [addImage, setAddImage] = useState(false);\n    const [generateDistractors, setGenerateDistractors] = useState(false);\n    const fileInputRef = React.useRef(null);\n\n    const handleGenerate = async () => {\n        if (!text.trim()) {\n            showToast('Zəhmət olmasa, suallar yaratmaq üçün mətn daxil edin.');\n            return;\n        }\n        if (criteria.reduce((sum, c) => sum + c.count, 0) === 0) {\n            showToast('Ən azı bir sual yaratmalısınız.');\n            return;\n        }\n        setIsLoading(true);\n        try {\n            await onGenerate(text, files, criteria, tags, totalPoints, numOptions, addImage, difficulty, generateDistractors);\n            onClose();\n            setText('');\n            setFiles([]);\n        } catch (error) {\n            showToast(`Sual yaradılarkən xəta baş verdi: ${error.message}`);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const handleCriteriaChange = (index, field, value) => {\n        const newCriteria = [...criteria];\n        newCriteria[index][field] = field === 'count' ? parseInt(value, 10) : value;\n        setCriteria(newCriteria);\n    };\n\n    const addCriteria = () => {\n        setCriteria([...criteria, { type: 'single', count: 1 }]);\n    };\n\n    const removeCriteria = (index) => {\n        if (criteria.length > 1) {\n            setCriteria(criteria.filter((_, i) => i !== index));\n        }\n    };\n\n    const handleFileChange = (e) => {\n        if (e.target.files) {\n            const newFiles = Array.from(e.target.files);\n            if (files.length + newFiles.length > 10) {\n                showToast('Maksimum 10 fayl yükləyə bilərsiniz.');\n                return;\n            }\n            setFiles(prev => [...prev, ...newFiles]);\n        }\n    };\n\n    const removeFile = (fileToRemove) => {\n        setFiles(files.filter(file => file !== fileToRemove));\n    };\n\n\n    if (!isOpen) return null;\n\n    return (\n        <Modal isOpen={isOpen} onClose={onClose} title=\"Mətndən AI ilə Suallar Yarat\">\n            <div className=\"space-y-4 max-h-[75vh] overflow-y-auto px-4\">\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Mətn</label>\n                    <textarea value={text} onChange={e => setText(e.target.value)} rows=\"10\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" placeholder=\"Sualların yaradılacağı mətni bura daxil edin...\"></textarea>\n                </div>\n                <div>\n                    <label className=\"block text-sm font-medium text-gray-700\">Fayllar (şəkil, .docx, .pdf)</label>\n                    <input type=\"file\" ref={fileInputRef} onChange={handleFileChange} multiple accept=\"image/*,.docx,.pdf,application/pdf\" className=\"hidden\" />\n                    <Button onClick={() => fileInputRef.current.click()} variant=\"secondary\" size=\"sm\" className=\"mt-1\"><UploadIcon /> Fayl seç</Button>\n                    {files.length > 0 && (\n                        <div className=\"mt-2 space-y-2\">\n                            {files.map((file, index) => (\n                                <div key={index} className=\"flex items-center justify-between p-2 bg-gray-100 rounded-md text-sm\">\n                                    <span>{file.name}</span>\n                                    <button onClick={() => removeFile(file)} className=\"text-red-500 hover:text-red-700\">\n                                        <XIcon />\n                                    </button>\n                                </div>\n                            ))}\n                        </div>\n                    )}\n\n                </div>\n                <h4 className=\"font-semibold pt-2 border-t\">Kriteriyalar</h4>\n                <div className=\"space-y-2\">\n                    {criteria.map((crit, index) => (\n                        <div key={index} className=\"flex items-center gap-2 p-2 bg-gray-50 rounded-md\">\n                            <select value={crit.type} onChange={e => handleCriteriaChange(index, 'type', e.target.value)} className=\"p-2 border border-gray-300 rounded-md bg-white flex-grow\">\n                                <option value=\"single\">Tək seçimli</option>\n                                <option value=\"multiple\">Çox seçimli</option>\n                                <option value=\"fillInTheBlanks\">Boşluq doldurma</option>\n                                <option value=\"trueFalse\">Doğru/Yanlış</option>\n                                <option value=\"textInput\">Mətn daxiletmə</option>\n                                <option value=\"ordering\">Sıralama</option>\n                                <option value=\"open\">Açıq sual</option>\n                            </select>\n                            <input type=\"number\" value={crit.count} onChange={e => handleCriteriaChange(index, 'count', e.target.value)} min=\"1\" className=\"w-20 p-2 border border-gray-300 rounded-md\" />\n                            <span className=\"text-sm text-gray-600\">ədəd</span>\n                            <Button onClick={() => removeCriteria(index)} variant=\"danger\" size=\"sm\" disabled={criteria.length <= 1}><TrashIcon /></Button>\n                        </div>\n                    ))}\n                </div>\n                <Button onClick={addCriteria} variant=\"secondary\" size=\"sm\" className=\"w-full\"><PlusIcon /> Yeni Kriteriya</Button>\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 pt-4 border-t\">\n                    <div>\n                        <label className=\"block text-sm font-medium text-gray-700\">Səviyyə</label>\n                        <select value={difficulty} onChange={e => setDifficulty(e.target.value)} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\">\n                            <option value=\"asan\">Asan</option>\n                            <option value=\"orta\">Orta</option>\n                            <option value=\"çətin\">Çətin</option>\n                        </select>\n                    </div>\n                    <div>\n                        <label className=\"block text-sm font-medium text-gray-700\">Variantların sayı</label>\n                        <input type=\"number\" value={numOptions} onChange={e => setNumOptions(parseInt(e.target.value, 10))} min=\"2\" max=\"6\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" />\n                    </div>\n                    <div>\n                        <label className=\"block text-sm font-medium text-gray-700\">Ümumi Bal</label>\n                        <input type=\"number\" value={totalPoints} onChange={e => setTotalPoints(parseInt(e.target.value, 10))} min=\"1\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" />\n                    </div>\n                    <div>\n                        <label className=\"block text-sm font-medium text-gray-700\">Teqlər (vergüllə ayırın)</label>\n                        <input type=\"text\" value={tags} onChange={e => setTags(e.target.value)} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" placeholder=\"Məs: qrammatika, ingilis dili\" />\n                    </div>\n                </div>\n                <div className=\"pt-4 border-t\">\n                    <label className=\"flex items-center cursor-pointer\">\n                        <input \n                            type=\"checkbox\" \n                            checked={addImage} \n                            onChange={e => setAddImage(e.target.checked)} \n                            className=\"h-4 w-4 text-orange-600 rounded border-gray-300\" \n                        />\n                        <span className=\"ml-2 text-sm text-gray-700\">Suallara uyğun şəkillər tap və əlavə et (URL)</span>\n                    </label>\n                    <p className=\"text-xs text-gray-500 mt-1 ml-6\">AI hər sual üçün uyğun və lisenziyasız bir şəkil tapmağa çalışacaq.</p>\n                </div>\n                <div className=\"pt-4\">\n                    <label className=\"flex items-center cursor-pointer\">\n                        <input\n                            type=\"checkbox\"\n                            checked={generateDistractors}\n                            onChange={e => setGenerateDistractors(e.target.checked)}\n                            className=\"h-4 w-4 text-orange-600 rounded border-gray-300\"\n                        />\n                        <span className=\"ml-2 text-sm text-gray-700\">Mətnə əsaslanan çaşdırıcı cavablar yarat</span>\n                    </label>\n                    <p className=\"text-xs text-gray-500 mt-1 ml-6\">AI seçməli suallar üçün mətnə əsaslanan, lakin yanlış olan cavab variantları (distraktorlar) yaratmağa çalışacaq.</p>\n                </div>\n\n            </div>\n            <div className=\"mt-6 flex justify-end\">\n                <Button onClick={handleGenerate} disabled={isLoading}>\n                    {isLoading ? 'Yaradılır...' : <><SparklesIcon /> Yarat</>}\n                </Button>\n            </div>\n        </Modal>\n    );\n};\n\nconst QuizEditorPage = ({ quiz, onSave, onBack, showToast, existingCategories = [], uniqueTags = [], onImportRequest, onAddFromBankRequest, onDraftChange, onSaveQuestionToBank, onSaveAllQuestionsToBank }) => {\n    const [isAIGeneratorOpen, setIsAIGeneratorOpen] = useState(false);\n    // State to store the context of the last AI generation\n    const [aiSourceText, setAiSourceText] = useState('');\n    const [aiSourceFiles, setAiSourceFiles] = useState([]);\n\n    const handleQuizInfoChange = (e) => {\n        const { name, value, type, checked } = e.target;\n        let finalValue = type === 'checkbox' ? checked : value;\n        if (type === 'datetime-local') {\n            finalValue = value ? new Date(value).toISOString() : null;\n        }\n        onDraftChange({ ...quiz, [name]: finalValue });\n    };\n\n    const handleCategoryChange = (value) => {\n        onDraftChange({ ...quiz, category: value });\n    };\n\n    const handleQuestionsChange = (newQuestions) => {\n        onDraftChange({ ...quiz, questions: newQuestions });\n    };\n\n    const generateQuestion = (type, text, points = 1) => ({\n        id: Date.now() + Math.random(),\n        text,\n        type,\n        points,\n        options: ['', ''],\n        correctAnswers: [],\n        correctAnswer: true,\n        orderItems: ['', ''],\n        imageUrl: '',\n        audioUrl: '',\n        explanation: ''\n    });\n\n    const generate9thGradeTemplate = () => {\n        if (!window.confirm('Mövcud suallar silinəcək və 9-cu sinif şablonu tətbiq ediləcək. Davam etmək istəyirsiniz?')) return;\n        const questions = [\n            // Listening\n            ...Array.from({ length: 3 }, (_, i) => generateQuestion('single', `Sual ${i + 1} (Listening)`)),\n            generateQuestion('trueFalse', 'Sual 4 (Listening - True/False)'),\n            // Reading 1\n            ...Array.from({ length: 3 }, (_, i) => generateQuestion('single', `Sual ${i + 5} (Reading)`)),\n            // Reading 2\n            ...Array.from({ length: 5 }, (_, i) => generateQuestion('single', `Sual ${i + 8} (Reading)`)),\n            // Grammar\n            ...Array.from({ length: 13 }, (_, i) => generateQuestion('single', `Sual ${i + 13} (Grammar)`)),\n            // Writing\n            generateQuestion('open', 'Sual 26 (Writing)', 10)\n        ];\n        handleQuestionsChange(questions);\n    };\n\n    const generate11thGradeTemplate = () => {\n        if (!window.confirm('Mövcud suallar silinəcək və 11-ci sinif şablonu tətbiq ediləcək. Davam etmək istəyirsiniz?')) return;\n        const questions = [\n            // Listening\n            ...Array.from({ length: 3 }, (_, i) => generateQuestion('single', `Sual ${i + 1} (Listening)`)),\n            // Grammar\n            ...Array.from({ length: 19 }, (_, i) => generateQuestion('single', `Sual ${i + 4} (Grammar)`)),\n            // Reading\n            ...Array.from({ length: 4 }, (_, i) => generateQuestion('single', `Sual ${i + 23} (Reading)`)),\n            ...Array.from({ length: 4 }, (_, i) => generateQuestion('open', `Sual ${i + 27} (Reading - Open)`))\n        ];\n        handleQuestionsChange(questions);\n    };\n\n    const addQuestion = () => {\n        const newQuestion = {\n            id: Date.now(),\n            text: '',\n            type: 'single',\n            options: ['', ''],\n            correctAnswers: [],\n            correctAnswer: true,\n            orderItems: ['', ''],\n            imageUrl: '',\n            audioUrl: '',\n            explanation: '',\n            points: 1\n        };\n        handleQuestionsChange([...quiz.questions, newQuestion]);\n    };\n\n    const updateQuestion = (updatedQuestion) => {\n        handleQuestionsChange(quiz.questions.map(q => q.id === updatedQuestion.id ? updatedQuestion : q));\n    };\n\n    const deleteQuestion = (questionId) => {\n        handleQuestionsChange(quiz.questions.filter(q => q.id !== questionId));\n    };\n\n    const handleDuplicateQuestion = (questionId) => {\n        const questionToClone = quiz.questions.find(q => q.id === questionId);\n        if (!questionToClone) return;\n\n        const clonedQuestion = { ...questionToClone, id: Date.now() + Math.random() };\n        const originalIndex = quiz.questions.findIndex(q => q.id === questionId);\n        const newQuestions = [...quiz.questions];\n        newQuestions.splice(originalIndex + 1, 0, clonedQuestion);\n        handleQuestionsChange(newQuestions);\n    };\n\n    const handleSave = () => {\n        if (!quiz.title || !quiz.title.trim()) {\n            showToast(\"Testin adı boş ola bilməz!\");\n            return;\n        }\n        if (!quiz.category || !quiz.category.trim()) {\n            showToast(\"Kateqoriya boş ola bilməz!\");\n            return;\n        }\n        onSave(quiz);\n    };\n\n    const handleExportToWord = () => {\n        showToast('Word sənədi hazırlanır...');\n        try {\n            const doc = generateWordDocument(quiz);\n            Packer.toBlob(doc).then(blob => {\n                saveAs(blob, `${quiz.title.replace(/ /g, '_')}.docx`);\n            });\n        } catch (error) {\n            showToast(`Sənəd yaradılarkən xəta baş verdi: ${error.message}`, 'error');\n            console.error(error);\n        }\n    };\n\n    const handleGenerateAIQuestions = async (text, files, criteria, tags, totalPoints, numOptions, addImage, difficulty, generateDistractors) => {\n        const questionRequests = criteria.map(c => `${c.count} ədəd \"${c.type}\" tipli sual`).join(', ');\n        const totalQuestions = criteria.reduce((sum, c) => sum + c.count, 0);\n        const pointsPerQuestion = Math.max(1, Math.floor(totalPoints / totalQuestions));\n        const tagsArray = tags.split(',').map(t => t.trim()).filter(Boolean);\n\n        let fileBasedContent = '';\n        const fileParts = [];\n\n        for (const file of files) {\n            if (file.type.startsWith('image/') || file.type === 'application/pdf') {\n                const base64 = await new Promise((resolve, reject) => {\n                    const reader = new FileReader();\n                    reader.readAsDataURL(file);\n                    reader.onload = () => resolve(reader.result.split(',')[1]);\n                    reader.onerror = error => reject(error);\n                });\n                fileParts.push({\n                    inline_data: {\n                        mime_type: file.type,\n                        data: base64\n                    }\n                });\n            } else if (file.name.endsWith('.docx')) {\n                const arrayBuffer = await file.arrayBuffer();\n                const result = await mammoth.convertToHtml({ arrayBuffer });\n                // Simple text extraction by stripping HTML tags\n                const tempDiv = document.createElement('div');\n                tempDiv.innerHTML = result.value;\n                fileBasedContent += `\\n\\nSənəddən mətn (${file.name}):\\n${tempDiv.textContent || tempDiv.innerText || ''}`;\n            }\n        }\n\n        const prompt = `\n            Mənə verilən mətnə və fayllara əsasən, aşağıdakı kriteriyalara uyğun test sualları hazırla: ${questionRequests}.\n            \n            Ümumi Qaydalar:\n            1. Nəticəni mütləq və yalnız valid JSON array formatında, heç bir əlavə mətn və ya formatlama olmadan qaytar.\n            2. Hər bir obyekt aşağıdakı struktura malik olmalıdır.\n            3. \"single\" və \"multiple\" tipli suallar üçün ${numOptions} cavab variantı olsun.\n            4. Hər sual üçün \"points\" dəyəri ${pointsPerQuestion} olmalıdır.\n            5. Hər sual üçün \"tags\" massivinə bu teqləri əlavə et: ${JSON.stringify(tagsArray)}.\n            6. Sualların çətinlik səviyyəsi \"${difficulty}\" olmalıdır.\n            ${addImage ? '7. Hər sual üçün \"imageUrl\" sahəsinə sualın məzmununa uyğun, internetdən tapılmış, istifadəsi sərbəst (müəllif hüququ olmayan) bir şəkil URL-i əlavə et. Əgər uyğun şəkil tapılmasa, bu sahəni boş saxla (\"\").' : ''}\n            ${generateDistractors ? '8. \"single\" və \"multiple\" tipli suallar üçün yanlış cavab variantlarını (distraktorları) mətnə əsaslanaraq məntiqli, lakin çaşdırıcı şəkildə tərtib et.' : ''}\n\n            JSON Strukturları:\n            - \"single\" üçün: {\"text\": \"...\", \"type\": \"single\", \"options\": [\"A\", \"B\", \"C\", \"D\"], \"correctAnswers\": [index], \"points\": ${pointsPerQuestion}, \"explanation\": \"...\", \"tags\": ${JSON.stringify(tagsArray)}, \"imageUrl\": \"...\"}\n            - \"multiple\" üçün: {\"text\": \"...\", \"type\": \"multiple\", \"options\": [\"A\", \"B\", \"C\", \"D\"], \"correctAnswers\": [index1, index2], \"points\": ${pointsPerQuestion}, \"explanation\": \"...\", \"tags\": ${JSON.stringify(tagsArray)}, \"imageUrl\": \"...\"}\n            - \"trueFalse\" üçün: {\"text\": \"...\", \"type\": \"trueFalse\", \"correctAnswer\": true, \"points\": ${pointsPerQuestion}, \"explanation\": \"...\", \"tags\": ${JSON.stringify(tagsArray)}, \"imageUrl\": \"...\"}\n            - \"fillInTheBlanks\" üçün: {\"text\": \"Cavab [buradadır].\", \"type\": \"fillInTheBlanks\", \"correctAnswers\": [\"buradadır\"], \"points\": ${pointsPerQuestion}, \"explanation\": \"...\", \"tags\": ${JSON.stringify(tagsArray)}, \"imageUrl\": \"...\"}\n            - \"textInput\" üçün: {\"text\": \"...\", \"type\": \"textInput\", \"correctAnswers\": [\"düzgün cavab\"], \"points\": ${pointsPerQuestion}, \"explanation\": \"...\", \"tags\": ${JSON.stringify(tagsArray)}, \"imageUrl\": \"...\"}\n            - \"ordering\" üçün: {\"text\": \"...\", \"type\": \"ordering\", \"orderItems\": [\"Birinci\", \"İkinci\", \"Üçüncü\"], \"points\": ${pointsPerQuestion}, \"explanation\": \"...\", \"tags\": ${JSON.stringify(tagsArray)}, \"imageUrl\": \"...\"}\n            - \"open\" üçün: {\"text\": \"...\", \"type\": \"open\", \"points\": ${pointsPerQuestion}, \"explanation\": \"...\", \"tags\": ${JSON.stringify(tagsArray)}, \"imageUrl\": \"...\"}\n\n            Nümunə \"fillInTheBlanks\" formatı: Düzgün cavablar mətnin içində kvadrat mötərizə [ ] ilə göstərilməli və \"correctAnswers\" massivində ayrıca qeyd edilməlidir.\n            \n            Mətn: \"${text} ${fileBasedContent}\"\n        `;\n\n        // Вызываем нашу Supabase Edge Function\n        const url = `${process.env.REACT_APP_SUPABASE_URL}/functions/v1/gemini-proxy`;\n\n        const requestBody = {\n            contents: [{ parts: [{ text: prompt }, ...fileParts] }]\n        };\n\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    // Добавляем заголовок авторизации Supabase\n                    'Authorization': `Bearer ${process.env.REACT_APP_SUPABASE_ANON_KEY}`,\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(requestBody)\n            });\n\n            if (!response.ok) {\n                const errorBody = await response.json();\n                const errorMessage = errorBody?.error?.message || response.statusText;\n                throw new Error(`API sorğusu uğursuz oldu: ${errorMessage}`);\n            }\n\n            const data = await response.json();\n            \n            if (!data.candidates || data.candidates.length === 0) {\n                throw new Error('AI modelindən cavab alınmadı.');\n            }\n\n            // Gemini sometimes wraps the JSON in markdown, so we need to clean it.\n            let jsonString = data.candidates[0].content.parts[0].text;\n            jsonString = jsonString.replace(/```json/g, '').replace(/```/g, '').trim();\n            \n            const generatedQuestions = JSON.parse(jsonString);\n            const newQuestions = generatedQuestions.map(q => ({ ...q, id: Date.now() + Math.random() }));\n            handleQuestionsChange([...quiz.questions, ...newQuestions]);\n            showToast(`${newQuestions.length} sual AI tərəfindən uğurla yaradıldı!`);\n\n            // Save context for variation generation\n            setAiSourceText(text + fileBasedContent);\n            setAiSourceFiles(files.filter(f => f.type.startsWith('image/') || f.type === 'application/pdf'));\n        } catch (error) {\n            console.error(\"AI Generation Error:\", error);\n            throw new Error(error.message || 'Naməlum şəbəkə xətası.');\n        }\n    };\n\n    const formatDateTimeForInput = (isoString) => {\n        if (!isoString) return '';\n        const date = new Date(isoString);\n        return new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toISOString().slice(0, 16);\n    };\n\n    const handleGenerateVariation = async (originalQuestion) => {\n        showToast('Bənzər sual yaradılır...');\n\n        const { id, ...questionExample } = originalQuestion;\n\n        let prompt;\n        const hasAiContext = aiSourceText || aiSourceFiles.length > 0;\n\n        if (hasAiContext) {\n            prompt = `\n                Mənə verilən mətnə və/və ya fayllara əsaslanaraq, aşağıdakı nümunəyə bənzər YENİ bir sual yarat.\n                Mənbə Mətn: \"${aiSourceText}\"\n            `;\n        } else {\n            let questionContext = `Sualın mətni: ${questionExample.text}\\n`;\n            // Handle different question types to build context\n            switch (questionExample.type) {\n                case 'single':\n                case 'multiple':\n                    if (questionExample.options && questionExample.options.length > 0) {\n                        questionContext += `Variantlar: ${questionExample.options.join(', ')}\\n`;\n                        const correctOptions = (questionExample.correctAnswers || []).map(i => questionExample.options[i]);\n                        questionContext += `Düzgün cavab(lar): ${correctOptions.join(', ')}\\n`;\n                    }\n                    break;\n                case 'textInput':\n                case 'fillInTheBlanks':\n                    questionContext += `Düzgün cavab(lar): ${(questionExample.correctAnswers || []).join(', ')}\\n`;\n                    break;\n                case 'trueFalse':\n                    questionContext += `Düzgün cavab: ${questionExample.correctAnswer}\\n`;\n                    break;\n                case 'ordering':\n                    questionContext += `Düzgün sıralama: ${(questionExample.orderItems || []).join(' -> ')}\\n`;\n                    break;\n                // For 'open' questions, no answer context is needed.\n                default:\n                    break;\n            }\n            if (questionExample.explanation) {\n                questionContext += `İzah: ${questionExample.explanation}\\n`;\n            }\n\n            prompt = `\n                Aşağıdakı sualın öz məzmununa (mətn, variantlar, izah) əsaslanaraq, ona bənzər YENİ bir sual yarat.\n                Məlumat mənbəyi kimi aşağıdakı sualın detallarını istifadə et.\n                Məlumat Mənbəyi (Sualın özü):\\n${questionContext}\n            `;\n        }\n\n        prompt += `\n\n            Qaydalar:\n            1. Nəticəni mütləq və yalnız bir elementdən ibarət valid JSON array formatında qaytar.\n            2. Yeni sual nümunə ilə eyni mövzuda, stildə və çətinlikdə olmalıdır, lakin onu təkrarlamamalıdır.\n            3. Nümunədəki bütün sahələri (type, points, tags, imageUrl və s.) nəzərə al.\n            4. Əgər nümunədə \"imageUrl\" varsa, yeni sual üçün də uyğun, YENİ bir şəkil tapmağa çalış.\n\n            JSON Strukturu (nümunə ilə eyni olmalıdır): ${JSON.stringify(questionExample)}\n\n            Sual üçün nümunə:\n            ${JSON.stringify(questionExample)}\n        `;\n\n        const fileParts = [];\n        for (const file of aiSourceFiles) {\n             const base64 = await new Promise((resolve, reject) => {\n                const reader = new FileReader();\n                reader.readAsDataURL(file);\n                reader.onload = () => resolve(reader.result.split(',')[1]);\n                reader.onerror = error => reject(error);\n            });\n            fileParts.push({\n                inline_data: { mime_type: file.type, data: base64 }\n            });\n        }\n\n        const url = `${process.env.REACT_APP_SUPABASE_URL}/functions/v1/gemini-proxy`;\n        const requestBody = {\n            contents: [{ parts: [{ text: prompt }, ...fileParts] }]\n        };\n\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Authorization': `Bearer ${process.env.REACT_APP_SUPABASE_ANON_KEY}`,\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(requestBody)\n            });\n\n            if (!response.ok) {\n                const errorBody = await response.json();\n                throw new Error(errorBody?.error?.message || response.statusText);\n            }\n\n            const data = await response.json();\n            let jsonString = data.candidates[0].content.parts[0].text;\n            jsonString = jsonString.replace(/```json/g, '').replace(/```/g, '').trim();\n\n            const generatedQuestions = JSON.parse(jsonString);\n\n            if (generatedQuestions && generatedQuestions.length > 0) {\n                const newQuestion = { ...generatedQuestions[0], id: Date.now() + Math.random() };\n                const originalIndex = quiz.questions.findIndex(q => q.id === originalQuestion.id);\n                const newQuestionsList = [...quiz.questions];\n                newQuestionsList.splice(originalIndex + 1, 0, newQuestion);\n                handleQuestionsChange(newQuestionsList);\n                showToast('Bənzər sual uğurla yaradıldı və əlavə edildi!');\n            } else {\n                throw new Error('AI modelindən düzgün formatda cavab alınmadı.');\n            }\n        } catch (error) {\n            console.error(\"AI Variation Generation Error:\", error);\n            showToast(`Bənzər sual yaradılarkən xəta baş verdi: ${error.message}`);\n        }\n    };\n\n    if (!quiz) {\n        return <div>Yüklənir...</div>;\n    }\n\n    return (\n        <>\n        <AIQuestionGeneratorModal\n            isOpen={isAIGeneratorOpen}\n            onClose={() => setIsAIGeneratorOpen(false)}\n            onGenerate={handleGenerateAIQuestions}\n            showToast={showToast}\n        />\n        <div className=\"animate-fade-in\">\n            <div className=\"grid lg:grid-cols-3 gap-8 items-start\">\n\n                {/* --- Left Column: Settings Panel --- */}\n                <div className=\"lg:col-span-1 lg:sticky lg:top-24 lg:max-h-[calc(100vh-7rem)] lg:overflow-y-auto lg:pr-4 space-y-6\">\n                    <div className=\"flex flex-col gap-2\">\n                        <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800\">Test Redaktoru</h1>\n                        <div className=\"flex flex-col sm:flex-row gap-2\">\n                            <Button onClick={onBack} variant=\"secondary\" className=\"w-full justify-center\"><ArrowLeftIcon /> Siyahıya qayıt</Button>\n                            <Button onClick={handleSave} className=\"w-full justify-center\"><CheckIcon />Testi yadda saxla</Button>\n                        </div>\n                    </div>\n\n                    <Card>\n                        <h3 className=\"font-bold text-gray-800 mb-3 flex items-center gap-2\"><DocumentTextIcon /> Əsas Məlumatlar</h3>\n                        <div className=\"space-y-4\">\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Testin adı</label>\n                                <input type=\"text\" name=\"title\" value={quiz.title || ''} onChange={handleQuizInfoChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" />\n                            </div>\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Kateqoriya</label>\n                                <ComboBox options={existingCategories} value={quiz.category || ''} onChange={handleCategoryChange} placeholder=\"Kateqoriyanı seçin və ya yazın...\" />\n                            </div>\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Təsvir</label>\n                                <textarea name=\"description\" value={quiz.description || ''} onChange={handleQuizInfoChange} rows=\"4\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\"></textarea>\n                            </div>\n                        </div>\n                    </Card>\n\n                    <Card>\n                        <h3 className=\"font-bold text-gray-800 mb-3 flex items-center gap-2\"><PencilAltIcon /> Parametrlər</h3>\n                        <div className=\"space-y-4\">\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Test üçün vaxt (dəqiqə)</label>\n                                <input type=\"number\" name=\"timeLimit\" value={quiz.timeLimit || 10} onChange={handleQuizInfoChange} min=\"1\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" />\n                            </div>\n                            <div className=\"space-y-3 pt-2 border-t\">\n                                <label className=\"flex items-center cursor-pointer\"><input type=\"checkbox\" name=\"shuffleQuestions\" checked={!!quiz.shuffleQuestions} onChange={handleQuizInfoChange} className=\"h-4 w-4 text-orange-600 rounded border-gray-300\" /> <span className=\"ml-2 text-sm text-gray-700\">Sualları qarışdır</span></label>\n                                <label className=\"flex items-center cursor-pointer\"><input type=\"checkbox\" name=\"shuffleOptions\" checked={!!quiz.shuffleOptions} onChange={handleQuizInfoChange} className=\"h-4 w-4 text-orange-600 rounded border-gray-300\" /> <span className=\"ml-2 text-sm text-gray-700\">Variantları qarışdır</span></label>\n                                <label className=\"flex items-center cursor-pointer\"><input type=\"checkbox\" name=\"display_all_questions\" checked={!!quiz.display_all_questions} onChange={handleQuizInfoChange} className=\"h-4 w-4 text-orange-600 rounded border-gray-300\" /> <span className=\"ml-2 text-sm text-gray-700\">Bütün sualları bir səhifədə göstər</span></label>\n                                <label className=\"flex items-center cursor-pointer\"><input type=\"checkbox\" name=\"allow_back_navigation\" checked={quiz.allow_back_navigation === true} onChange={handleQuizInfoChange} className=\"h-4 w-4 text-orange-600 rounded border-gray-300\" /> <span className=\"ml-2 text-sm text-gray-700\">Geri qayıtmağa icazə ver</span></label>\n                                <label className=\"flex items-center cursor-pointer\"><input type=\"checkbox\" name=\"is_published\" checked={!!quiz.is_published} onChange={handleQuizInfoChange} className=\"h-4 w-4 text-orange-600 rounded border-gray-300\" /> <span className=\"ml-2 text-sm text-gray-700\">Dərc et (istifadəçilər üçün görünən)</span></label>\n                            </div>\n                        </div>\n                    </Card>\n\n                    <Card>\n                        <h3 className=\"font-bold text-gray-800 mb-3 flex items-center gap-2\"><ClockIcon /> Qabaqcıl Tənzimləmələr</h3>\n                        <div className=\"space-y-4\">\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Başlama vaxtı (Könüllü)</label>\n                                <input type=\"datetime-local\" name=\"start_time\" value={formatDateTimeForInput(quiz.start_time)} onChange={handleQuizInfoChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" />\n                            </div>\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Bitmə vaxtı (Könüllü)</label>\n                                <input type=\"datetime-local\" name=\"end_time\" value={formatDateTimeForInput(quiz.end_time)} onChange={handleQuizInfoChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" />\n                            </div>\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Cəhd limiti (0 = limitsiz)</label>\n                                <input type=\"number\" name=\"attempt_limit\" value={quiz.attempt_limit || 0} onChange={handleQuizInfoChange} min=\"0\" className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" />\n                            </div>\n                            <div>\n                                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Giriş Kodu (Könüllü)</label>\n                                <input type=\"text\" name=\"passcode\" value={quiz.passcode || ''} onChange={handleQuizInfoChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" placeholder=\"Test üçün parol təyin et\" />\n                            </div>\n                        </div>\n                    </Card>\n                </div>\n\n                {/* --- Right Column: Questions --- */}\n                <div className=\"lg:col-span-2 space-y-6\">\n                    <Card>\n                        <div className=\"flex flex-wrap gap-4 justify-between items-center mb-4\">\n                            <h2 className=\"text-xl font-bold text-gray-800\">Suallar ({quiz.questions.length})</h2>\n                            <div className=\"flex flex-wrap gap-2\">\n                                <Button onClick={generate9thGradeTemplate} variant=\"secondary\">9-cu Sinif Şablonu</Button>\n                                <Button onClick={generate11thGradeTemplate} variant=\"secondary\">11-ci Sinif Şablonu</Button>\n                            <Button onClick={handleExportToWord} variant=\"secondary\"><DownloadIcon /> Word</Button>\n                                <Button onClick={onAddFromBankRequest} variant=\"secondary\"><LibraryIcon />Bankdan</Button>\n                                <Button onClick={onImportRequest} variant=\"secondary\"><UploadIcon />CSV-dən</Button>\n                                <Button onClick={() => onSaveAllQuestionsToBank(quiz.questions)} variant=\"secondary\"><SaveIcon />Hamısını Banka Göndər</Button>\n                                <Button onClick={() => setIsAIGeneratorOpen(true)} variant=\"primary\"><SparklesIcon />AI ilə Yarat</Button>\n                                <Button onClick={addQuestion}><PlusIcon />Yeni Sual</Button>\n                            </div>\n                        </div>\n                        <div className=\"space-y-4\">\n                            {quiz.questions.map((q, index) => (\n                                <QuestionEditor\n                                    key={q.id}\n                                    question={q}\n                                    index={index}\n                                    onUpdate={updateQuestion}\n                                    onDelete={() => deleteQuestion(q.id)}\n                                    onDuplicate={() => handleDuplicateQuestion(q.id)}\n                                    onSaveToBank={() => onSaveQuestionToBank(q)}\n                                    onGenerateVariation={() => handleGenerateVariation(q)}\n                                    uniqueTags={uniqueTags}\n                                />\n                            ))}\n                        </div>\n                        {quiz.questions.length === 0 && (\n                            <div className=\"text-center py-12 border-2 border-dashed border-gray-300 rounded-lg\">\n                                <p className=\"text-gray-500\">Hələ heç bir sual əlavə edilməyib. Yuxarıdakı düymələrdən istifadə edərək sual əlavə edin.</p>\n                            </div>\n                        )}\n                    </Card>\n                </div>\n            </div>\n        </div>\n        </>\n    );\n};\n\nexport default QuizEditorPage;\n","import { Document, Paragraph, TextRun, HeadingLevel, AlignmentType, TabStopType, TabStopPosition } from 'docx';\n\nexport const generateWordDocument = (quiz) => {\n    // Новая функция для форматирования вариантов с буквами (A, B, C...)\n    const formatOptionWithLetter = (option, index) => {\n        const letter = String.fromCharCode(65 + index); // A, B, C...\n        return new Paragraph({\n            children: [\n                new TextRun({ text: `\\t${letter}) ` }),\n                new TextRun(option.toString()),\n            ],\n            indent: { left: 400 },\n        });\n    };\n\n    const children = [\n        new Paragraph({\n            children: [\n                new TextRun(\"Name:_________________________\"),\n                new TextRun({\n                    text: \"\\tDate:____________________\",\n                    break: 0,\n                }),\n            ],\n            tabStops: [\n                {\n                    type: TabStopType.RIGHT,\n                    position: TabStopPosition.MAX,\n                },\n            ],\n            spacing: { after: 400 },\n        }),\n        new Paragraph({\n            text: quiz.title,\n            heading: HeadingLevel.HEADING_1,\n            alignment: AlignmentType.CENTER,\n        }),\n        new Paragraph({\n            text: quiz.description || '',\n        }),\n        new Paragraph({ text: '' }), // Spacer\n    ];\n\n    quiz.questions.forEach((q, index) => {\n        // Для fillInTheBlanks создаем специальный параграф с пропусками\n        if (q.type === 'fillInTheBlanks') {\n            const textWithBlanks = q.text.replace(/\\[.*?\\]/g, '[_________________]');\n            children.push(\n                new Paragraph({\n                    children: [\n                        new TextRun({ text: `${index + 1}. `, bold: true }),\n                        new TextRun(textWithBlanks),\n                    ],\n                    spacing: { before: 200 },\n                })\n            );\n        } else {\n            // Для всех остальных типов вопросов оставляем как было\n            children.push(\n                new Paragraph({\n                    children: [\n                        new TextRun({ text: `${index + 1}. `, bold: true }),\n                        new TextRun(q.text),\n                    ],\n                    spacing: { before: 200 },\n                })\n            );\n        }\n\n        switch (q.type) {\n            case 'single':\n            case 'multiple':\n                q.options.forEach((opt, optIndex) => {\n                    children.push(formatOptionWithLetter(opt, optIndex));\n                });\n                break;\n            case 'trueFalse':\n                children.push(formatOptionWithLetter(\"Doğru\", 0));\n                children.push(formatOptionWithLetter(\"Yanlış\", 1));\n                break;\n            case 'textInput':\n            case 'open':\n                 // Оставляем пустое место для письменного ответа\n                 children.push(new Paragraph({ text: `\\n\\n\\n` }));\n                break;\n            case 'ordering':\n                // Перемешиваем элементы для сортировки\n                const shuffledItems = [...q.orderItems].sort(() => Math.random() - 0.5);\n                shuffledItems.forEach((item) => {\n                    children.push(new Paragraph({ text: `\\t- ${item}`}));\n                });\n                 children.push(new Paragraph({ text: `\\n\\n` })); // Место для ответа\n                 break;\n            default:\n                break;\n        }\n    });\n\n    const doc = new Document({\n        styles: {\n            default: {\n                document: {\n                    run: {\n                        font: \"Times New Roman\",\n                        size: 24, // 12pt * 2\n                    },\n                },\n            },\n            heading1: {\n                run: {\n                    font: \"Times New Roman\",\n                    size: 32, // 16pt\n                    bold: true,\n                },\n            },\n        },\n        sections: [{\n            children: children,\n        }],\n    });\n\n    return doc;\n};","import React from 'react';\r\n\r\nconst Card = ({ children, className = '' }) => (\r\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\r\n);\r\n\r\nexport default Card;"],"names":["XCircleIcon","_jsx","xmlns","className","fill","viewBox","stroke","strokeWidth","children","strokeLinecap","strokeLinejoin","d","TagPickerModal","_ref","isOpen","onClose","onAddTags","uniqueTags","existingTags","searchTerm","setSearchTerm","useState","selectedTags","setSelectedTags","Set","availableTags","useMemo","lowercasedTerm","toLowerCase","filter","tag","includes","_jsxs","Modal","title","type","placeholder","value","onChange","e","target","map","checked","has","newSelection","delete","add","handleToggleTag","Button","onClick","handleAdd","Array","from","disabled","size","TagEditor","_ref2","tags","onUpdate","inputValue","setInputValue","isModalOpen","setIsModalOpen","addTag","index","removeTag","tagToRemove","onKeyDown","key","preventDefault","trim","length","variant","PlusIcon","tagsToAdd","AnswerEditor","_ref3","_question$orderItems","question","handleCorrectTextAnswerChange","_objectSpread","correctAnswers","handleTrueFalseChange","correctAnswer","addOption","options","addOrderItem","orderItems","handleFillInTheBlanksChange","text","match","b","slice","option","idx","name","concat","id","newCorrect","i","handleCorrectAnswerChange","handleOptionChange","newOptions","_","removeOption","TrashIcon","item","handleOrderItemChange","newItems","removeOrderItem","rows","LightbulbIcon","_ref4","onDelete","onDuplicate","onSaveToBank","onGenerateVariation","localQuestion","setLocalQuestion","useEffect","handler","setTimeout","JSON","stringify","clearTimeout","handleInputChange","processedValue","parseInt","prev","points","min","LibraryIcon","DuplicateIcon","imageUrl","audioUrl","newTags","explanation","query","setQuery","setIsOpen","filteredOptions","onFocus","onBlur","onMouseDown","handleSelect","AIQuestionGeneratorModal","onGenerate","showToast","setText","criteria","setCriteria","count","setTags","files","setFiles","totalPoints","setTotalPoints","numOptions","setNumOptions","isLoading","setIsLoading","difficulty","setDifficulty","addImage","setAddImage","generateDistractors","setGenerateDistractors","fileInputRef","React","handleCriteriaChange","field","newCriteria","ref","newFiles","multiple","accept","current","click","UploadIcon","file","removeFile","fileToRemove","XIcon","crit","removeCriteria","addCriteria","max","async","reduce","sum","c","error","message","_Fragment","SparklesIcon","quiz","onSave","onBack","existingCategories","onImportRequest","onAddFromBankRequest","onDraftChange","onSaveQuestionToBank","onSaveAllQuestionsToBank","isAIGeneratorOpen","setIsAIGeneratorOpen","aiSourceText","setAiSourceText","aiSourceFiles","setAiSourceFiles","handleQuizInfoChange","finalValue","Date","toISOString","handleQuestionsChange","newQuestions","questions","generateQuestion","arguments","undefined","now","Math","random","updateQuestion","updatedQuestion","q","formatDateTimeForInput","isoString","date","getTime","getTimezoneOffset","questionRequests","join","totalQuestions","pointsPerQuestion","floor","tagsArray","split","t","Boolean","fileBasedContent","fileParts","startsWith","base64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","push","inline_data","mime_type","data","endsWith","arrayBuffer","mammoth","tempDiv","document","createElement","innerHTML","textContent","innerText","prompt","url","process","requestBody","contents","parts","response","fetch","method","headers","body","ok","_errorBody$error","errorBody","json","errorMessage","statusText","Error","candidates","jsonString","content","replace","parse","f","console","ArrowLeftIcon","handleSave","category","CheckIcon","Card","DocumentTextIcon","ComboBox","description","PencilAltIcon","timeLimit","shuffleQuestions","shuffleOptions","display_all_questions","allow_back_navigation","is_published","ClockIcon","start_time","end_time","attempt_limit","passcode","generate9thGradeTemplate","window","confirm","generate11thGradeTemplate","handleExportToWord","doc","formatOptionWithLetter","letter","String","fromCharCode","Paragraph","TextRun","toString","indent","left","break","tabStops","TabStopType","RIGHT","position","TabStopPosition","MAX","spacing","after","heading","HeadingLevel","HEADING_1","alignment","AlignmentType","CENTER","forEach","textWithBlanks","bold","before","opt","optIndex","sort","Document","styles","default","run","font","heading1","sections","generateWordDocument","Packer","toBlob","then","blob","saveAs","DownloadIcon","SaveIcon","addQuestion","newQuestion","QuestionEditor","deleteQuestion","questionId","questionToClone","find","clonedQuestion","originalIndex","findIndex","splice","handleDuplicateQuestion","originalQuestion","questionExample","_objectWithoutProperties","_excluded","questionContext","correctOptions","_errorBody$error2","generatedQuestions","newQuestionsList","handleGenerateVariation"],"sourceRoot":""}