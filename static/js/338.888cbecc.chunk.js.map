{"version":3,"file":"static/js/338.888cbecc.chunk.js","mappings":"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","sources":["components/ui/Card.js","pages/ManualReviewPage.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ children, className = '' }) => (\r\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\r\n);\r\n\r\nexport default Card;","import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport { ArrowLeftIcon, CheckIcon } from '../assets/icons';\n\nconst ManualReviewPage = ({ results, quizzes, onUpdateResult }) => {\n    const { resultId } = useParams();\n    const navigate = useNavigate();\n\n    const [result, setResult] = useState(null);\n    const [quiz, setQuiz] = useState(null);\n    const [gradedAnswers, setGradedAnswers] = useState({});\n    const [password, setPassword] = useState('');\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n    useEffect(() => {\n        const currentResult = results.find(r => r.id === Number(resultId));\n        if (currentResult) {\n            setResult(currentResult);\n            const currentQuiz = quizzes.find(q => q.id === currentResult.quizId);\n            setQuiz(currentQuiz);\n\n            const initialGrades = {};\n            currentResult.questionOrder.forEach(q => {\n                if (q.type === 'open') {\n                    const userAnswer = currentResult.userAnswers[q.id];\n                    initialGrades[q.id] = userAnswer?.score || 0;\n                }\n            });\n            setGradedAnswers(initialGrades);\n        }\n    }, [resultId, results, quizzes]);\n\n    const handlePasswordChange = (e) => {\n        setPassword(e.target.value);\n    };\n\n    const handlePasswordSubmit = () => {\n        if (password === 'sn200924') {\n            setIsAuthenticated(true);\n        } else {\n            alert('Yanlış parol');\n        }\n    };\n\n    const handleGradeChange = (questionId, score) => {\n        const question = quiz.questions.find(q => q.id === questionId);\n        const maxPoints = question.points || 1;\n        const newScore = Math.max(0, Math.min(maxPoints, Number(score)));\n        setGradedAnswers(prev => ({ ...prev, [questionId]: newScore }));\n    };\n\n    const handleSaveGrades = () => {\n        let finalScore = result.score;\n        const newAnswers = { ...result.userAnswers };\n\n        Object.entries(gradedAnswers).forEach(([questionId, score]) => {\n            const question = quiz.questions.find(q => q.id === Number(questionId));\n            if (!question || question.type !== 'open') return;\n\n            const originalAnswerObject = result.userAnswers[questionId];\n            const oldScore = originalAnswerObject?.score || 0;\n            // Correctly get the answer text, whether it's a string or already an object.\n            const answerText = typeof originalAnswerObject === 'object' ? originalAnswerObject.answer : originalAnswerObject;\n            \n            finalScore = finalScore - oldScore + score;\n\n            // Always save as an object to preserve both answer and score.\n            newAnswers[questionId] = {\n                answer: answerText,\n                score: score\n            };\n        });\n\n        const finalPercentage = result.totalPoints > 0 ? Math.round((finalScore / result.totalPoints) * 100) : 0;\n\n        const updatedResult = {\n            ...result,\n            score: finalScore,\n            percentage: finalPercentage,\n            userAnswers: newAnswers,\n            status: 'completed'\n        };\n\n        onUpdateResult(updatedResult);\n    };\n\n    if (!isAuthenticated) {\n        return (\n            <Card className=\"text-center\">\n                <h2 className=\"text-xl font-bold mb-4\">Yoxlama üçün parol tələb olunur</h2>\n                <input\n                    type=\"password\"\n                    value={password}\n                    onChange={handlePasswordChange}\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-orange-500 focus:border-orange-500\"\n                />\n                <Button onClick={handlePasswordSubmit} className=\"mt-4\">Daxil ol</Button>\n            </Card>\n        );\n    }\n\n    if (!result || !quiz) {\n        return <Card className=\"text-center\"><p>Nəticə və ya test tapılmadı.</p></Card>;\n    }\n\n    const openQuestions = result.questionOrder.filter(q => q.type === 'open');\n\n    return (\n        <div className=\"animate-fade-in space-y-6\">\n            <div className=\"flex justify-between items-center\">\n                <div>\n                    <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-800\">Manual Yoxlama</h1>\n                    <p className=\"text-lg text-gray-600\">{quiz.title} - {result.userName} {result.userSurname}</p>\n                </div>\n                <Button onClick={() => navigate('/stats')} variant=\"secondary\"><ArrowLeftIcon /> Statistikaya qayıt</Button>\n            </div>\n\n            {openQuestions.length === 0 ? (\n                <Card><p>Bu testdə yoxlanılacaq açıq sual yoxdur.</p></Card>\n            ) : (\n                openQuestions.map(question => {\n                    const userAnswer = result.userAnswers[question.id];\n                    // Correctly display the answer text, whether it's a string or an object.\n                    const answerText = userAnswer?.answer || userAnswer;\n                    return (\n                        <Card key={question.id}>\n                            <h3 className=\"font-semibold text-lg text-gray-800 mb-2\">{question.text}</h3>\n                            <p className=\"text-sm text-gray-500 mb-4\">Maksimum bal: {question.points || 1}</p>\n                            <div className=\"p-4 bg-gray-100 rounded-md\">\n                                <p className=\"font-semibold\">Tələbənin cavabı:</p>\n                                <p className=\"whitespace-pre-wrap\">{answerText}</p>\n                            </div>\n                            <div className=\"mt-4\">\n                                <label className=\"block text-sm font-medium text-gray-700\">Qiymət (bal)</label>\n                                <input\n                                    type=\"number\"\n                                    value={gradedAnswers[question.id] || ''}\n                                    onChange={(e) => handleGradeChange(question.id, e.target.value)}\n                                    max={question.points || 1}\n                                    min=\"0\"\n                                    className=\"mt-1 w-24 rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500\"\n                                />\n                            </div>\n                        </Card>\n                    )\n                })\n            )}\n\n            <div className=\"flex justify-end\">\n                <Button onClick={handleSaveGrades}><CheckIcon /> Yoxlamanı bitir və nəticəni yenilə</Button>\n            </div>\n        </div>\n    );\n};\n\nexport default ManualReviewPage;"],"names":["_ref","children","className","_jsx","concat","results","quizzes","onUpdateResult","resultId","useParams","navigate","useNavigate","result","setResult","useState","quiz","setQuiz","gradedAnswers","setGradedAnswers","password","setPassword","isAuthenticated","setIsAuthenticated","useEffect","currentResult","find","r","id","Number","currentQuiz","q","quizId","initialGrades","questionOrder","forEach","type","userAnswer","userAnswers","score","handlePasswordChange","e","target","value","handlePasswordSubmit","alert","_jsxs","Card","onChange","Button","onClick","openQuestions","filter","title","userName","userSurname","variant","ArrowLeftIcon","length","map","question","answerText","answer","text","points","handleGradeChange","questionId","maxPoints","questions","newScore","Math","max","min","prev","_objectSpread","handleSaveGrades","finalScore","newAnswers","Object","entries","_ref2","originalAnswerObject","oldScore","finalPercentage","totalPoints","round","updatedResult","percentage","status","CheckIcon"],"sourceRoot":""}