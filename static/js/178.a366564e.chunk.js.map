{"version":3,"file":"static/js/178.a366564e.chunk.js","mappings":"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","sources":["components/ui/Card.js","components/OrderingQuestion.js","pages/TakeQuizPage.js"],"sourcesContent":["import React from 'react';\n\nconst Card = ({ children, className = '' }) => (\n    <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${className}`}>{children}</div>\n);\n\nexport default Card;","import React, { useState, useEffect, useRef } from 'react';\n\nconst OrderingQuestion = ({ question, onAnswer }) => {\n    const [items, setItems] = useState([]);\n    const dragItem = useRef(null);\n    const dragOverItem = useRef(null);\n\n    useEffect(() => {\n        // Shuffle the items initially\n        setItems([...question.orderItems].sort(() => Math.random() - 0.5));\n    }, [question]);\n\n    const handleDragEnd = () => {\n        const newItems = [...items];\n        const draggedItemContent = newItems.splice(dragItem.current, 1)[0];\n        newItems.splice(dragOverItem.current, 0, draggedItemContent);\n        dragItem.current = null;\n        dragOverItem.current = null;\n        setItems(newItems);\n        onAnswer(newItems);\n    };\n\n    return (\n        <div>\n            <p className=\"text-sm text-gray-500 mb-2\">Elementləri düzgün ardıcıllıqla yerləşdirmək üçün sürüşdürün.</p>\n            {items.map((item, index) => (\n                <div \n                    key={index} \n                    draggable \n                    onDragStart={() => (dragItem.current = index)} \n                    onDragEnter={() => (dragOverItem.current = index)} \n                    onDragEnd={handleDragEnd} \n                    onDragOver={(e) => e.preventDefault()} \n                    className=\"p-3 mb-2 bg-gray-100 rounded-md cursor-grab active:cursor-grabbing border border-gray-200\"\n                >\n                    {item}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default OrderingQuestion;","import React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Card from '../components/ui/Card';\nimport Button from '../components/ui/Button';\nimport OrderingQuestion from '../components/OrderingQuestion';\nimport { SpeakerIcon, ArrowLeftIcon, ArrowRightIcon, CheckIcon, LightbulbIcon } from '../assets/icons';\n\n// --- Вспомогательная функция для проверки ответа ---\nconst isAnswerCorrect = (question, userAnswer) => {\n    if (userAnswer === undefined || userAnswer === null) return false;\n    // Открытые вопросы не проверяются автоматически\n    if (question.type === 'open') return false; \n    switch (question.type) {\n        case 'single': return userAnswer === question.options[question.correctAnswers[0]];\n        case 'multiple':\n            const correctOptions = question.correctAnswers.map(i => question.options[i]).sort();\n            const userOptions = userAnswer ? [...userAnswer].sort() : [];\n            return JSON.stringify(correctOptions) === JSON.stringify(userOptions);\n        case 'textInput': return userAnswer.trim().toLowerCase() === question.correctAnswers[0].trim().toLowerCase();\n        case 'trueFalse': return userAnswer === question.correctAnswer;\n        case 'ordering': return JSON.stringify(userAnswer) === JSON.stringify(question.orderItems);\n        default: return false;\n    }\n};\n\nconst TakeQuizPage = ({ quiz, user, onSubmit, mode = 'exam' }) => {\n    const navigate = useNavigate();\n    \n    const [answers, setAnswers] = useState(() => {\n        const initialState = {};\n        (quiz.questions || []).forEach(q => {\n            if (q.type === 'textInput' || q.type === 'open') {\n                initialState[q.id] = '';\n            }\n        });\n        return initialState;\n    });\n\n    const [timeLeft, setTimeLeft] = useState((quiz.timeLimit || 10) * 60);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [isSubmitting, setIsSubmitting] = useState(false); // State to prevent double submission\n\n    // --- Состояния для режима тренировки ---\n    const [isAnswerChecked, setIsAnswerChecked] = useState(false);\n\n    const isPracticeMode = mode === 'practice';\n\n    const quizQuestions = useMemo(() => {\n        return quiz.shuffleQuestions ? [...quiz.questions].sort(() => Math.random() - 0.5) : quiz.questions;\n    }, [quiz]);\n\n    const shuffledOptions = useMemo(() => {\n        if (!quiz.shuffleOptions) return {};\n        const shuffled = {};\n        quizQuestions.forEach(q => {\n            if (['single', 'multiple'].includes(q.type)) {\n                shuffled[q.id] = [...q.options].sort(() => Math.random() - 0.5);\n            }\n        });\n        return shuffled;\n    }, [quizQuestions, quiz.shuffleOptions]);\n\n    const handleSubmitQuiz = useCallback(() => {\n        if (isSubmitting) return;\n        setIsSubmitting(true);\n        if (onSubmit) {\n            onSubmit(answers, quizQuestions);\n        }\n    }, [isSubmitting, onSubmit, answers, quizQuestions]);\n\n    useEffect(() => {\n        if (isPracticeMode) return;\n\n        if (timeLeft <= 0) {\n            handleSubmitQuiz();\n            return;\n        }\n        const timer = setInterval(() => setTimeLeft(t => t - 1), 1000);\n        return () => clearInterval(timer);\n    }, [timeLeft, isPracticeMode, handleSubmitQuiz]);\n\n    const handleAnswerChange = (questionId, answer) => {\n        if (isPracticeMode && isAnswerChecked) return;\n        setAnswers(prev => ({ ...prev, [questionId]: answer }));\n    };\n\n    const handleCheckAnswer = () => {\n        setIsAnswerChecked(true);\n    };\n\n    const handleNextQuestion = () => {\n        setIsAnswerChecked(false);\n        setCurrentQuestionIndex(prev => prev + 1);\n    };\n\n    const formatTime = (seconds) => `${Math.floor(seconds / 60)}:${('0' + seconds % 60).slice(-2)}`;\n    const speakText = (text) => {\n        if ('speechSynthesis' in window) {\n            window.speechSynthesis.cancel();\n            const utterance = new SpeechSynthesisUtterance(text);\n            utterance.lang = 'az-AZ';\n            window.speechSynthesis.speak(utterance);\n        } else { alert('Sizin brauzeriniz mətni səsləndirməyi dəstəkləmir.'); }\n    };\n\n    const q = quizQuestions[currentQuestionIndex];\n    if (!q) return <Card><p>Bu testdə hələlik sual yoxdur.</p></Card>;\n    const progress = ((currentQuestionIndex + 1) / quizQuestions.length) * 100;\n    const optionsForCurrentQuestion = quiz.shuffleOptions && shuffledOptions[q.id] ? shuffledOptions[q.id] : q.options;\n\n    const getOptionClassName = (option, index) => {\n        if (!isPracticeMode || !isAnswerChecked) return 'border-transparent';\n        \n        let isCorrect = false;\n        if (q.type === 'single') isCorrect = index === q.correctAnswers[0];\n        if (q.type === 'multiple') isCorrect = q.correctAnswers.includes(index);\n\n        if (isCorrect) return 'border-green-500 bg-green-100';\n\n        let isSelected = false;\n        if (q.type === 'single') isSelected = answers[q.id] === option;\n        if (q.type === 'multiple') isSelected = answers[q.id]?.includes(option);\n\n        if (isSelected) return 'border-red-500 bg-red-100';\n\n        return 'border-transparent';\n    };\n\n    return (\n        <div className=\"animate-fade-in\">\n            <Card>\n                <div className=\"flex flex-col sm:flex-row justify-between items-center mb-2 gap-4\">\n                    <h1 className=\"text-xl sm:text-2xl font-bold text-orange-600 text-center sm:text-left\">{quiz.title}</h1>\n                    {!isPracticeMode && <div className=\"text-2xl font-bold text-orange-500 bg-orange-100 px-4 py-2 rounded-lg w-full sm:w-auto text-center\">{formatTime(timeLeft)}</div>}\n                    {isPracticeMode && <div className=\"text-lg font-bold text-blue-500 bg-blue-100 px-4 py-2 rounded-lg w-full sm:w-auto text-center\">Məşq Rejimi</div>}\n                </div>\n                {!isPracticeMode && user && <p className=\"text-center sm:text-left text-gray-600 mb-4\">Uğurlar, {user.first_name}!</p>}\n                <div className=\"w-full bg-gray-200 rounded-full h-2.5 mb-6\"><div className=\"bg-gradient-to-r from-orange-400 to-red-500 h-2.5 rounded-full transition-all duration-500\" style={{ width: `${progress}%` }}></div></div>\n                \n                <div key={q.id} className=\"bg-orange-50 p-4 sm:p-6 rounded-lg\">\n                    <div className=\"flex justify-between items-start\">\n                        <h3 className=\"font-semibold text-lg sm:text-xl text-gray-800 mb-4 flex-1\">{currentQuestionIndex + 1}. {q.text}</h3>\n                        <button onClick={() => speakText(q.text)} className=\"text-gray-500 hover:text-orange-500 ml-2 sm:ml-4 p-2\"><SpeakerIcon /></button>\n                    </div>\n                    {q.imageUrl && <img src={q.imageUrl} alt=\"Question illustration\" className=\"my-4 rounded-lg max-h-60 w-full object-contain mx-auto\" onError={(e) => e.target.style.display = 'none'} />}\n                    \n                    {q.type === 'single' && optionsForCurrentQuestion.map((option, optIndex) => (\n                        <div key={optIndex} className=\"mb-2\"><label className={`block p-3 rounded-lg hover:bg-orange-100 cursor-pointer border-2 ${getOptionClassName(option, optIndex)}`}><input type=\"radio\" name={q.id} value={option} checked={answers[q.id] === option} onChange={(e) => handleAnswerChange(q.id, e.target.value)} className=\"mr-3 h-4 w-4 text-orange-600 focus:ring-orange-500\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} />{option}</label></div>\n                    ))}\n                    {q.type === 'multiple' && optionsForCurrentQuestion.map((option, optIndex) => (\n                        <div key={optIndex} className=\"mb-2\"><label className={`block p-3 rounded-lg hover:bg-orange-100 cursor-pointer border-2 ${getOptionClassName(option, optIndex)}`}><input type=\"checkbox\" name={q.id} value={option} checked={answers[q.id]?.includes(option)} onChange={(e) => { const curr = answers[q.id] || []; const next = e.target.checked ? [...curr, e.target.value] : curr.filter(a => a !== e.target.value); handleAnswerChange(q.id, next); }} className=\"mr-3 h-4 w-4 text-orange-600 rounded focus:ring-orange-500\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} />{option}</label></div>\n                    ))}\n                    {q.type === 'textInput' && <input type=\"text\" value={answers[q.id]} onChange={(e) => handleAnswerChange(q.id, e.target.value)} className={`mt-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm p-3 ${isPracticeMode && isAnswerChecked ? (isAnswerCorrect(q, answers[q.id]) ? 'bg-green-100 border-green-500' : 'bg-red-100 border-red-500') : ''}`} placeholder=\"Cavabınızı daxil edin...\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} />}\n                    {q.type === 'trueFalse' && (\n                        <div className=\"flex flex-col sm:flex-row gap-3 mt-2\">\n                            <label className={`block p-3 rounded-lg hover:bg-orange-100 cursor-pointer flex-1 text-center border-2 ${isPracticeMode && isAnswerChecked && q.correctAnswer === true ? 'border-green-500 bg-green-100' : (isPracticeMode && isAnswerChecked && answers[q.id] === true ? 'border-red-500 bg-red-100' : 'border-transparent')}`}><input type=\"radio\" name={q.id} checked={answers[q.id] === true} onChange={() => handleAnswerChange(q.id, true)} className=\"mr-3 h-4 w-4 text-orange-600 focus:ring-orange-500\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} /> Doğru</label>\n                            <label className={`block p-3 rounded-lg hover:bg-orange-100 cursor-pointer flex-1 text-center border-2 ${isPracticeMode && isAnswerChecked && q.correctAnswer === false ? 'border-green-500 bg-green-100' : (isPracticeMode && isAnswerChecked && answers[q.id] === false ? 'border-red-500 bg-red-100' : 'border-transparent')}`}><input type=\"radio\" name={q.id} checked={answers[q.id] === false} onChange={() => handleAnswerChange(q.id, false)} className=\"mr-3 h-4 w-4 text-orange-600 focus:ring-orange-500\" disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} /> Yanlış</label>\n                        </div>\n                    )}\n                    {q.type === 'ordering' && <OrderingQuestion question={q} onAnswer={(orderedItems) => handleAnswerChange(q.id, orderedItems)} disabled={(isPracticeMode && isAnswerChecked) || isSubmitting} />}\n                    {q.type === 'open' && (\n                        <textarea\n                            value={answers[q.id]}\n                            onChange={(e) => handleAnswerChange(q.id, e.target.value)}\n                            className=\"mt-2 block w-full rounded-md border-gray-300 shadow-sm focus:border-orange-500 focus:ring-orange-500 sm:text-sm p-3\"\n                            placeholder=\"Cavabınızı bura daxil edin...\"\n                            rows=\"5\"\n                            disabled={(isPracticeMode && isAnswerChecked) || isSubmitting}\n                        />\n                    )}\n                </div>\n\n                {isPracticeMode && isAnswerChecked && q.explanation && (\n                    <div className=\"mt-4 p-4 bg-blue-50 border-l-4 border-blue-400\">\n                         <div className=\"flex items-start text-sm text-blue-800\">\n                            <span className=\"mr-2 mt-1 flex-shrink-0\"><LightbulbIcon /></span>\n                            <div>\n                                <strong className=\"font-semibold\">İzah:</strong>\n                                <p className=\"mt-1 whitespace-pre-wrap\">{q.explanation}</p>\n                            </div>\n                        </div>\n                    </div>\n                )}\n\n                <div className=\"mt-8 flex flex-col sm:flex-row justify-between items-center gap-4\">\n                    {!isPracticeMode && <Button onClick={() => setCurrentQuestionIndex(i => i - 1)} disabled={currentQuestionIndex === 0 || isSubmitting} variant=\"secondary\" className=\"w-full sm:w-auto\"><ArrowLeftIcon /> Geri</Button>}\n                    <span className=\"text-gray-600 font-medium order-first sm:order-none\">{currentQuestionIndex + 1} / {quizQuestions.length}</span>\n                    {isPracticeMode ? (\n                        isAnswerChecked ? (\n                            currentQuestionIndex < quizQuestions.length - 1 ? (\n                                <Button onClick={handleNextQuestion} className=\"w-full sm:w-auto\">Növbəti <ArrowRightIcon /></Button>\n                            ) : (\n                                <Button onClick={() => navigate('/')} className=\"w-full sm:w-auto\"><CheckIcon /> Məşqi bitir</Button>\n                            )\n                        ) : (\n                            <Button onClick={handleCheckAnswer} disabled={answers[q.id] === undefined} className=\"w-full sm:w-auto\">Yoxla</Button>\n                        )\n                    ) : (\n                        currentQuestionIndex < quizQuestions.length - 1 ? (\n                            <Button onClick={() => setCurrentQuestionIndex(i => i + 1)} disabled={isSubmitting} className=\"w-full sm:w-auto\">İrəli <ArrowRightIcon /></Button>\n                        ) : (\n                            <Button onClick={handleSubmitQuiz} disabled={isSubmitting} className=\"w-full sm:w-auto\">\n                                {isSubmitting ? 'Göndərilir...' : <><CheckIcon /> Bitir</>}\n                            </Button>\n                        )\n                    )}\n                </div>\n            </Card>\n        </div>\n    );\n};\n\nexport default TakeQuizPage;\n"],"names":["_ref","children","className","_jsx","concat","question","onAnswer","items","setItems","useState","dragItem","useRef","dragOverItem","useEffect","orderItems","sort","Math","random","handleDragEnd","newItems","draggedItemContent","splice","current","_jsxs","map","item","index","draggable","onDragStart","onDragEnter","onDragEnd","onDragOver","e","preventDefault","isAnswerCorrect","userAnswer","undefined","type","options","correctAnswers","correctOptions","i","userOptions","JSON","stringify","trim","toLowerCase","correctAnswer","quiz","user","onSubmit","mode","navigate","useNavigate","answers","setAnswers","initialState","questions","forEach","q","id","timeLeft","setTimeLeft","timeLimit","currentQuestionIndex","setCurrentQuestionIndex","isSubmitting","setIsSubmitting","isAnswerChecked","setIsAnswerChecked","isPracticeMode","quizQuestions","useMemo","shuffleQuestions","shuffledOptions","shuffleOptions","shuffled","includes","handleSubmitQuiz","useCallback","timer","setInterval","t","clearInterval","handleAnswerChange","questionId","answer","prev","_objectSpread","Card","progress","length","optionsForCurrentQuestion","getOptionClassName","option","_answers$q$id","isCorrect","isSelected","title","seconds","floor","slice","first_name","style","width","text","onClick","window","speechSynthesis","cancel","utterance","SpeechSynthesisUtterance","lang","speak","alert","speakText","SpeakerIcon","imageUrl","src","alt","onError","target","display","optIndex","name","value","checked","onChange","disabled","_answers$q$id2","curr","next","filter","a","placeholder","OrderingQuestion","orderedItems","rows","explanation","LightbulbIcon","Button","variant","ArrowLeftIcon","handleNextQuestion","ArrowRightIcon","CheckIcon","handleCheckAnswer","_Fragment"],"sourceRoot":""}